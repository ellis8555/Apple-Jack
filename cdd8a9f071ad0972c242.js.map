{"version":3,"file":"cdd8a9f071ad0972c242.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCzEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;;;;;;;AClBA;AACyC;AACzC;AACO,QAAQ,uBAAK,EAAE,2BAAO,EAAE,6BAAQ,EAAE,mCAAW,EAAE,mCAAW,EAAE,2CAAe,EAAE,qBAAI,GAAG,EAAE;;ACH7F;AACA;AAC4D;AAC5D;AACA,MAAM,2BAAa;AACnB,0BAA0B,WAAW;AACrC;AACA;AACA,2DAAe;;ACRwF;AACvG;AACO;AACA;AACA;AACP;AACO,qBAAqB,KAAK;AACjC;AACO;AACP;AACO,uBAAuB,OAAO;AACrC;AACO,yBAAyB,QAAQ;AACxC;AACO,4BAA4B,WAAW;AAC9C;AACO,4BAA4B,WAAW;AAC9C;AACO,iCAAiC,eAAe;;;AClBvD;AAC4D;AACK;AACjE;AACA;AACA;AACA,gBAAgB,IAAI,YAAY,EAAE;AAClC;AACA,wBAAwB,KAAK,aAAa,KAAK;AAC/C;AACA;AACA,EAAE,qDAAe,QAAQ;;ACXzB;AAC4D;AACK;AACjE;AACA;AACA;AACA,gBAAgB,IAAI,YAAY,EAAE;AAClC;AACA,oBAAoB,KAAK,qBAAqB,KAAK;AACnD;AACA;AACA,wDAAe,WAAW;;ACX1B;AACiC;AACM;AAC0B;AACjE;AACA;AACA;AACA,gBAAgB,KAAK,cAAQ,OAAO;AACpC;AACA,MAAM,cAAQ;AACd;AACA;AACA,UAAU,WAAW;AACrB,6CAA6C,iBAAW,KAAK,cAAQ;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,4DAAe;;ACpBf;AACA;AACqE;AACN;AAC/D;AACA;AACA;AACA,gBAAgB,IAAI,gBAAgB,EAAE;AACtC;AACA,2BAA2B,QAAQ,iBAAiB,QAAQ;AAC5D;AACA;AACA,2DAAe,WAAW;;ACZ1B;AACA;AACA,EAA8D;AAC9D;AACA;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA,EAAE,yDAAe,WAAW;;ACT5B;AACA;AACO,mBAAmB,iFAAiC;AACpD,mCAAmC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACE,wBAAwB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACE,+BAA+B;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO,0BAA0B,qEAAqB;AAC/C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAS;AACT;AACA;AACA;AACA;AACA,EAAS,yBAAyB;AAClC;AACA;AACA;AACA,GAAG;AACH,EAAS;AACT,EAAS;AACT;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,EAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1I4D;AAC2B;AAClC;AACc;AACL;AACP;AACwC;AAC/F;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAe,iBAAiB;AAC3D,iCAAiC,qBAAe;AAChD;AACA,8BAA8B;AAC9B,oCAAoC;AACpC,qCAAqC;AACrC,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,IAAI,gBAAgB,SAAS;AACnD,wBAAwB,KAAK,cAAQ,OAAO;AAC5C,eAAe,uBAAuB;AACtC,mCAAmC,cAAQ,SAAS,gBAAgB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,kBAAW;AACjB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,WAAW;AACjB;AACA,UAAU,cAAQ;AAClB,UAAU,cAAQ;AAClB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,wBAAwB,IAAI,mBAAmB,EAAE;AACjD;AACA;AACA,2BAA2B,WAAW;AACtC,YAAY,oBAAW,YAAY,WAAW;AAC9C;AACA;AACA;AACA,2BAA2B,WAAW;AACtC,YAAY,oBAAW,YAAY,WAAW;AAC9C;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,sBAAsB,KAAK,cAAQ,OAAO;AAC1C,yBAAyB,cAAQ;AACjC;AACA,uCAAuC,cAAQ;AAC/C;AACA;AACA;AACA,mCAAmC,cAAQ;AAC3C;AACA;AACA;AACA;AACA,mCAAmC,cAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,cAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,csBAAsB,KAAK,cAAQ,OAAO;AAC1C,yBAAyB,cAAQ;AACjC;AACA,uCAAuC,cAAQ;AAC/C;AACA;AACA;AACA,mCAAmC,cAAQ;AAC3C;AACA;AACA;AACA,qBAAqB,aAAa;AAClC,mCAAmC,cAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA,qBAAqB,aAAa;AAClC,mCAAmC,cAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA,qBAAqB,aAAa;AAClC;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,aAAa;AAClC;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,aAAa;AACvD,4CAA4C,aAAa;AACzD;AACA;AACA;AACA;AACA,mCAAmC,cAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,aAAa;AAClC;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,aAAa;AAClC;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,aAAa;AACvD;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA,YAAY;AACZ,0CAA0C,aAAa;AACvD;AACA;AACA;AACA,0CAA0C,aAAa;AACvD;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA,YAAY;AACZ,0CAA0C,aAAa;AACvD;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD,6CAA6C,aAAa;AAC1D;AACA;AACA;AACA,0CAA0C,aAAa;AACvD;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA,YAAY;AACZ,0CAA0C,aAAa;AACvD;AACA;AACA;AACA,0CAA0C,aAAa;AACvD;AACA;AACA,uBAAuB,aAAa;AACpC;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA,YAAY;AACZ,0CAA0C,aAAa;AACvD;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD,6CAA6C,aAAa;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,4CAA4C,aAAa;AACzD;AACA,uBAAuB,aAAa;AACpC;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA,YAAY;AACZ,0CAA0C,aAAa;AACvD;AACA;AACA,4CAA4C,aAAa;AACzD;AACA,uBAAuB,aAAa;AACpC;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA,YAAY;AACZ,0CAA0C,aAAa;AACvD;AACA;AACA,4CAA4C,aAAa;AACzD;AACA,uBAAuB,aAAa;AACpC;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA,YAAY;AACZ,0CAA0C,aAAa;AACvD;AACA;AACA,4CAA4C,aAAa;AACzD;AACA,uBAAuB,aAAa;AACpC;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA,YAAY;AACZ,0CAA0C,aAAa;AACvD;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD,6CAA6C,aAAa;AAC1D;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD,6CAA6C,aAAa;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,gDAAe,SAAS;;ACtqBsB;AACM;AACS;AACP;AAC4C;AACpG;AACA,0BAA0B,kBAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB,KAAK,cAAQ,OAAO;AACpC,EAAE,SAAS,cAAc,cAAQ,eAAe,SAAS,CAAC,cAAQ;AAClE;AACA;AACA,EAAE,SAAS,cAAc,cAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,IAAI,iBAAiB,SAAS;AAChD,IAAI,SAAS,cAAc,cAAQ;AACnC,MAAM,iBAAiB;AACvB,MAAM,gBAAgB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,4BAA4B;AACrC;AACA;AACA;AACA;AACA,gBAAgB,KAAK,cAAQ,OAAO;AACpC,yBAAyB,uBAAuB,OAAO;AACvD;AACA;AACA,QAAQ,SAAS,cAAc,cAAQ;AACvC;AACA;AACA,IAAI,SAAS,cAAc,cAAQ;AACnC;AACA,QAAQ,SAAS,cAAc,cAAQ;AACvC;AACA;AACA,MAAM,SAAS,cAAc,cAAQ;AACrC;AACA;AACA,UAAU,SAAS,cAAc,cAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAK,cAAQ,OAAO;AACpC;AACA;AACA,QAAQ,SAAS,cAAc,cAAQ;AACvC;AACA;AACA;AACA,IAAI,SAAS,cAAc,cAAQ;AACnC;AACA,QAAQ,SAAS,cAAc,cAAQ;AACvC;AACA;AACA,MAAM,SAAS,cAAc,cAAQ;AACrC;AACA;AACA;AACA,YAAY,SAAS,cAAc,cAAQ;AAC3C,UAAU,oBAAW;AACrB;AACA;AACA;AACA,IAAI,SAAS,cAAc,cAAQ;AACnC;AACA,QAAQ,SAAS,cAAc,cAAQ;AACvC;AACA;AACA,MAAM,SAAS,cAAc,cAAQ;AACrC;AACA;AACA;AACA,YAAY,SAAS,cAAc,cAAQ;AAC3C,UAAU,oBAAW;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAK,cAAQ,OAAO;AACpC,EAAE,SAAS,cAAc,cAAQ;AACjC,oBAAoB,IAAI,SAAS,SAAS;AAC1C,MAAM,SAAS;AACf,QAAQ,cAAQ;AAChB;AACA,sBAAsB,KAAK,EAAE,SAAS,IAAI;AAC1C,sBAAsB,KAAK,EAAE,SAAS,IAAI;AAC1C;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,gBAAgB,KAAK,cAAQ,OAAO;AACpC,kBAAkB,wBAAwB;AAC1C;AACA,MAAM,SAAS,cAAc,cAAQ;AACrC;AACA,sBAAsB,IAAI,SAAS,SAAS;AAC5C,QAAQ,SAAS,0BAA0B,SAAS;AACpD,UAAU,SAAS,cAAc,cAAQ;AACzC,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAe,SAAS;;ACxJxB;AACkE;AACJ;AAC9D;AACA;AACA;AACA,gBAAgB,IAAI,cAAc,EAAE;AACpC;AACA,0BAA0B,OAAO,eAAe,OAAO;AACvD;AACA;AACA,yDAAe,UAAU;;ACXzB;AACmE;AACD;AAC7B;AACrC;AACA;AACA;AACA,gBAAgB,IAAI,cAAc,EAAE;AACpC;AACA;AACA,MAAM,kBAAU;AAChB;AACA,QAAQ,WAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,+DAAe,gBAAgB;;ACnB8C;AACjB;AACW;AACT;AACP;AACvD;AACA,0BAA0B,WAAW;AACrC;AACe;AACf;AACA;AACA;AACA,2BAA2B,wBAAgB;AAC3C;AACA,8BAA8B;AAC9B,oCAAoC;AACpC,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,iCAAiC;AACjC,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kBAAW;AACnB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,eAAe;AACrB,YAAY,kBAAU;AACtB;AACA;AACA,OAAO;AACP;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA,2BAA2B,WAAW;AACtC,YAAY,oBAAW,YAAY,WAAW;AAC9C;AACA;AACA;AACA,2BAA2B,WAAW;AACtC,YAAY,oBAAW,YAAY,WAAW;AAC9C;AACA;AACA;AACA,OAAO;AACP;AACA;;AChFwE;AACZ;AACJ;AACI;AACE;AAC0G;AACxK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,WAAW;AACrC,MAAM,8BAAiB,GAAG,kBAAW;AACrC;AACA;AACA;AACA,qBAAqB,+BAA+B,8BAAiB;AACrE;AACA,gBAAgB,KAAK,kBAAU,OAAO;AACtC,EAAE,qBAAqB,iBAAiB,kBAAU;AAClD,QAAQ,qBAAqB,CAAC,kBAAU;AACxC;AACA,EAAE,qBAAqB;AACvB,IAAI,kBAAU;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAK,kBAAU,OAAO;AACtC,kBAAkB,IAAI,iBAAiB,SAAS;AAChD,oBAAoB,IAAI,iBAAiB,SAAS;AAClD,MAAM,qBAAqB,iBAAiB,kBAAU;AACtD,QAAQ,gBAAgB;AACxB;AACA,QAAQ,iBAAiB;AACzB,QAAQ,qBAAqB,iBAAiB,kBAAU;AACxD,UAAU,iBAAiB;AAC3B;AACA,qCAAqC,iBAAiB;AACtD;AACA;AACA;AACA,IAAI,qBAAqB,iBAAiB,kBAAU;AACpD,MAAM,gBAAgB;AACtB;AACA;AACA,MAAM,qBAAqB,iBAAiB,kBAAU;AACtD,QAAQ,iBAAiB;AACzB;AACA;AACA,IAAI,qBAAqB,iBAAiB,kBAAU;AACpD,MAAM,gBAAgB;AACtB;AACA;AACA,MAAM,qBAAqB,iBAAiB,kBAAU;AACtD,QAAQ,gBAAgB;AACxB;AACA,QAAQ,qBAAqB,iBAAiB,kBAAU;AACxD,UAAU,gBAAgB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAK,kBAAU,OAAO;AACtC;AACA,IAAI,qBAAqB,iBAAiB,kBAAU;AACpD,kBAAkB,qCAAqC;AACvD,IAAI,qBAAqB;AACzB,MAAM,kBAAU;AAChB;AACA,sBAAsB,uBAAuB;AAC7C;AACA,yBAAyB,WAAW;AACpC,UAAU,WAAW;AACrB;AACA,UAAU,qBAAqB,iBAAiB,kBAAU;AAC1D;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAK,kBAAU,OAAO;AACtC;AACA,IAAI,qBAAqB,iBAAiB,kBAAU;AACpD,kBAAkB,qCAAqC;AACvD,IAAI,qBAAqB,iBAAiB,kBAAU;AACpD;AACA;AACA,sBAAsB,uBAAuB;AAC7C;AACA,yBAAyB,WAAW;AACpC,UAAU,WAAW;AACrB,UAAU,oBAAW,YAAY,WAAW;AAC5C;AACA,UAAU,qBAAqB,iBAAiB,kBAAU;AAC1D;AACA;AACA;AACA,yBAAyB,WAAW;AACpC,UAAU,WAAW;AACrB,UAAU,oBAAW,YAAY,WAAW;AAC5C;AACA,UAAU,qBAAqB,iBAAiB,kBAAU;AAC1D;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,gBAAgB,KAAK,kBAAU,OAAO;AACtC;AACA,IAAI,qBAAqB,iBAAiB,kBAAU;AACpD,kBAAkB,4BAA4B;AAC9C,oBAAoB,IAAI,gBAAgB,SAAS;AACjD,sBAAsB,IAAI,iBAAiB,SAAS;AACpD,QAAQ,qBAAqB,iBAAiB,kBAAU;AACxD,iDAAiD,gBAAgB;AACjE;AACA,UAAU,iBAAiB;AAC3B,UAAU,qBAAqB,iBAAiB,kBAAU;AAC1D,mDAAmD,aAAa;AAChE;AACA,uCAAuC,iBAAiB;AACxD;AACA;AACA;AACA,MAAM,qBAAqB,iBAAiB,kBAAU;AACtD,+CAA+C,gBAAgB;AAC/D;AACA;AACA,QAAQ,qBAAqB,iBAAiB,kBAAU;AACxD,kDAAkD,aAAa;AAC/D;AACA;AACA,MAAM,qBAAqB,iBAAiB,kBAAU;AACtD,+CAA+C,gBAAgB;AAC/D;AACA;AACA,QAAQ,qBAAqB,iBAAiB,kBAAU;AACxD,iDAAiD,gBAAgB;AACjE;AACA,UAAU,qBAAqB,iBAAiB,kBAAU;AAC1D,mDAAmD,gBAAgB;AACnE;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB,KAAK,kBAAU,OAAO;AACtC,EAAE,qBAAqB;AACvB,IAAI,qBAAqB,iBAAiB,kBAAU;AACpD;AACA;AACA;AACA;AACA,qBAAqB;AACrB,kBAAkB,IAAI,yBAAyB,SAAS;AACxD,SAAS,gBAAgB,6BAA6B;AACtD,IAAI,qBAAqB,CAAC,yBAAyB;AACnD,WAAW,gBAAgB;AAC3B;AACA;AACA,CAAC;AACD;AACA;AACA,IAAI,kBAAW;AACf,kBAAkB,KAAK,kBAAU,OAAO;AACxC;AACA,MAAM,qBAAqB,iBAAiB,kBAAU;AACtD,oBAAoB,4BAA4B;AAChD,sBAAsB,IAAI,aAAa,SAAS;AAChD,QAAQ,qBAAqB,iBAAiB,kBAAU;AACxD,kDAAkD,gBAAgB;AAClE,sBAAsB,kBAAU;AAChC,QAAQ,qBAAqB;AAC7B,uDAAuD,aAAa;AACpE;AACA,UAAU,qBAAqB,iBAAiB,kBAAU;AAC1D,oDAAoD,gBAAgB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAe,qBAAqB;;ACtOpC;AACmD;AACc;AACN;AAC3D;AACA,MAAM,oCAAiB,GAAG,kBAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,UAAS;AACb;AACA;AACA;AACA,IAAI,UAAS;AACb;AACA,2CAA2C,UAAS;AACpD;AACA;AACA,kBAAkB,yBAAyB;AAC3C,oBAAoB,KAAK,oCAAiB,EAAE;AAC5C,qCAAqC,EAAE,EAAE,gBAAgB;AACzD;AACA;AACA,QAAQ,UAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,YAAqB;AACzB;AACA;AACA;AACA,IAAI,YAAqB;AACzB;AACA;AACA;AACA,IAAI,YAAqB;AACzB;AACA;AACA;AACA,gBAAgB,yBAAyB;AACzC,kBAAkB,KAAK,oCAAiB,EAAE;AAC1C,qCAAqC,EAAE,EAAE,gBAAgB;AACzD;AACA;AACA;AACA;AACA;AACA,QAAQ,YAAqB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAe,eAAe;;ACnEyG;AACvI;AACA;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B,yBAAyB,cAAc;AACvC,uBAAuB,YAAY;AACnC,0BAA0B,eAAe;AACzC,+BAA+B,oBAAoB;AACnD;AACA,EAAE,qDAAe,WAAW;;ACX5B;AACA;AACe;AACf;AACA;;ACJA;AACA;AACA;AACA;AACA,2DAAe,YAAY;;ACJZ;AACf;AACA;AACA;AACA;AACA;AACA;;ACNe;AACf;AACA;AACA;;ACHA;AACmE;AACL;AAC9D;AACA;AACA;AACA,gBAAgB,IAAI,cAAc,EAAE;AACpC;AACA,sBAAsB,OAAO,oBAAoB,OAAO;AACxD;AACA;AACA,4DAAe,aAAa;;ACX5B;AACmF;AACvB;AAC5D;AACA;AACA;AACA,gBAAgB,IAAI,YAAY,EAAE;AAClC,IAAI,gBAAgB,MAAM,KAAK;AAC/B,0BAA0B,gBAAgB,KAAK,KAAK;AACpD;AACA;AACA,EAAE,8DAAe,iBAAiB;;ACX0B;AACN;AACM;AACM;AACM;AACxE;AACA;AACA,EAAiB,+CAA+C,oBAAa;AAC7E;AACA;AACA,qCAAqC,WAAW;AAChD;AACA;AACA;AACA;AACA,wBAAwB,qBAAa;AACrC;AACA;AACA;AACA;AACA,8BAA8B,cAAQ;AACtC;AACA,UAAU,uBAAiB;AAC3B,SAAS;AACT;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA,wBAAwB,qBAAa;AACrC,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA,+DAA+D,oBAAa;AAC5E;AACA,gCAAgC,cAAQ;AACxC;AACA,YAAY,uBAAiB;AAC7B,WAAW;AACX;AACA;AACA,OAAO;AACP;AACA;;AC9CwE;AACxE;AACe;AACf;AACA;AACA;AACA,MAAM,uBAAiB;AACvB,KAAK;AACL;AACA,GAAG;AACH;;ACV4C;AACO;AACe;AACxB;AACsB;AACA;AAChE;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gBAAgB;AACpB;AACA,8CAA8C;AAC9C,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,kCAAkC,UAAU;AAC5C;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA,kCAAkC,cAAc,mBAAmB,gBAAgB,oBAAoB,iBAAiB;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC;AACA;AACA;AACA,sCAAsC,cAAc,mBAAmB,gBAAgB,oBAAoB,iBAAiB,QAAQ,OAAO;AAC3I;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,UAAU;AACV;AACA,uCAAuC,cAAc,mBAAmB,gBAAgB,oBAAoB,iBAAiB;AAC7H;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,IAAI,oBAAY;AAChB,IAAI,kBAAkB;AACtB;AACA;AACA,IAAI,YAAY,IAAI;AACpB;AACA;AACA;AACA;AACA,MAAM,oBAAoB;AAC1B,MAAM;AACN,MAAM,sBAAsB;AAC5B;AACA;;ACtG+E;AACd;AACR;AACT;AAChD;AACe;AACf;AACA;AACA;AACA;AACA,eAAe,kBAAe;AAC9B;AACA;AACA;AACA,sBAAsB,cAAW;AACjC,IAAI,WAAW;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iBAAiB;AACrB;;AC1B6C;AAC7C;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,SAAS;AACjB;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,QAAQ,SAAS;AACjB;AACA;AACA;;ACnBA;AACkD;AACe;AAC/B;AAClC;AACA;AACA;AACA,gBAAgB,KAAK,kBAAW,SAAS;AACzC;AACA;AACA;AACA;AACA,UAAU,WAAW;AACrB;AACA,2BAA2B,cAAQ;AACnC;AACA;AACA;AACA;AACA;AACA,gEAAe,mBAAmB;;ACpBnB;AACf;AACA;AACA;;ACH+D;AAC/D;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gBAAgB;AAChC;AACA,MAAM;AACN;AACA;AACA;;AChBA;AACkC;AAC0B;AAC5D;AACA;AACA;AACA,gBAAgB,IAAI,cAAQ,OAAO;AACnC,sBAAsB,cAAQ,aAAa,KAAK;AAChD;AACA;AACA,0DAAe,aAAa;;ACV5B,EAAiE;AACjE,EAAiE;AACjE,EAA2D;AAC3D,EAAiE;AACjE,EAA6E;AAC7E,EAA6E;AAC7E,EAAuE;AACvE,EAA2D;AAC3D,EAAiD;AACjD,EAA2D;AAC3D;AACA,MAAM,2BAAY;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2BAAY;AACjC;AACA,EAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,cAAc;AAClB,IAAI,kBAAkB;AACtB;AACA;AACA,aAAa,iBAAW;AACxB,iBAAiB,cAAQ;AACzB,sBAAsB,uBAAiB,KAAK,cAAQ,sBAAsB;AAC1E;AACA,6CAA6C;AAC7C,MAAM;AACN,aAAa,iBAAW;AACxB,iBAAiB,cAAQ;AACzB,sBAAsB,uBAAiB,KAAK,cAAQ,sBAAsB;AAC1E;AACA,gCAAgC;AAChC;AACA;AACA,0BAA0B,WAAW;AACrC;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAU;AAClC;AACA;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,0BAA0B,UAAU;AACpC;AACA;AACA;AACA,IAAI,gBAAgB;AACpB;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,0BAA0B,UAAU;AACpC;AACA;AACA;AACA,IAAI,gBAAgB;AACpB;AACA;AACA;AACA;AACA,QAAQ,qBAAqB;AAC7B,0BAA0B,UAAU;AACpC;AACA;AACA;AACA,IAAI,gBAAgB;AACpB;AACA;AACA,+GAA+G,YAAY,eAAe,oBAAoB,SAAS,oBAAoB,UAAU,qBAAqB,UAAU;AACpO,iCAAiC,UAAU;AAC3C;AACA,2GAA2G,mBAAmB,WAAW;AACzI;AACA;AACA;AACA,mCAAmC,IAAI,KAAK;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC,UAAU,2BAAY;AACtB;AACA;AACA,UAAU,2BAAY;AACtB;AACA,UAAU,2BAAY;AACtB;AACA,QAAQ;AACR;AACA;AACA,UAAU,2BAAY;AACtB;AACA,UAAU,2BAAY;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC,YAAY,2BAAY;AACxB;AACA;AACA,YAAY,2BAAY;AACxB;AACA,qBAAqB,2BAAY;AACjC;AACA,UAAU;AACV;AACA;AACA,YAAY,2BAAY;AACxB;AACA,qBAAqB,2BAAY;AACjC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC,YAAY,2BAAY;AACxB;AACA;AACA,YAAY,2BAAY;AACxB;AACA,YAAY,2BAAY;AACxB;AACA,UAAU;AACV;AACA;AACA,YAAY,2BAAY;AACxB;AACA,YAAY,2BAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C,cAAc,2BAAY;AAC1B;AACA;AACA,cAAc,2BAAY;AAC1B;AACA,uBAAuB,2BAAY;AACnC;AACA,YAAY;AACZ;AACA;AACA,cAAc,2BAAY;AAC1B;AACA,uBAAuB,2BAAY;AACnC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC,YAAY,2BAAY;AACxB;AACA;AACA,YAAY,2BAAY;AACxB;AACA,YAAY,2BAAY;AACxB;AACA,UAAU;AACV;AACA;AACA,YAAY,2BAAY;AACxB;AACA,YAAY,2BAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C,cAAc,2BAAY;AAC1B;AACA;AACA,cAAc,2BAAY;AAC1B;AACA,uBAAuB,2BAAY;AACnC;AACA,YAAY;AACZ;AACA;AACA,cAAc,2BAAY;AAC1B;AACA,uBAAuB,2BAAY;AACnC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,iCAAiC,kBAAkB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,gBAAgB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC,YAAY,2BAAY;AACxB;AACA;AACA,YAAY,2BAAY;AACxB;AACA,YAAY,2BAAY;AACxB;AACA,UAAU;AACV;AACA;AACA,YAAY,2BAAY;AACxB;AACA,YAAY,2BAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C,cAAc,2BAAY;AAC1B;AACA;AACA,cAAc,2BAAY;AAC1B;AACA,uBAAuB,2BAAY;AACnC;AACA,YAAY;AACZ;AACA;AACA,cAAc,2BAAY;AAC1B;AACA,uBAAuB,2BAAY;AACnC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,gBAAgB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC,YAAY,2BAAY;AACxB;AACA;AACA,YAAY,2BAAY;AACxB;AACA,YAAY,2BAAY;AACxB;AACA,UAAU;AACV;AACA;AACA,YAAY,2BAAY;AACxB;AACA,YAAY,2BAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C,cAAc,2BAAY;AAC1B;AACA;AACA,cAAc,2BAAY;AAC1B;AACA,uBAAuB,2BAAY;AACnC;AACA,YAAY;AACZ;AACA;AACA,cAAc,2BAAY;AAC1B;AACA,uBAAuB,2BAAY;AACnC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,gBAAgB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC,YAAY,2BAAY;AACxB;AACA;AACA,YAAY,2BAAY;AACxB;AACA,YAAY,2BAAY;AACxB;AACA,UAAU;AACV;AACA;AACA,YAAY,2BAAY;AACxB;AACA,YAAY,2BAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C,cAAc,2BAAY;AAC1B;AACA;AACA,cAAc,2BAAY;AAC1B;AACA,uBAAuB,2BAAY;AACnC;AACA,YAAY;AACZ;AACA;AACA,cAAc,2BAAY;AAC1B;AACA,uBAAuB,2BAAY;AACnC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;ACvkBA,EAAuE;AACvE,EAA2D;AAC3D,EAA6E;AAC7E,EAAuE;AACvE,EAA2D;AAC3D,EAAqE;AACrE,EAAuD;AACvD,EAA8D;AAC9D;AACA,EAAiB;AACjB,IAAI,kBAAkB;AACtB,IAAI,cAAc;AAClB,IAAI,YAAY;AAChB,IAAI,kBAAgB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,WAAW;AACrC;AACA,4BAA4B,cAAQ;AACpC;AACA,MAAM,uBAAiB;AACvB,aAAa,kBAAkB;AAC/B;AACA;AACA,4BAA4B,cAAQ;AACpC;AACA,MAAM,uBAAiB;AACvB,aAAa,kBAAkB;AAC/B;AACA;AACA,8BAA8B,IAAI;AAClC;AACA;AACA;AACA;AACA;AACA,QAAQ,uBAAiB;AACzB,SAAS,eAAe,oBAAoB,SAAS,oBAAoB,SAAS,qBAAqB,kBAAkB,oBAAoB,SAAS;AACtJ;AACA;AACA,wCAAwC,sBAAsB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,sBAAsB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA,sBAAsB,gCAAgC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB,GAAG,MAAM;AAC3D,UAAU;AACV,kCAAkC,gBAAgB,EAAE,MAAM;AAC1D;AACA;AACA;AACA;AACA,8BAA8B,gBAAgB;AAC9C,oCAAoC,mBAAmB;AACvD;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AC3Fe;AACf;AACA;AACA;;ACHA;AACA,EAA+F;AAC/F,EAA2D;AAC3D,EAAiE;AACjE,EAAiE;AACjE,EAA6E;AAC7E,EAAuE;AACvE,EAA2D;AAC3D,EAAmE;AACnE,EAAuD;AACvD,EAAiD;AACjD,EAA8D;AAC9D;AACA,EAAiB;AACjB,IAAI,kBAAkB;AACtB,IAAI,cAAc;AAClB,IAAI,gBAAgB;AACpB,IAAI,YAAY;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA,0BAA0B,WAAW;AACrC;AACA,4BAA4B,cAAQ;AACpC;AACA,MAAM,uBAAiB;AACvB,KAAK;AACL;AACA,MAAM,uBAAiB;AACvB,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA,0CAA0C,WAAW;AACrD;AACA;AACA,8BAA8B,iBAAW;AACzC;AACA;AACA;AACA,wCAAwC,kBAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,cAAQ;AACpC;AACA,MAAM,uBAAiB;AACvB,KAAK;AACL;AACA,MAAM,uBAAiB;AACvB,aAAa,iBAAiB;AAC9B;AACA;AACA,0CAA0C,WAAW;AACrD;AACA;AACA,8BAA8B,iBAAW;AACzC;AACA;AACA;AACA,wCAAwC,kBAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,uBAAiB;AACvB,OAAO,eAAe,oBAAoB,SAAS,oBAAoB,SAAS,qBAAqB,iBAAiB,oBAAoB,SAAS;AACnJ;AACA,qCAAqC,sBAAsB;AAC3D;AACA;AACA,qCAAqC,sBAAsB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,2BAA2B;AAC/C;AACA;AACA;AACA,qFAAqF,uBAAuB;AAC5G,QAAQ;AACR;AACA;AACA;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA;AACA,qFAAqF,uBAAuB;AAC5G,QAAQ;AACR;AACA;AACA;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mBAAmB;AACpD;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iCAAiC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM,gBAAgB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,gBAAgB,kBAAU;AAC1B;AACA;AACA;AACA;AACA;AACA,4CAA4C,wBAAwB;AACpE,gBAAgB,kBAAU;AAC1B;AACA,cAAc;AACd;AACA;AACA;AACA,4CAA4C,wBAAwB;AACpE,gBAAgB,kBAAU;AAC1B;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzSgD;AACM;AACN;AACM;AACU;AACQ;AAClB;AACvB;AACa;AACgB;AAC5D;AACe;AACf;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,SAAS;AACf;AACA;AACA;AACA,+GAA+G,mBAAa;AAC5H;AACA,QAAQ,eAAe,oBAAoB,KAAK,oBAAoB,UAAU,qBAAqB,UAAU;AAC7G,0BAA0B,KAAK;AAC/B,4BAA4B,WAAW,EAAE,SAAS;AAClD;AACA,sBAAsB,iBAAiB;AACvC,mDAAmD;AACnD;AACA;AACA;AACA;AACA,uBAAuB,cAAQ,6BAA6B;AAC5D,qCAAqC,WAAW,iBAAiB,WAAW;AAC5E,UAAU;AACV,6BAA6B,cAAQ,6BAA6B;AAClE,iCAAiC,KAAK;AACtC;AACA;AACA;AACA,YAAY,uBAAiB,qBAAqB,UAAU;AAC5D,qCAAqC,gBAAgB,iBAAiB,WAAW;AACjF;AACA;AACA;AACA;AACA,uBAAuB,cAAQ,6BAA6B;AAC5D,sDAAsD,mBAAa;AACnE;AACA,cAAc,eAAe;AAC7B,UAAU;AACV,6BAA6B,cAAQ,6BAA6B;AAClE,sDAAsD,mBAAa;AACnE;AACA,cAAc,eAAe;AAC7B;AACA,0BAA0B,cAAQ,6BAA6B;AAC/D;AACA;AACA,gBAAgB,2BAA2B,QAAQ,2BAA2B;AAC9E;AACA,UAAU;AACV,cAAc,2BAA2B,SAAS,2BAA2B;AAC7E;AACA;AACA,UAAU;AACV;AACA;AACA,0BAA0B,4BAA4B;AACtD;AACA;AACA;AACA,uBAAuB,cAAQ,6BAA6B;AAC5D,sDAAsD,mBAAa;AACnE;AACA,cAAc,eAAe;AAC7B,UAAU;AACV,6BAA6B,cAAQ,6BAA6B;AAClE,sDAAsD,mBAAa;AACnE;AACA,cAAc,eAAe;AAC7B;AACA,2BAA2B,cAAQ,6BAA6B;AAChE;AACA;AACA;AACA,uBAAuB,cAAQ,6BAA6B;AAC5D,qCAAqC,WAAW,iBAAiB,WAAW;AAC5E,UAAU;AACV,6BAA6B,cAAQ,6BAA6B;AAClE,iCAAiC,KAAK;AACtC;AACA;AACA;AACA,YAAY,uBAAiB,qBAAqB,UAAU;AAC5D,qCAAqC,gBAAgB,iBAAiB,WAAW;AACjF;AACA;AACA;AACA,gBAAgB,2BAA2B,QAAQ,2BAA2B;AAC9E;AACA,UAAU;AACV,cAAc,2BAA2B,SAAS,2BAA2B;AAC7E;AACA;AACA,UAAU;AACV;AACA;AACA,0BAA0B,4BAA4B;AACtD;AACA;AACA,uBAAuB,cAAQ,6BAA6B;AAC5D;AACA,gBAAgB,2BAA2B,QAAQ,2BAA2B;AAC9E,eAAe,wBAAwB;AACvC;AACA;AACA;AACA,YAAY;AACZ,gBAAgB,2BAA2B,QAAQ,2BAA2B;AAC9E,eAAe,wBAAwB;AACvC;AACA;AACA;AACA,YAAY;AACZ,gBAAgB,2BAA2B,SAAS,2BAA2B;AAC/E;AACA;AACA;AACA,YAAY;AACZ,gBAAgB,2BAA2B,QAAQ,2BAA2B;AAC9E,eAAe,wBAAwB;AACvC;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,UAAU;AACV,yBAAyB,cAAQ,6BAA6B;AAC9D;AACA,kBAAkB,2BAA2B;AAC7C,oBAAoB,2BAA2B;AAC/C,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA,cAAc;AACd,kBAAkB,2BAA2B;AAC7C,oBAAoB,2BAA2B;AAC/C,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA,cAAc;AACd,kBAAkB,2BAA2B,SAAS,2BAA2B;AACjF;AACA;AACA;AACA,cAAc;AACd,kBAAkB,2BAA2B;AAC7C,oBAAoB,2BAA2B;AAC/C,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,IAAI;AAC5B;AACA;AACA,oEAAoE,KAAK,kBAAkB,qBAAqB,oBAAoB,SAAS,oBAAoB,UAAU;AAC3K,2CAA2C,qBAAqB;AAChE;AACA;AACA;AACA,kEAAkE,KAAK,kBAAkB,qBAAqB,oBAAoB,UAAU,wBAAwB,UAAU,mBAAmB,SAAS;AAC1M;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,IAAI,eAAe;AACnB;AACA;AACA,8CAA8C,mBAAa,WAAW;AACtE;AACA;AACA,IAAI,cAAc;AAClB;AACA;AACA;AACA;AACA;AACA,iCAAiC,kBAAkB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,OAAO;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,YAAY;AACjD;AACA;AACA;;AC9OsD;AACY;AAChB;AACsB;AACT;AAC/D;AACe;AACf,IAAI,cAAc;AAClB,IAAI,kBAAkB;AACtB,IAAI,YAAY;AAChB;AACA;AACA;AACA,sBAAsB,uBAAiB,gBAAgB,UAAU;AACjE,0BAA0B,uBAAiB,gBAAgB,UAAU;AACrE,uBAAuB,uBAAiB,gBAAgB,UAAU;AAClE,0BAA0B,uBAAiB,gBAAgB,UAAU;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,uBAAiB;AACvB,OAAO,eAAe,oBAAoB,KAAK,oBAAoB,YAAY,qBAAqB,UAAU;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,IAAI;AAClC;AACA;AACA;AACA;AACA;AACA,iCAAiC,kBAAkB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3GsD;AACJ;AACC;AACe;AAClB;AACA;AACe;AACP;AACC;AACV;AACsB;AACrE;AACe;AACf,IAAI,cAAc;AAClB,IAAI,kBAAkB;AACtB,IAAI,oBAAY;AAChB,IAAI,YAAY;AAChB;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM,SAAS,kCAAkC,UAAU;AAC3D;AACA;AACA;AACA,QAAQ,sBAAsB;AAC9B;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,KAAK;AAC/B;AACA;AACA;AACA,iCAAiC,UAAU;AAC3C;AACA;AACA;AACA;AACA,2BAA2B,MAAM,IAAI,QAAQ,IAAI,MAAM;AACvD;AACA;AACA;AACA;AACA,uBAAuB,KAAK;AAC5B,uBAAuB,YAAY;AACnC,wBAAwB,UAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,KAAK;AAC7B,wBAAwB,YAAY;AACpC,yBAAyB,UAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,KAAK;AAC7B,wBAAwB,YAAY;AACpC,yBAAyB,UAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,KAAK;AAC7B,yBAAyB,UAAU;AACnC,kCAAkC,mBAAa,WAAW;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,eAAe;AACnB;AACA;AACA,8CAA8C,mBAAa,WAAW;AACtE;AACA;AACA,0CAA0C,wBAAwB;AAClE;AACA,+CAA+C,mBAAa,WAAW;AACvE;AACA;AACA,qDAAqD,mBAAmB;AACxE;AACA,sDAAsD,mBAAmB;AACzE,6CAA6C,cAAc;AAC3D;;ACnHkE;AAClE;AACe;AACf;AACA;AACA;AACA,qCAAqC,kBAAkB;AACvD;AACA;;ACRA;AACA;AACuE;AACI;AACc;AAC7B;AAC5D;AACA,EAAiB;AACjB;AACA;AACA;AACA,eAAe,oBAAa;AAC5B;AACA;AACA,4BAA4B,yBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,sBAAsB,yBAAyB;AAC/C;AACA,0BAA0B,uBAAiB;AAC3C,UAAU,yBAAmB;AAC7B,eAAe,OAAO;AACtB;AACA;AACA;AACA,iCAAiC;AACjC,gCAAgC;AAChC;AACA,wCAAwC,qBAAqB;AAC7D,0BAA0B,uBAAiB;AAC3C,UAAU,yBAAmB;AAC7B,eAAe,OAAO;AACtB;AACA;AACA;AACA,iCAAiC;AACjC,MAAM;AACN;AACA;AACA,sBAAsB,qBAAqB;AAC3C,0BAA0B,uBAAiB;AAC3C,UAAU,yBAAmB;AAC7B,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,sBAAsB;AAC1B;AACA;AACA;AACA;AACA,oEAAoE;AACpE,8FAA8F;AAC9F,wBAAwB;AACxB;AACA;AACA,eAAe,MAAM;AACrB,eAAe,yBAAmB,iBAAiB;AACnD,0BAA0B,yBAAmB,iBAAiB;AAC9D,2BAA2B,OAAO;AAClC;AACA;AACA;AACA,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB;AACA;;AC3E4D;AACb;AAC2B;AACK;AAC1B;AACb;AAC8C;AAC7B;AACzD;AACe;AACf,iCAAiC,oBAAa,CAAC;AAC/C,IAAI,WAAW;AACf,MAAM,oBAAa;AACnB,gBAAgB,oBAAa,EAAE;AAC/B,mCAAmC,oBAAa,CAAC;AACjD,MAAM,SAAS;AACf;AACA;AACA;AACA,MAAM,oBAAoB;AAC1B;AACA,IAAI,iBAAiB;AACrB,IAAI,aAAa,CAAC,oBAAa;AAC/B;AACA;AACA,IAAI,eAAe,CAAC,qBAAqB,EAAE,gBAAgB;AAC3D;;AC1BoC;AACsB;AAC1D;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,SAAS;AAChD;AACA,MAAM,oBAAoB;AAC1B,MAAM;AACN;AACA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;;;ACrBqD;AACX;AACuB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,aAAa;AACrB,QAAQ;AACR;AACA,QAAQ,aAAa;AACrB;AACA,MAAM;AACN;AACA;AACA,QAAQ,aAAa;AACrB,QAAQ;AACR;AACA,QAAQ,aAAa;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,YAAY;AACpB,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ,wBAAwB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,qDAAe,iBAAiB;;ACnGlC;AACA;AACA;AACA;AACA,0DAAe,WAAW;;ACJ1B;AACA;AACe;AACf;AACA;;ACJA;AACA;AACe;AACf;AACA;;ACJ4D;AACP;AACrD;AACe;AACf,IAAI,eAAe;AACnB,IAAI,iBAAiB;AACrB;;ACNA,MAAM,8BAAW;AACjB;AACe;AACf,EAAE,8BAAW;AACb;AACA;AACA,GAAG;AACH;;ACPA,MAAM,kCAAa;AACnB;AACe;AACf,EAAE,kCAAa;AACf;AACA;AACA,GAAG;AACH;;ACPoD;AACE;AACK;AACO;AACK;AACC;AACK;AACxB;AACrD;AACA;AACA,mEAAmE,mBAAW;AAC9E,oEAAoE,oBAAY;AAChF;AACA;AACA;AACA,wCAAwC,YAAY;AACpD;AACA;AACA;AACA;AACA;AACA,MAAM,kBAAkB;AACxB,MAAM,iBAAiB;AACvB,KAAK;AACL;AACA;AACA;AACA;AACA,MAAM,oBAAoB;AAC1B,MAAM,eAAe;AACrB,KAAK;AACL;AACA,mEAAmE,mBAAW;AAC9E;AACA;AACA;AACA,MAAM,eAAe;AACrB,MAAM,oBAAY;AAClB,KAAK;;ACtCmC;AACwC;AACX;AACtB;AACgC;AAC1B;AACO;AAC5D;AACA;AACA;AACA;AACe,4CAA4C,oBAAa;AACxE;AACA;AACA;AACA,KAAK,sBAAsB;AAC3B;AACA,qBAAqB,SAAS;AAC9B,IAAI;AACJ;AACA,qBAAqB,eAAe;AACpC;AACA;AACA,iCAAiC,aAAa,EAAE,eAAe;AAC/D,EAAE,WAAW;AACb;AACA,SAAS,cAAc,EAAE,gBAAgB;AACzC,iCAAiC,aAAa,EAAE,eAAe;AAC/D,IAAI,UAAS;AACb;AACA;AACA;AACA;AACA;AACA,EAAE,iBAAiB;AACnB,EAAE,aAAa;AACf;;ACpCmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,CAAC;AACD;AACA;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,CAAC;AACD;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,CAAC;AACD;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,CAAC;AACD;AACA;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,CAAC;AACD;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,CAAC;AACD;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,CAAC;AACD;AACA;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,CAAC;AACD;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,CAAC;AACD;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,CAAC;;;ACxDuC;AACsB;AACiB;AACnB;AACM;AACb;AACrD;AACA;AACA;AACA;AACe,4CAA4C,oBAAa;AACxE;AACA,mCAAmC,aAAa,EAAE,eAAe;AACjE,EAAE,WAAW;AACb;AACA,SAAS,cAAc,EAAE,gBAAgB;AACzC,+CAA+C,aAAa,EAAE,eAAe;AAC7E,IAAI,YAAqB;AACzB;AACA;AACA;AACA,IAAI,YAAY;AAChB;AACA,EAAE,aAAa;AACf,EAAE,iBAAiB;AACnB;AACA;;AC1BwC;AACsB;AACiB;AACnB;AACM;AACb;AACrD;AACA;AACA;AACA;AACe;AACf;AACA;AACA,oCAAoC,eAAe;AACnD,EAAE,WAAW;AACb;AACA,gBAAgB,gBAAgB;AAChC,gDAAgD,eAAe;AAC/D,IAAI,YAAqB;AACzB;AACA;AACA;AACA,IAAI,YAAY;AAChB;AACA,EAAE,aAAa,CAAC,oBAAa;AAC7B,EAAE,iBAAiB;AACnB;;AC1BmE;AACM;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,sBAAsB;AAC1B,CAAC;AACD;AACA;AACA;AACA,IAAI,sBAAsB;AAC1B,CAAC;AACD;AACA;AACA;AACA,IAAI,sBAAsB;AAC1B,CAAC;AACD;AACA;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,CAAC;AACD;AACA;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,CAAC;AACD;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,CAAC;AACD;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,CAAC;AACD;AACA;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,CAAC;AACD;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,CAAC;AACD;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,CAAC;AACD;AACA;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,CAAC;AACD;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,CAAC;AACD;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,CAAC;;ACzEqD;AACe;AACrE;AACA,EAAiB;AACjB,IAAI,kBAAkB;AACtB;AACA;AACA;AACA,8BAA8B,WAAW,+BAA+B,eAAe;AACvF,uCAAuC;AACvC;AACA;AACA;AACA,IAAI,oBAAY;AAChB;;ACdwD;AACxD;AACA;AACA;AACA;AACA,6BAA6B,aAAa;;ACLwB;AAClE;AACe;AACf;AACA;AACA;AACA;AACA,4BAA4B,WAAW;AACvC;AACA,OAAO;AACP;AACA;AACA,4BAA4B,WAAW;AACvC;AACA,OAAO;AACP;AACA;AACA,4BAA4B,WAAW;AACvC;AACA;AACA;AACA;;;ACrB8D;AACkB;AAChF;AACe;AACf;AACA,mBAAmB,cAAQ;AAC3B;AACA,IAAI,uBAAiB,oBAAoB,aAAa;AACtD;AACA;;;ACTkE;AAClE;AACe;AACf;AACA,gCAAgC,WAAW;AAC3C;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;;;ACZ8D;AACkB;AAChF;AACe;AACf,mBAAmB,cAAQ;AAC3B,oBAAoB,uBAAiB;AACrC;AACA;;;ACP2E;AACN;AACsB;AAC3F;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C,iDAAiD,WAAW;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,WAAW,IAAI,WAAW;AAC1D;AACA;AACA;AACA;AACA;AACA,mCAAmC,aAAa;AAChD;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAU;AACjC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;ACrD8E;AACI;AACZ;AACW;AACjF;AACe;AACf,EAAE,kBAAkB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,MAAM;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA;AACA,MAAM;AACN,iBAAiB,WAAW;AAC5B;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;AClIgF;AAChF;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,eAAe;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,eAAe;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,eAAe;AAChE;AACA;AACA;;;AC9B0D;AACI;AACa;AAChB;AAC3D;AACe;AACf,EAAE,cAAc;AAChB,EAAE,kBAAkB;AACpB,EAAE,YAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;;;ACrBmE;AACL;AAC9D;AACA;AACA;AACA,qBAAqB,cAAc;AACnC;AACA,aAAa,eAAe;AAC5B;AACA;AACA,yDAAe,iBAAiB,EAAC;;;ACVmD;AACpF;AACA;AACA;AACA;AACA,6BAA6B,kBAAiB;;ACLI;AACK;AACvD;AACA;AAC4C;AAC5C;AAC+D;AAC/D;AAC+D;AAC/D;AAC8C;AAC9C;AAC8C;AAC9C;AACA;AACA;AACA,uCAAuC,YAAY;AACnD;AACA;AACA;AACA,oCAAoC,cAAiB;;ACpBrD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,QAAQ,iBAAM,aAAa,yBAAmD;AAC9E;AACA,EAAE,iDAAe,iEAAM,IAAC;AACxB;;ACXA;AACqB;AACK;AACF;AACC;AACS;AACT;AACzB;AACsC;AACkB;AAC6B;AACrF;AACA;AAC0C;AAC1C;AACA;AACA,IAAI,YAAY;AAChB;AACA,IAAI,iBAAiB,G","sources":["webpack://apple-jack/./img|C:/img|sync|/.(png%7Cjpe","webpack://apple-jack/webpack/bootstrap","webpack://apple-jack/webpack/runtime/global","webpack://apple-jack/webpack/runtime/hasOwnProperty shorthand","webpack://apple-jack/webpack/runtime/publicPath","webpack://apple-jack/./src/constants/masterHaxData.js","webpack://apple-jack/./src/scripts/var_lib/season/currentSeason.js","webpack://apple-jack/./src/constants/consts/vars.js","webpack://apple-jack/./src/scripts/var_lib/maps/teams/teamsMAP.js","webpack://apple-jack/./src/scripts/var_lib/maps/teams/teamsNumMAP.js","webpack://apple-jack/./src/scripts/var_lib/maps/teams/teamsSeasonsMAP.js","webpack://apple-jack/./src/scripts/var_lib/maps/gameType/gameTypeMAP.js","webpack://apple-jack/./src/scripts/var_lib/season/seasonCount.js","webpack://apple-jack/./src/constants/consts/supportVars.js","webpack://apple-jack/./src/scripts/classFiles/teamStats.js","webpack://apple-jack/./src/scripts/setTables/createTeam.js","webpack://apple-jack/./src/scripts/var_lib/maps/players/playersMAP.js","webpack://apple-jack/./src/scripts/var_lib/maps/players/playerSeasonsMAP.js","webpack://apple-jack/./src/scripts/classFiles/individualPlayerStats.js","webpack://apple-jack/./src/scripts/setTables/createPlayer.js","webpack://apple-jack/./src/scripts/var_lib/maps/tableDataSourceMAP.js","webpack://apple-jack/./src/scripts/var_lib/maps/tableFieldsMAP.js","webpack://apple-jack/./src/scripts/misc/sort.js","webpack://apple-jack/./src/scripts/sidebar/closeSidebar.js","webpack://apple-jack/./src/scripts/scoreboard/clearScoreboardDiv.js","webpack://apple-jack/./src/scripts/tables/getTablesDiv.js","webpack://apple-jack/./src/scripts/var_lib/maps/players/playersNumMAP.js","webpack://apple-jack/./src/scripts/var_lib/maps/teams/eachTeamObjectMAP.js","webpack://apple-jack/./src/scripts/misc/playerTableBgColor.js","webpack://apple-jack/./src/scripts/misc/setTeamsTableBgColor.js","webpack://apple-jack/./src/scripts/tables/createTable.js","webpack://apple-jack/./src/scripts/misc/sortTable.js","webpack://apple-jack/./src/scripts/listeners/listenerHelpers/setTableListeners.js","webpack://apple-jack/./src/scripts/var_lib/maps/teams/eachSeasonsTeamsMAP.js","webpack://apple-jack/./src/scripts/tables/clearTablesDiv.js","webpack://apple-jack/./src/scripts/layouts/setHeaderBanner.js","webpack://apple-jack/./src/scripts/var_lib/maps/teams/teamsColorMAP.js","webpack://apple-jack/./src/scripts/layouts/teamPlayerList.js","webpack://apple-jack/./src/scripts/layouts/setGifs.js","webpack://apple-jack/./src/scripts/scoreboard/getScoreboardDiv.js","webpack://apple-jack/./src/scripts/layouts/singleGameStats.js","webpack://apple-jack/./src/scripts/layouts/getTeamsGamesResults.js","webpack://apple-jack/./src/scripts/layouts/teamsColorsPage.js","webpack://apple-jack/./src/scripts/layouts/setTeamsPageLayout.js","webpack://apple-jack/./src/scripts/listeners/listenerHelpers/setListenersMainNavbar.js","webpack://apple-jack/./src/scripts/layouts/setMainNavbar.js","webpack://apple-jack/./src/scripts/tables/setHomeTable.js","webpack://apple-jack/./src/scripts/misc/screenResize.js","webpack://apple-jack/./src/scripts/misc/documentResize.js","webpack://apple-jack/./src/scripts/sidebar/openSidebar.js","webpack://apple-jack/./src/scripts/sidebar/players/hidePlayerSubMenu.js","webpack://apple-jack/./src/scripts/sidebar/teams/hideTeamSubMenu.js","webpack://apple-jack/./src/scripts/sidebar/hideAllSubMenus.js","webpack://apple-jack/./src/scripts/sidebar/teams/displayTeamSubMenu.js","webpack://apple-jack/./src/scripts/sidebar/players/displayPlayerSubMenu.js","webpack://apple-jack/./src/scripts/listeners/menubarListeners/menubarListeners.js","webpack://apple-jack/./src/scripts/tables/setSeasonsFullTable.js","webpack://apple-jack/./src/scripts/listeners/seasonTableListeners/seasonTableListeners.js","webpack://apple-jack/./src/scripts/tables/setPlayersFullTable.js","webpack://apple-jack/./src/scripts/tables/setPlayersAllTimeTable.js","webpack://apple-jack/./src/scripts/listeners/playerTableListeners/playerTableListeners.js","webpack://apple-jack/./src/scripts/layouts/announcements.js","webpack://apple-jack/./src/scripts/listeners/pageListeners/announcementsListener.js","webpack://apple-jack/./src/scripts/layouts/records/genericRecordFunctions/filterGameResults.js","webpack://apple-jack/./src/scripts/layouts/records/genericRecordFunctions/getTeamLogo.js","webpack://apple-jack/./src/scripts/layouts/records/genericRecordFunctions/getTeamsPlayers.js","webpack://apple-jack/./src/scripts/layouts/records/genericRecordFunctions/getTeamsBackgroundColor.js","webpack://apple-jack/./src/scripts/layouts/records/recordViews/createIndividualRecord.js","webpack://apple-jack/./src/scripts/layouts/records/teamRecords/teamGoalsScored/teamGoalsScored.js","webpack://apple-jack/./src/scripts/layouts/records/recordViews/createRecordsLayout.js","webpack://apple-jack/./src/scripts/layouts/records/recordViews/setRecordsPage.js","webpack://apple-jack/./src/scripts/layouts/records/teamRecords/teamRecordsExports.js","webpack://apple-jack/./src/scripts/listeners/pageListeners/leagueRecordsListener.js","webpack://apple-jack/./src/scripts/listeners/listeners.js","webpack://apple-jack/./src/scripts/loadImages.js","webpack://apple-jack/./src/index.js"],"sourcesContent":["var map = {\n\t\"./favicon/haxFav.svg\": 7736,\n\t\"./haxball-big-min.svg\": 6317,\n\t\"./teamLogos/S01/Mooney3rdS01.svg\": 6740,\n\t\"./teamLogos/S01/MooneyAwayS01.svg\": 8711,\n\t\"./teamLogos/S01/MooneyHomeS01.svg\": 6970,\n\t\"./teamLogos/S01/cegAlternate.png\": 7296,\n\t\"./teamLogos/S01/cegAwayS01.svg\": 9249,\n\t\"./teamLogos/S01/cegHomeS01.svg\": 4884,\n\t\"./teamLogos/S01/haxHomeS01.svg\": 9028,\n\t\"./teamLogos/S01/haxualChocolateAwayS01.svg\": 7709,\n\t\"./teamLogos/S01/haxualChocolateHomeS01.svg\": 976,\n\t\"./teamLogos/S01/sadAwayS01.svg\": 1920,\n\t\"./teamLogos/S01/sadHomeS01.svg\": 9373,\n\t\"./teamLogos/S02/MooneyAwayS02.svg\": 1839,\n\t\"./teamLogos/S02/MooneyHomeS02.svg\": 3914,\n\t\"./teamLogos/S02/S01/Mooney3rdS01.svg\": 2284,\n\t\"./teamLogos/S02/S01/MooneyAwayS01.svg\": 831,\n\t\"./teamLogos/S02/S01/MooneyHomeS01.svg\": 3826,\n\t\"./teamLogos/S02/S01/cegAlternate.png\": 4152,\n\t\"./teamLogos/S02/S01/cegAwayS01.svg\": 1081,\n\t\"./teamLogos/S02/S01/cegHomeS01.svg\": 2172,\n\t\"./teamLogos/S02/S01/haxHomeS01.svg\": 9612,\n\t\"./teamLogos/S02/S01/haxualChocolateAwayS01.svg\": 4901,\n\t\"./teamLogos/S02/S01/haxualChocolateHomeS01.svg\": 5000,\n\t\"./teamLogos/S02/S01/sadAwayS01.svg\": 5576,\n\t\"./teamLogos/S02/S01/sadHomeS01.svg\": 1669,\n\t\"./teamLogos/S02/cesPoolAwayS02.svg\": 6057,\n\t\"./teamLogos/S02/cesPoolHomeS02.svg\": 9676,\n\t\"./teamLogos/S02/haxelRoseAwayS02.svg\": 1873,\n\t\"./teamLogos/S02/haxelRoseHomeS02.svg\": 9156,\n\t\"./teamLogos/S02/haxualChocolateAwayS02.svg\": 4539,\n\t\"./teamLogos/S02/haxualChocolateHomeS02.svg\": 870,\n\t\"./teamLogos/S03/hacksAwayS03.svg\": 7418,\n\t\"./teamLogos/S03/hacksHomeS03.svg\": 9031,\n\t\"./teamLogos/S03/haxHogansAwayS03.svg\": 3623,\n\t\"./teamLogos/S03/haxHogansHomeS03.svg\": 186,\n\t\"./teamLogos/S03/haxualChocolateAwayS03.svg\": 4261,\n\t\"./teamLogos/S03/haxualChocolateHomeS03.svg\": 4552,\n\t\"./teamLogos/S03/orangeRickyAwayS03.svg\": 2856,\n\t\"./teamLogos/S03/orangeRickyHomeS03.svg\": 1677,\n\t\"./teamLogos/S03/spaceballsTheHcAwayS03.svg\": 6062,\n\t\"./teamLogos/S03/spaceballsTheHcHomeS03.svg\": 6363,\n\t\"./teamLogos/S03/ultraticklenippleAwayS03.svg\": 8786,\n\t\"./teamLogos/S03/ultraticklenippleHomeS03.svg\": 8511,\n\t\"./teamLogos/S04/degenerationHaxAwayS04.svg\": 6000,\n\t\"./teamLogos/S04/degenerationHaxHomeS04.svg\": 893,\n\t\"./teamLogos/S04/nighthaxAwayS04.svg\": 9899,\n\t\"./teamLogos/S04/nighthaxHomeS04.svg\": 7766,\n\t\"./teamLogos/S04/theHaxFoundationAwayS04.svg\": 501,\n\t\"./teamLogos/S04/theHaxFoundationHomeS04.svg\": 6056,\n\t\"./teamLogos/S04/trinityNuclearTestAwayS04.svg\": 9679,\n\t\"./teamLogos/S04/trinityNuclearTestHomeS04.svg\": 8282\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 5179;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// json game data\r\nimport haxBallData from \"../json/haxData\"\r\n\r\nexport const { Teams, Players, GameType, TeamPlayers, GameResults, GamePlayerStats, Gifs } = haxBallData","// gets the most recent season that has been played or is currently running\r\n\r\nimport {TeamPlayers} from \"../../../constants/masterHaxData\"\r\n\r\nconst currentSeason = Math.max(\r\n    ...Array.from(new Set(TeamPlayers.map((item) => +item.SeasonNumber)))\r\n  );\r\n\r\nexport default currentSeason","import { Teams, Players, GameType, TeamPlayers, GameResults, GamePlayerStats } from \"../masterHaxData\";\r\n\r\nexport const DEFENDING_CHAMPS = \"Haxual Chocolate\";\r\nexport const DEFENDING_CHAMPS_LOGO = \"img/teamLogos/S03/haxualChocolateHomeS03.svg\"\r\nexport const SEASONS_WITH_TIE_GAMES = [1];\r\n// count of how many teams there are\r\nexport const TEAMS_LENGTH = Teams.length;\r\n// array of length matching teams_length which gets populated\r\nexport const TEAM_NAMES_ARRAY = [TEAMS_LENGTH]\r\n// count of how many players there are\r\nexport const PLAYERS_LENGTH = Players.length;\r\n// 2 count modes of season/playoff\r\nexport const GAME_TYPE_LENGTH = GameType.length;\r\n// length of list of each player to which team for each season\r\nexport const TEAM_PLAYERS_LENGTH = TeamPlayers.length;\r\n// count of how many games played both playoff and season\r\nexport const GAME_RESULTS_LENGTH = GameResults.length;\r\n// length of every players stat recorded for all games\r\nexport const GAME_PLAYER_STATS_LENGTH = GamePlayerStats.length;\r\n","// maps teams via key is teamID number to textual name as value\r\nimport { Teams } from \"../../../../constants/masterHaxData\";\r\nimport { TEAMS_LENGTH } from \"../../../../constants/consts/vars\";\r\n\r\nconst teamsMAP = new Map()\r\n\r\nfor (let i = 0; i < TEAMS_LENGTH; i++) {\r\n    // map a list of teams with ID number to name\r\n    teamsMAP.set(Number(Teams[i].TeamID), Teams[i].TeamName);\r\n  }\r\n\r\n  export default teamsMAP;","// maps teams via key as textual name to teamID number\r\nimport { Teams } from \"../../../../constants/masterHaxData\";\r\nimport { TEAMS_LENGTH } from \"../../../../constants/consts/vars\";\r\n\r\nconst teamsNumMAP = new Map();\r\n\r\nfor (let i = 0; i < TEAMS_LENGTH; i++) {\r\n    // map a list of teams with ID number to name\r\n    teamsNumMAP.set(Teams[i].TeamName, Number(Teams[i].TeamID));\r\n  }\r\n\r\nexport default teamsNumMAP;","// maps via key as textual name to array of which seasons team competed in\r\nimport teamsMAP from \"./teamsMAP\"\r\nimport teamsNumMAP from \"./teamsNumMAP\"\r\nimport { TeamPlayers } from \"../../../../constants/masterHaxData\"\r\n\r\nconst teamsSeasonsMAP = new Map()\r\n\r\nfor (let i = 1; i <= teamsMAP.size; i++) {\r\n    teamsSeasonsMAP.set(\r\n      teamsMAP.get(i),\r\n      Array.from(\r\n        new Set(\r\n          TeamPlayers\r\n            .filter((item) => item.TeamID == teamsNumMAP.get(teamsMAP.get(i)))\r\n            .map((item) => item.SeasonNumber)\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\nexport default teamsSeasonsMAP","// map a list of season modes by Number to name (Season or Playoff)\r\n\r\nimport { GAME_TYPE_LENGTH } from \"../../../../constants/consts/vars\";\r\nimport { GameType } from \"../../../../constants/masterHaxData\";\r\n\r\nconst gameTypeMAP = new Map();\r\n\r\nfor (let i = 0; i < GAME_TYPE_LENGTH; i++) {\r\n    // map a list of season modes by Number to name (Season or Playoff)\r\n    gameTypeMAP.set(Number(GameType[i].GameTypeID), GameType[i].GameType);\r\n  }\r\n\r\nexport default gameTypeMAP;","//get count of how many seasons in order to create arrays for each season\r\n\r\n  import {TeamPlayers} from \"../../../constants/masterHaxData\"\r\n\r\n  const seasonCount = Array.from(\r\n    //get count of how many seasons in order to create arrays for each season\r\n    new Set(TeamPlayers.map((item) => item.SeasonNumber))\r\n  );\r\n\r\n  export default seasonCount;","// for teams class\r\n\r\nexport const seasonMode = [\"Combined\", \"Season\", \"Playoff\"];\r\nexport const teamStatsFieldsAbbreviated = [\r\n      \"GP\",\r\n      \"Win\",\r\n      \"Loss\",\r\n      \"Draw\",\r\n      \"Points\",\r\n      \"GF\",\r\n      \"GA\",\r\n      \"GD\",\r\n      \"GFA\",\r\n      \"GAA\",\r\n    ]\r\nexport const teamStatsFields = [\r\n      \"GamesPlayed\",\r\n      \"Win\",\r\n      \"Loss\",\r\n      \"Draw\",\r\n      \"Points\",\r\n      \"GoalsFor\",\r\n      \"GoalsAgainst\",\r\n      \"GoalDifferential\",\r\n      \"GoalsForAverage\",\r\n      \"GoalsAgainstAverage\",\r\n    ]\r\nexport const teamStatsFieldNamesMAP = [\r\n      \"allTimeGamesPlayed\",\r\n      \"allTimeWins\",\r\n      \"allTimeLosses\",\r\n      \"allTimeDrawsLength\",\r\n      \"allTimePoints\",\r\n      \"allTimeGoals\",\r\n      \"allTimeGoalsAgainst\",\r\n      \"allTimeGoalDifferential\",\r\n      \"allTimeGoalsForAverage\",\r\n      \"allTimeGoalsAgainstAverage\",\r\n    ]\r\n\r\nexport const groupedAllTimeTeamStats = [\r\n      \"groupTeamsAllTimeStats\",\r\n      \"groupTeamsAllTimeSeasonStats\",\r\n      \"groupTeamsAllTimePlayoffStats\",\r\n    ]\r\nexport const statsType = [\"CombinedStats\", \"SeasonStats\", \"PlayoffStats\"]\r\n\r\n// forplayer class\r\n\r\nexport const  playerSeasonMode = [\"Season\", \"Playoff\"];\r\nexport const  playerStatsFields = [\r\n  \"Assists\",\r\n  \"Goals\",\r\n  \"Points\",\r\n  \"Kicks\",\r\n  \"Passes\",\r\n  \"ShotsOnGoal\",\r\n  \"OwnGoals\",\r\n];\r\n  export const  groupedAllTimePlayerStats = [\r\n    \"groupPlayersAllTimeStats\",\r\n    \"groupPlayersAllTimeSeasonStats\",\r\n    \"groupPlayersAllTimePlayoffStats\",\r\n  ];\r\n  export const  allTimeMapNames = [\r\n    \"groupPlayersAllTimeStatsMAP\",\r\n    \"groupPlayersAllTimeSeasonStatsMAP\",\r\n    \"groupPlayersAllTimePlayoffStatsMAP\",\r\n  ];\r\n  export const  perSeasonCats = [\"CombinedStats\", \"SeasonStats\", \"PlayoffStats\"];\r\n  export const  perSeasonCatMAPS = [\"CombinedStatsMAP\", \"SeasonStatsMAP\", \"PlayoffStatsMAP\"];\r\n  \r\n// for both team/players class'\r\n\r\nexport const allTimeStatsArray = [\r\n    \"allTimeStats\",\r\n    \"allTimeSeasonStats\",\r\n    \"allTimePlayoffStats\",\r\n  ];\r\n\r\n  export const allTimeStatsMAPS = [\r\n    \"allTimeStatsMAP\",\r\n    \"allTimeSeasonStatsMAP\",\r\n    \"allTimePlayoffStatsMAP\",\r\n  ];\r\n\r\n  // SET FIELDS FOR TEAMS TABLES WITH TIE GAMES\r\n\r\nexport const homePageFields = [\"Team\", \"GP\", \"Wins\", \"Losses\", \"Draws\", \"Points\"];\r\nexport const fullTable = [\r\n  \"Team\",\r\n  \"GP\",\r\n  \"Wins\",\r\n  \"Losses\",\r\n  \"Draws\",\r\n  \"Points\",\r\n  \"GF\",\r\n  \"GA\",\r\n  \"GD\",\r\n  \"GFA\",\r\n  \"GAA\",\r\n  \"PF\",\r\n  \"PFA\",\r\n  \"PA\",\r\n  \"PAA\",\r\n];\r\n\r\n// SET FIELDS FOR TEAMS TABLES IN SEASONS THAT DON'T HAVE TIE GAMES\r\nexport const homePageFieldsNoTies = [\"Team\", \"GP\", \"Wins\", \"Losses\", \"OTL\", \"Points\"];\r\nexport const fullTableNoTies = [\r\n  \"Team\",\r\n  \"GP\",\r\n  \"Wins\",\r\n  \"OTW\",\r\n  \"Losses\",\r\n  \"OTL\",\r\n  \"Points\",\r\n  \"GF\",\r\n  \"GA\",\r\n  \"GD\",\r\n  \"GFA\",\r\n  \"GAA\",\r\n  \"PF\",\r\n  \"PFA\",\r\n  \"PA\",\r\n  \"PAA\",\r\n];\r\n// SET FIELDS FOR PLAYERS TABLES\r\nexport const playersTable = [\r\n  \"Name\",\r\n  \"GP\",\r\n  \"Goals\",\r\n  \"Assists\",\r\n  \"Points\",\r\n  \"Kicks\",\r\n  \"Passes\",\r\n  \"ShotsOnGoal\",\r\n  \"OwnGoals\",\r\n];","import { GameResults } from \"../../constants/masterHaxData\";\r\nimport {SEASONS_WITH_TIE_GAMES, GAME_RESULTS_LENGTH} from \"../../constants/consts/vars\"\r\nimport teamsMAP from \"../var_lib/maps/teams/teamsMAP\"\r\nimport teamsSeasonsMAP from \"../var_lib/maps/teams/teamsSeasonsMAP\"\r\nimport gameTypeMAP from \"../var_lib/maps/gameType/gameTypeMAP\"\r\nimport seasonCount from \"../var_lib/season/seasonCount\"\r\nimport { allTimeStatsMAPS, groupedAllTimeTeamStats } from \"../../constants/consts/supportVars\";\r\n\r\nclass TeamStats {\r\n    constructor(name) {\r\n      // players name\r\n      this.name = name;\r\n      this.seasonsPlayed = teamsSeasonsMAP.get(this.name); // this MAP is key by team name with array value listing seasonNums\r\n      this.seasonsPlayedLength = teamsSeasonsMAP.get(this.name).length;\r\n      // all time team stats per object (team)\r\n      this.allTimeStats = []; // collects from GameResults JSON\r\n      this.allTimeSeasonStats = []; // GameResults JSON filtered to seasonType is \"Season\"\r\n      this.allTimePlayoffStats = []; // GameResults JSON filtered to seasonType is \"Playoff\"\r\n      this.teamsSeasonsPlayed = []; // unique list of which seasons this team played in\r\n      this.allTimeStatsMAP = new Map();\r\n      this.allTimeSeasonStatsMAP = new Map();\r\n      this.allTimePlayoffStatsMAP = new Map();\r\n  \r\n      this.seasonsPlayed.forEach((item) => {\r\n        this[\"teamsSeason\" + item + \"CombinedStats\"] = [];\r\n        this[\"teamsSeason\" + item + \"SeasonStats\"] = [];\r\n        this[\"teamsSeason\" + item + \"PlayoffStats\"] = [];\r\n        this[\"teamsSeason\" + item + \"CombinedStatsMAP\"] = new Map();\r\n        this[\"teamsSeason\" + item + \"SeasonStatsMAP\"] = new Map();\r\n        this[\"teamsSeason\" + item + \"PlayoffStatsMAP\"] = new Map();\r\n      });\r\n    }\r\n  \r\n    // static properties and methods\r\n  \r\n    static allTeamStats = {}; // individual teams' instances of this class placed here\r\n  \r\n    // these arrays contain MAPS for each teams' all time totals ready for tabular display\r\n    static groupTeamsAllTimeStats = [];\r\n    static groupTeamsAllTimeSeasonStats = [];\r\n    static groupTeamsAllTimePlayoffStats = [];\r\n  \r\n    // function for populating the class' group all time arrays\r\n    static setGroupedAllTimeArrays() {\r\n      for (let i = 0; i < allTimeStatsMAPS.length; i++) {\r\n        for (let j = 1; j <= teamsMAP.size; j++) {\r\n          this[groupedAllTimeTeamStats[i]].push(\r\n            TeamStats.allTeamStats[teamsMAP.get(j)][allTimeStatsMAPS[i]]\r\n          );\r\n        }\r\n      }\r\n    }\r\n  \r\n    static setPerSeasonAllTimeContainers() {\r\n      seasonCount.forEach((item) => {\r\n        this[\"groupTeamsSeason\" + item + \"CombinedStats\"] = [];\r\n        this[\"groupTeamsSeason\" + item + \"SeasonStats\"] = [];\r\n        this[\"groupTeamsSeason\" + item + \"PlayoffStats\"] = [];\r\n      });\r\n    }\r\n  \r\n    // set teams all time stats arrays\r\n  \r\n    setTeamsAllTimeStats(allTimeArray, allTimeSeasonArray, allTimePlayoffArray) {\r\n      // fills allTimeStats[]/seasonStats[]/playoff[]\r\n      GameResults.forEach((item) => {\r\n        if (\r\n          teamsMAP.get(Number(item.TeamOne)) == this.name ||\r\n          teamsMAP.get(Number(item.TeamTwo)) == this.name\r\n        ) {\r\n          this[allTimeArray].push(item);\r\n        }\r\n      });\r\n  \r\n      this[allTimeArray].forEach((item) => {\r\n        for (let i = 0; i < GAME_RESULTS_LENGTH; i++) {\r\n          // GAME_RESULTS_LENGTH\r\n          if (\r\n            item.GameID == GameResults[i].GameID &&\r\n            gameTypeMAP.get(Number(GameResults[i].GameTypeID)) == \"Season\"\r\n          )\r\n            this[allTimeSeasonArray].push(item);\r\n          if (\r\n            item.GameID == GameResults[i].GameID &&\r\n            gameTypeMAP.get(Number(GameResults[i].GameTypeID)) == \"Playoff\"\r\n          )\r\n            this[allTimePlayoffArray].push(item);\r\n        }\r\n      });\r\n    }\r\n  \r\n    // set teams all time stats MAPS\r\n  \r\n    setTeamsAllTimeStatsMAPS(inputArray, writeToMAP) {\r\n      for (let i = 1; i <= teamsMAP.size; i++) {\r\n        if (this.name == teamsMAP.get(i)) {\r\n          // list team name to be associated with this MAP\r\n          this[writeToMAP].set(\"Team\", teamsMAP.get(i));\r\n          // all Time Games Played\r\n          this[writeToMAP].set(\r\n            \"GP\",\r\n            TeamStats.allTeamStats[teamsMAP.get(i)][inputArray].length\r\n          );\r\n          // all Time Home Games\r\n          this[writeToMAP].set(\r\n            \"allTimeHomeGames\",\r\n            TeamStats.allTeamStats[teamsMAP.get(i)][inputArray].filter(\r\n              (item) => item.TeamOne == i\r\n            )\r\n          );\r\n          // all Time Away Games\r\n          this[writeToMAP].set(\r\n            \"allTimeAwayGames\",\r\n            TeamStats.allTeamStats[teamsMAP.get(i)][inputArray].filter(\r\n              (item) => item.TeamTwo == i\r\n            )\r\n          );\r\n          // all Time Home Wins\r\n          this[writeToMAP].set(\r\n            \"allTimeHomeWins\",\r\n            this[writeToMAP]\r\n              .get(\"allTimeHomeGames\")\r\n              .filter(\r\n                (item) => Number(item.TeamOneScore) > Number(item.TeamTwoScore)\r\n              )\r\n          );\r\n          // all Time Away Wins\r\n          this[writeToMAP].set(\r\n            \"allTimeAwayWins\",\r\n            this[writeToMAP]\r\n              .get(\"allTimeAwayGames\")\r\n              .filter(\r\n                (item) => Number(item.TeamOneScore) < Number(item.TeamTwoScore)\r\n              )\r\n          );\r\n          // all Time Wins\r\n          this[writeToMAP].set(\r\n            \"Wins\",\r\n            this[writeToMAP].get(\"allTimeHomeWins\").length +\r\n              this[writeToMAP].get(\"allTimeAwayWins\").length\r\n          );\r\n          // all Time Draws\r\n          this[writeToMAP].set(\r\n            \"drawGames\",\r\n            TeamStats.allTeamStats[teamsMAP.get(i)][inputArray].filter(\r\n              (item) => Number(item.TeamOneScore) == Number(item.TeamTwoScore)\r\n            )\r\n          );\r\n          // all time Draws Length\r\n          this[writeToMAP].set(\"Draws\", this[writeToMAP].get(\"drawGames\").length);\r\n          // all Time Losses\r\n          this[writeToMAP].set(\r\n            \"Losses\",\r\n            this[writeToMAP].get(\"GP\") -\r\n              (this[writeToMAP].get(\"Wins\") + this[writeToMAP].get(\"Draws\"))\r\n          );\r\n          // all Time Points\r\n          this[writeToMAP].set(\r\n            \"Points\",\r\n            this[writeToMAP].get(\"Wins\") * 3 + this[writeToMAP].get(\"Draws\")\r\n          );\r\n          // all Time Home Goals For\r\n          if (this[writeToMAP].get(\"allTimeHomeGames\").length != 0) {\r\n            //check if any home games were even played\r\n            this[writeToMAP].set(\r\n              \"allTimeHomeGoalsFor\",\r\n              this[writeToMAP]\r\n                .get(\"allTimeHomeGames\")\r\n                .map((item) => item.TeamOneScore)\r\n                .reduce((goalStart, goalAdd) => +goalStart + +goalAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(\"allTimeHomeGoalsFor\", 0);\r\n          }\r\n          // all Time Away Goals For\r\n          if (this[writeToMAP].get(\"allTimeAwayGames\").length != 0) {\r\n            //check if any away games were even played\r\n            this[writeToMAP].set(\r\n              \"allTimeAwayGoalsFor\",\r\n              this[writeToMAP]\r\n                .get(\"allTimeAwayGames\")\r\n                .map((item) => item.TeamTwoScore)\r\n                .reduce((goalStart, goalAdd) => +goalStart + +goalAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(\"allTimeAwayGoalsFor\", 0);\r\n          }\r\n          // all Time Goals For\r\n          this[writeToMAP].set(\r\n            \"GF\",\r\n            +this[writeToMAP].get(\"allTimeHomeGoalsFor\") +\r\n              +this[writeToMAP].get(\"allTimeAwayGoalsFor\")\r\n          );\r\n          // all Time Home Goals Against\r\n          if (this[writeToMAP].get(\"allTimeHomeGames\").length != 0) {\r\n            // check if any home games were even played\r\n            this[writeToMAP].set(\r\n              \"allTimeHomeGoalsAgainst\",\r\n              this[writeToMAP]\r\n                .get(\"allTimeHomeGames\")\r\n                .map((item) => item.TeamTwoScore) // TeamTwo is opponent\r\n                .reduce((goalStart, goalAdd) => +goalStart + +goalAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(\"allTimeHomeGoalsAgainst\", 0);\r\n          }\r\n          // all Time Away Goals Against\r\n          if (this[writeToMAP].get(\"allTimeAwayGames\").length != 0) {\r\n            this[writeToMAP].set(\r\n              \"allTimeAwayGoalsAgainst\",\r\n              this[writeToMAP]\r\n                .get(\"allTimeAwayGames\")\r\n                .map((item) => item.TeamOneScore) // TeamOne is opponent\r\n                .reduce((goalStart, goalAdd) => +goalStart + +goalAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(\"allTimeAwayGoalsAgainst\", 0);\r\n          }\r\n          // all Time Goals Against\r\n          this[writeToMAP].set(\r\n            \"GA\",\r\n            +this[writeToMAP].get(\"allTimeHomeGoalsAgainst\") +\r\n              +this[writeToMAP].get(\"allTimeAwayGoalsAgainst\")\r\n          );\r\n          // all Time Goal Differential\r\n          this[writeToMAP].set(\r\n            \"GD\",\r\n            +this[writeToMAP].get(\"GF\") - +this[writeToMAP].get(\"GA\")\r\n          );\r\n          // all Time Goals For Average\r\n          if (\r\n            //check for teams that did not make the playoffs to avoid \"NaN\" result\r\n            this[writeToMAP].get(\"GF\") != 0 &&\r\n            this[writeToMAP].get(\"GA\") != 0\r\n          ) {\r\n            this[writeToMAP].set(\r\n              \"GFA\",\r\n              (+this[writeToMAP].get(\"GF\") / +this[writeToMAP].get(\"GP\")).toFixed(\r\n                2\r\n              )\r\n            );\r\n            // all Time Goals Against Average\r\n            this[writeToMAP].set(\r\n              \"GAA\",\r\n              (+this[writeToMAP].get(\"GA\") / +this[writeToMAP].get(\"GP\")).toFixed(\r\n                2\r\n              )\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(\"GFA\", 0) && this[writeToMAP].set(\"GAA\", 0);\r\n          }\r\n          ////////////////////////\r\n          // all Time Home Possession For\r\n          if (this[writeToMAP].get(\"allTimeHomeGames\") != 0) {\r\n            this[writeToMAP].set(\r\n              \"homePossessionFor\",\r\n              this[writeToMAP]\r\n                .get(\"allTimeHomeGames\")\r\n                .map((item) => item.TeamOnePossession)\r\n                .reduce((timeStart, timeAdd) => +timeStart + +timeAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(\"homePossessionFor\", 0);\r\n          }\r\n          // all Time Away Possession For\r\n          if (this[writeToMAP].get(\"allTimeAwayGames\") != 0) {\r\n            this[writeToMAP].set(\r\n              \"awayPossessionFor\",\r\n              this[writeToMAP]\r\n                .get(\"allTimeAwayGames\")\r\n                .map((item) => item.TeamTwoPossession)\r\n                .reduce((timeStart, timeAdd) => +timeStart + +timeAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(\"awayPossessionFor\", 0);\r\n          }\r\n          // all Time Home Possession Against\r\n          if (this[writeToMAP].get(\"allTimeHomeGames\") != 0) {\r\n            this[writeToMAP].set(\r\n              \"homePossessionAgainst\",\r\n              this[writeToMAP]\r\n                .get(\"allTimeHomeGames\")\r\n                .map((item) => item.TeamTwoPossession) // TeamTwo is opponent\r\n                .reduce((timeStart, timeAdd) => +timeStart + +timeAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(\"homePossessionAgainst\", 0);\r\n          }\r\n          // all Time Away Possession Against\r\n          if (this[writeToMAP].get(\"allTimeAwayGames\") != 0) {\r\n            this[writeToMAP].set(\r\n              \"awayPossessionAgainst\",\r\n              this[writeToMAP]\r\n                .get(\"allTimeAwayGames\")\r\n                .map((item) => item.TeamOnePossession) // TeamOne is opponent\r\n                .reduce((timeStart, timeAdd) => +timeStart + +timeAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(\"awayPossessionAgainst\", 0);\r\n          }\r\n          // total Possession For\r\n          this[writeToMAP].set(\r\n            \"PF\",\r\n            +this[writeToMAP].get(\"homePossessionFor\") +\r\n              +this[writeToMAP].get(\"awayPossessionFor\")\r\n          );\r\n          // total Possession Against\r\n          this[writeToMAP].set(\r\n            \"PA\",\r\n            +this[writeToMAP].get(\"homePossessionAgainst\") +\r\n              +this[writeToMAP].get(\"awayPossessionAgainst\")\r\n          );\r\n          // possession For Average\r\n          if (\r\n            //check for teams that did not make the playoffs to avoid \"NaN\" result\r\n            this[writeToMAP].get(\"PF\") != 0 &&\r\n            this[writeToMAP].get(\"PA\") != 0\r\n          ) {\r\n            this[writeToMAP].set(\r\n              \"PFA\",\r\n              (+this[writeToMAP].get(\"PF\") / +this[writeToMAP].get(\"GP\")).toFixed(\r\n                2\r\n              )\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(\"PFA\", 0);\r\n          }\r\n          // possession Against Average\r\n          if (\r\n            //check for teams that did not make the playoffs to avoid \"NaN\" result\r\n            this[writeToMAP].get(\"PF\") != 0 &&\r\n            this[writeToMAP].get(\"PA\") != 0\r\n          ) {\r\n            this[writeToMAP].set(\r\n              \"PAA\",\r\n              (+this[writeToMAP].get(\"PA\") / +this[writeToMAP].get(\"GP\")).toFixed(\r\n                2\r\n              )\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(\"PAA\", 0);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    setTeamsIndividualSeasonsStatsMAPS(\r\n      inputArray,\r\n      writeToMAP,\r\n      seasonNumber = currentSeason\r\n    ) {\r\n      // mode argument is either \"combined season and playoffs\", \"season\", \"playoff\"\r\n      for (let i = 1; i <= teamsMAP.size; i++) {\r\n        if (this.name == teamsMAP.get(i)) {\r\n          // list team name to be associated with this MAP\r\n          this[writeToMAP].set(\"Team\", teamsMAP.get(i));\r\n          // this seasons Games Played\r\n          this[writeToMAP].set(\r\n            \"GP\",\r\n            TeamStats.allTeamStats[teamsMAP.get(i)][inputArray][0].length\r\n          );\r\n          // this seasons Home Games\r\n          this[writeToMAP].set(\r\n            `season${seasonNumber}HomeGames`,\r\n            TeamStats.allTeamStats[teamsMAP.get(i)][inputArray][0].filter(\r\n              (item) => item.TeamOne == i\r\n            )\r\n          );\r\n          // this seasons Away Games\r\n          this[writeToMAP].set(\r\n            `season${seasonNumber}AwayGames`,\r\n            TeamStats.allTeamStats[teamsMAP.get(i)][inputArray][0].filter(\r\n              (item) => item.TeamTwo == i\r\n            )\r\n          );\r\n          // this seasons Home Wins\r\n          this[writeToMAP].set(\r\n            `season${seasonNumber}HomeWins`,\r\n            this[writeToMAP]\r\n              .get(`season${seasonNumber}HomeGames`)\r\n              .filter(\r\n                (item) => Number(item.TeamOneScore) > Number(item.TeamTwoScore)\r\n              )\r\n          );\r\n          // this seasons Away Wins\r\n          this[writeToMAP].set(\r\n            `season${seasonNumber}AwayWins`,\r\n            this[writeToMAP]\r\n              .get(`season${seasonNumber}AwayGames`)\r\n              .filter(\r\n                (item) => Number(item.TeamOneScore) < Number(item.TeamTwoScore)\r\n              )\r\n          );\r\n          // this seasons OT wins\r\n          if (!SEASONS_WITH_TIE_GAMES.includes(seasonNumber)) {\r\n            //season withOUT ties\r\n            this[writeToMAP].set(\r\n              \"OTW\",\r\n              this[writeToMAP]\r\n                .get(`season${seasonNumber}HomeWins`)\r\n                .filter((item) => item.ExtraTime == \"Yes\").length +\r\n                this[writeToMAP]\r\n                  .get(`season${seasonNumber}AwayWins`)\r\n                  .filter((item) => item.ExtraTime == \"Yes\").length\r\n            );\r\n          }\r\n          // this seasons Wins\r\n          this[writeToMAP].set(\r\n            \"Wins\",\r\n            this[writeToMAP].get(`season${seasonNumber}HomeWins`).length +\r\n              this[writeToMAP].get(`season${seasonNumber}AwayWins`).length\r\n          );\r\n          // this seasons Draw games\r\n          this[writeToMAP].set(\r\n            \"drawGames\",\r\n            TeamStats.allTeamStats[teamsMAP.get(i)][inputArray][0].filter(\r\n              (item) => Number(item.TeamOneScore) == Number(item.TeamTwoScore)\r\n            )\r\n          );\r\n          // this  seasons Draws\r\n          this[writeToMAP].set(\"Draws\", this[writeToMAP].get(\"drawGames\").length);\r\n          // this seasons home Losses\r\n          this[writeToMAP].set(\r\n            `season${seasonNumber}HomeLosses`,\r\n            this[writeToMAP]\r\n              .get(`season${seasonNumber}HomeGames`)\r\n              .filter(\r\n                (item) => Number(item.TeamOneScore) < Number(item.TeamTwoScore)\r\n              )\r\n          );\r\n          // this seasons away Losses\r\n          this[writeToMAP].set(\r\n            `season${seasonNumber}AwayLosses`,\r\n            this[writeToMAP]\r\n              .get(`season${seasonNumber}AwayGames`)\r\n              .filter(\r\n                (item) => Number(item.TeamOneScore) > Number(item.TeamTwoScore)\r\n              )\r\n          );\r\n          // this seasons OT Losses\r\n          if (!SEASONS_WITH_TIE_GAMES.includes(seasonNumber)) {\r\n            // season withOUT ties\r\n            this[writeToMAP].set(\r\n              \"OTL\",\r\n              this[writeToMAP]\r\n                .get(`season${seasonNumber}HomeLosses`)\r\n                .filter((item) => item.ExtraTime == \"Yes\").length +\r\n                this[writeToMAP]\r\n                  .get(`season${seasonNumber}AwayLosses`)\r\n                  .filter((item) => item.ExtraTime == \"Yes\").length\r\n            );\r\n          }\r\n          // this seasons Losses\r\n          if (!SEASONS_WITH_TIE_GAMES.includes(seasonNumber)) {\r\n            // season with NO ties\r\n            this[writeToMAP].set(\r\n              \"Losses\",\r\n              this[writeToMAP].get(\"GP\") -\r\n                (this[writeToMAP].get(\"Wins\") + this[writeToMAP].get(\"OTL\"))\r\n            );\r\n          } else {\r\n            // season WITH ties\r\n            this[writeToMAP].set(\r\n              \"Losses\",\r\n              this[writeToMAP].get(\"GP\") -\r\n                (this[writeToMAP].get(\"Wins\") + this[writeToMAP].get(\"Draws\"))\r\n            );\r\n          }\r\n  \r\n          // this seasons Points\r\n          if (!SEASONS_WITH_TIE_GAMES.includes(seasonNumber)) {\r\n            // season withOUT ties\r\n            this[writeToMAP].set(\r\n              \"Points\",\r\n              (this[writeToMAP].get(\"Wins\") - this[writeToMAP].get(\"OTW\")) * 3 +\r\n                this[writeToMAP].get(\"OTW\") * 2 +\r\n                this[writeToMAP].get(\"OTL\")\r\n            );\r\n          } else {\r\n            // season WITH ties\r\n            this[writeToMAP].set(\r\n              \"Points\",\r\n              this[writeToMAP].get(\"Wins\") * 3 + this[writeToMAP].get(\"Draws\")\r\n            );\r\n          }\r\n          // this seasons Home Goals For\r\n          if (\r\n            this[writeToMAP].get(`season${seasonNumber}HomeGames`).length != 0\r\n          ) {\r\n            //check if any home games were even played\r\n            this[writeToMAP].set(\r\n              `season${seasonNumber}HomeGoalsFor`,\r\n              this[writeToMAP]\r\n                .get(`season${seasonNumber}HomeGames`)\r\n                .map((item) => item.TeamOneScore)\r\n                .reduce((goalStart, goalAdd) => +goalStart + +goalAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(`season${seasonNumber}HomeGoalsFor`, 0);\r\n          }\r\n          // this seasons Away Goals For\r\n          if (\r\n            this[writeToMAP].get(`season${seasonNumber}AwayGames`).length != 0\r\n          ) {\r\n            //check if any away games were even played\r\n            this[writeToMAP].set(\r\n              `season${seasonNumber}AwayGoalsFor`,\r\n              this[writeToMAP]\r\n                .get(`season${seasonNumber}AwayGames`)\r\n                .map((item) => item.TeamTwoScore)\r\n                .reduce((goalStart, goalAdd) => +goalStart + +goalAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(`season${seasonNumber}AwayGoalsFor`, 0);\r\n          }\r\n          // this seasons Goals For\r\n          this[writeToMAP].set(\r\n            \"GF\",\r\n            +this[writeToMAP].get(`season${seasonNumber}HomeGoalsFor`) +\r\n              +this[writeToMAP].get(`season${seasonNumber}AwayGoalsFor`)\r\n          );\r\n          // this seasons Home Goals Against\r\n          if (\r\n            this[writeToMAP].get(`season${seasonNumber}HomeGames`).length != 0\r\n          ) {\r\n            // check if any home games were even played\r\n            this[writeToMAP].set(\r\n              `season${seasonNumber}HomeGoalsAgainst`,\r\n              this[writeToMAP]\r\n                .get(`season${seasonNumber}HomeGames`)\r\n                .map((item) => item.TeamTwoScore) // TeamTwo is opponent\r\n                .reduce((goalStart, goalAdd) => +goalStart + +goalAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(`season${seasonNumber}HomeGoalsAgainst`, 0);\r\n          }\r\n          // this seasons Away Goals Against\r\n          if (\r\n            this[writeToMAP].get(`season${seasonNumber}AwayGames`).length != 0\r\n          ) {\r\n            this[writeToMAP].set(\r\n              `season${seasonNumber}AwayGoalsAgainst`,\r\n              this[writeToMAP]\r\n                .get(`season${seasonNumber}AwayGames`)\r\n                .map((item) => item.TeamOneScore) // TeamOne is opponent\r\n                .reduce((goalStart, goalAdd) => +goalStart + +goalAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(`season${seasonNumber}AwayGoalsAgainst`, 0);\r\n          }\r\n          // this seasons Goals Against\r\n          this[writeToMAP].set(\r\n            \"GA\",\r\n            +this[writeToMAP].get(`season${seasonNumber}HomeGoalsAgainst`) +\r\n              +this[writeToMAP].get(`season${seasonNumber}AwayGoalsAgainst`)\r\n          );\r\n          // this seasons Goal Differential\r\n          this[writeToMAP].set(\r\n            \"GD\",\r\n            +this[writeToMAP].get(\"GF\") - +this[writeToMAP].get(\"GA\")\r\n          );\r\n          // this seasons Goals For Average\r\n          if (\r\n            //check for teams that did not make the playoffs to avoid \"NaN\" result\r\n            this[writeToMAP].get(\"GF\") != 0 &&\r\n            this[writeToMAP].get(\"GA\") != 0\r\n          ) {\r\n            this[writeToMAP].set(\r\n              \"GFA\",\r\n              (+this[writeToMAP].get(\"GF\") / +this[writeToMAP].get(\"GP\")).toFixed(\r\n                2\r\n              )\r\n            );\r\n            // this seasons Goals Against Average\r\n            this[writeToMAP].set(\r\n              \"GAA\",\r\n              (+this[writeToMAP].get(\"GA\") / +this[writeToMAP].get(\"GP\")).toFixed(\r\n                2\r\n              )\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(\"GFA\", 0) && this[writeToMAP].set(\"GAA\", 0);\r\n          }\r\n          // this seasons Home Possession For\r\n          if (this[writeToMAP].get(`season${seasonNumber}HomeGames`) != 0) {\r\n            this[writeToMAP].set(\r\n              `season${seasonNumber}homePossessionFor`,\r\n              this[writeToMAP]\r\n                .get(`season${seasonNumber}HomeGames`)\r\n                .map((item) => item.TeamOnePossession)\r\n                .reduce((timeStart, timeAdd) => +timeStart + +timeAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(`season${seasonNumber}homePossessionFor`, 0);\r\n          }\r\n          // this seasons Away Possession For\r\n          if (this[writeToMAP].get(`season${seasonNumber}AwayGames`) != 0) {\r\n            this[writeToMAP].set(\r\n              `season${seasonNumber}awayPossessionFor`,\r\n              this[writeToMAP]\r\n                .get(`season${seasonNumber}AwayGames`)\r\n                .map((item) => item.TeamTwoPossession)\r\n                .reduce((timeStart, timeAdd) => +timeStart + +timeAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(`season${seasonNumber}awayPossessionFor`, 0);\r\n          }\r\n          // this seasons Home Possession Against\r\n          if (this[writeToMAP].get(`season${seasonNumber}HomeGames`) != 0) {\r\n            this[writeToMAP].set(\r\n              `season${seasonNumber}homePossessionAgainst`,\r\n              this[writeToMAP]\r\n                .get(`season${seasonNumber}HomeGames`)\r\n                .map((item) => item.TeamTwoPossession) // TeamTwo is opponent\r\n                .reduce((timeStart, timeAdd) => +timeStart + +timeAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(`season${seasonNumber}homePossessionAgainst`, 0);\r\n          }\r\n          // this seasons Away Possession Against\r\n          if (this[writeToMAP].get(`season${seasonNumber}AwayGames`) != 0) {\r\n            this[writeToMAP].set(\r\n              `season${seasonNumber}awayPossessionAgainst`,\r\n              this[writeToMAP]\r\n                .get(`season${seasonNumber}AwayGames`)\r\n                .map((item) => item.TeamOnePossession) // TeamOne is opponent\r\n                .reduce((timeStart, timeAdd) => +timeStart + +timeAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(`season${seasonNumber}awayPossessionAgainst`, 0);\r\n          }\r\n          // this seasons Possession For\r\n          this[writeToMAP].set(\r\n            \"PF\",\r\n            +this[writeToMAP].get(`season${seasonNumber}homePossessionFor`) +\r\n              +this[writeToMAP].get(`season${seasonNumber}awayPossessionFor`)\r\n          );\r\n          // this seasons Possession Against\r\n          this[writeToMAP].set(\r\n            \"PA\",\r\n            +this[writeToMAP].get(`season${seasonNumber}homePossessionAgainst`) +\r\n              +this[writeToMAP].get(`season${seasonNumber}awayPossessionAgainst`)\r\n          );\r\n          // this seasons possession For Average\r\n          if (\r\n            //check for teams that did not make the playoffs to avoid \"NaN\" result\r\n            this[writeToMAP].get(\"PF\") != 0 &&\r\n            this[writeToMAP].get(\"PA\") != 0\r\n          ) {\r\n            this[writeToMAP].set(\r\n              \"PFA\",\r\n              (+this[writeToMAP].get(\"PF\") / +this[writeToMAP].get(\"GP\")).toFixed(\r\n                2\r\n              )\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(\"PFA\", 0);\r\n          }\r\n          // this seasons possession Against Average\r\n          if (\r\n            //check for teams that did not make the playoffs to avoid \"NaN\" result\r\n            this[writeToMAP].get(\"PF\") != 0 &&\r\n            this[writeToMAP].get(\"PA\") != 0\r\n          ) {\r\n            this[writeToMAP].set(\r\n              \"PAA\",\r\n              (+this[writeToMAP].get(\"PA\") / +this[writeToMAP].get(\"GP\")).toFixed(\r\n                2\r\n              )\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(\"PAA\", 0);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  export default TeamStats;","import TeamStats from \"../classFiles/teamStats\";\r\nimport teamsMAP from \"../var_lib/maps/teams/teamsMAP\";\r\nimport gameTypeMAP from \"../var_lib/maps/gameType/gameTypeMAP\";\r\nimport seasonCount from \"../var_lib/season/seasonCount\";\r\nimport { allTimeStatsArray, allTimeStatsMAPS, statsType } from \"../../constants/consts/supportVars\";\r\n\r\nconst seasonCountLength = seasonCount.length;\r\n\r\n// TeamStats is the class for team object creation\r\n// allTeamStats (object) is the container holding each teams' object\r\n// TeamStats.allTeamStats(<teamName>) is how to get within any teams' own object\r\n// --------------------\r\n//    \"groupTeamsAllTimeStats\", \"groupTeamsAllTimeSeasonStats\",\r\n// \"groupTeamsAllTimePlayoffStats\", are static arrays for the class which hold each teams'\r\n// MAPS that have each teams' all time stats reduced and ready for table display\r\n// --------------------\r\n// \"groupTeamsSeason<seasonNumber>\" followed either <CombinedStats>,<SeasonStats> or <PlayoffStats>\r\n// are static arrays for the class which hold each teams' MAPS\r\n// that have each teams' stats reduced per each season which is ready for table display\r\n// --------------------\r\n// sortGroupedTeamStats(<arrayName>, <fieldName>) is function to sort the static class arrays containing\r\n// each teams' MAPS by category.\r\n// SORT EXAMPLE\r\n// sortGroupedTeamStats(\r\n//   TeamStats[groupedAllTimeTeamStats[i]], // [groupedAllTimeTeamStats[i]] is a destructed array variable\r\n//   \"Losses\" // change sort category here\r\n// );\r\n\r\n// create proper arrays for holding team MAPS for when more than one season is played\r\nTeamStats.setPerSeasonAllTimeContainers();\r\n// INSTANTIATE team objects\r\n// create objects for each team\r\nfor (let i = 1; i <= teamsMAP.size; i++) {\r\n  TeamStats.allTeamStats[teamsMAP.get(i)] = new TeamStats(teamsMAP.get(i));\r\n  \r\n  // set arrays with each teams game data\r\n  TeamStats.allTeamStats[teamsMAP.get(i)].setTeamsAllTimeStats(\r\n    \"allTimeStats\",\r\n    \"allTimeSeasonStats\",\r\n    \"allTimePlayoffStats\"\r\n  );\r\n\r\n  // set grouped all time class MAPS data for each team\r\n  for (let j = 0; j < allTimeStatsArray.length; j++) {\r\n    TeamStats.allTeamStats[teamsMAP.get(i)].setTeamsAllTimeStatsMAPS(\r\n      allTimeStatsArray[j],\r\n      allTimeStatsMAPS[j]\r\n    );\r\n  }\r\n}\r\n\r\n// END of team object creation\r\n\r\nTeamStats.setGroupedAllTimeArrays(); // populates the class arrays with team MAPS grouping for display of data in tabular form\r\n\r\n// loop that fills each team's seasons combined stats array per each season number\r\n\r\n//array for combined season and playoffs\r\nfor (let i = 1; i <= teamsMAP.size; i++) {\r\n  //     for (let j = 0; j < seasonCountLength; j++) { THIS WAS OLD FOR\r\n  for (\r\n    let j = 0;\r\n    j < TeamStats.allTeamStats[teamsMAP.get(i)].seasonsPlayedLength;\r\n    j++\r\n  ) {\r\n    TeamStats.allTeamStats[teamsMAP.get(i)][\r\n      \"teamsSeason\" +\r\n        TeamStats.allTeamStats[teamsMAP.get(i)].seasonsPlayed[j] +\r\n        \"CombinedStats\"\r\n    ].push(\r\n      TeamStats.allTeamStats[teamsMAP.get(i)].allTimeStats.filter(\r\n        (item) =>\r\n          item.SeasonNumber ==\r\n          TeamStats.allTeamStats[teamsMAP.get(i)].seasonsPlayed[j]\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\n// loop that fills each team's seasons regular season and playoff stats array\r\n\r\n// arrays for regular season and playoffs per each season\r\nfor (let i = 1; i <= teamsMAP.size; i++) {\r\n  for (\r\n    let j = 0;\r\n    j < TeamStats.allTeamStats[teamsMAP.get(i)].seasonsPlayedLength;\r\n    j++\r\n  ) {\r\n    // teamsSeason # SeasonStats poulation\r\n    TeamStats.allTeamStats[teamsMAP.get(i)][\r\n      \"teamsSeason\" +\r\n        TeamStats.allTeamStats[teamsMAP.get(i)].seasonsPlayed[j] +\r\n        \"SeasonStats\"\r\n    ].push(\r\n      TeamStats.allTeamStats[teamsMAP.get(i)].allTimeStats.filter(\r\n        // filter the teams all time array\r\n        (item) =>\r\n          item.SeasonNumber ==\r\n            TeamStats.allTeamStats[teamsMAP.get(i)].seasonsPlayed[j] &&\r\n          gameTypeMAP.get(Number(item.GameTypeID)) == \"Season\"\r\n      )\r\n    );\r\n    // teamsSeason # PlayoffStats poulation\r\n    TeamStats.allTeamStats[teamsMAP.get(i)][\r\n      \"teamsSeason\" +\r\n        TeamStats.allTeamStats[teamsMAP.get(i)].seasonsPlayed[j] +\r\n        \"PlayoffStats\"\r\n    ].push(\r\n      TeamStats.allTeamStats[teamsMAP.get(i)].allTimeStats.filter(\r\n        // filter the teams all time array\r\n        (item) =>\r\n          item.SeasonNumber ==\r\n            TeamStats.allTeamStats[teamsMAP.get(i)].seasonsPlayed[j] &&\r\n          gameTypeMAP.get(Number(item.GameTypeID)) == \"Playoff\"\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\n// loop that fills each teams individual seasons MAPS\r\n\r\nfor (let i = 1; i <= teamsMAP.size; i++) {\r\n  TeamStats.allTeamStats[teamsMAP.get(i)].seasonsPlayed.forEach((item) => {\r\n    for (let k = 0; k < statsType.length; k++) {\r\n      TeamStats.allTeamStats[\r\n        teamsMAP.get(i)\r\n      ].setTeamsIndividualSeasonsStatsMAPS(\r\n        `teamsSeason${item}${statsType[k]}`, // input array\r\n        `teamsSeason${item}${statsType[k]}MAP`, // output MAP\r\n        Number(item) // season number\r\n      );\r\n    }\r\n  });\r\n}\r\n\r\n// loop that fills static arrays containing per season team stats for tabular data as per season\r\nfor (let i = 1; i <= teamsMAP.size; i++) {\r\n  for (let j = 1; j <= seasonCountLength; j++) {\r\n    if (\r\n      TeamStats.allTeamStats[teamsMAP.get(i)].seasonsPlayed.includes(j)\r\n    ) {\r\n      for (let k = 0; k < statsType.length; k++) {\r\n        TeamStats[\"groupTeamsSeason\" + j + statsType[k]].push(\r\n          TeamStats.allTeamStats[teamsMAP.get(i)][\r\n            \"teamsSeason\" + j + statsType[k] + \"MAP\"\r\n          ]\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default TeamStats ;","// maps key as playerID to textual value of players name\r\nimport { PLAYERS_LENGTH } from \"../../../../constants/consts/vars\"\r\nimport { Players } from \"../../../../constants/masterHaxData\";\r\n\r\nconst playersMAP = new Map();\r\n\r\nfor (let i = 0; i < PLAYERS_LENGTH; i++) {\r\n    // map a list of players number key to textual value\r\n    playersMAP.set(Number(Players[i].PlayerID), Players[i].Players);\r\n  }\r\n\r\nexport default playersMAP;","// map a list what seasons each player played in\r\nimport { PLAYERS_LENGTH } from \"../../../../constants/consts/vars\";\r\nimport { TeamPlayers } from \"../../../../constants/masterHaxData\";\r\nimport playersMAP from \"./playersMAP\"\r\n\r\nconst playerSeasonsMAP = new Map();\r\n\r\nfor (let i = 0; i < PLAYERS_LENGTH; i++) {\r\n    // map a list what seasons each player played in\r\n    playerSeasonsMAP.set(\r\n      playersMAP.get(i + 1),\r\n      Array.from(\r\n        TeamPlayers\r\n          .filter((item) => item.PlayerID == i + 1)\r\n          .map((item) => item.SeasonNumber)\r\n      ).sort()\r\n    );\r\n  }\r\n\r\nexport default playerSeasonsMAP;","import { GameResults, GamePlayerStats } from \"../../constants/masterHaxData\";\r\nimport playersMAP from \"../var_lib/maps/players/playersMAP\";\r\nimport playerSeasonsMAP from \"../var_lib/maps/players/playerSeasonsMAP\"\r\nimport gameTypeMAP from \"../var_lib/maps/gameType/gameTypeMAP\"\r\nimport seasonCount from \"../var_lib/season/seasonCount\"\r\n\r\nconst GameResultsLength = GameResults.length;\r\n\r\nexport default class IndividualPlayerStats {\r\n    constructor(name) {\r\n      // players name\r\n      this.name = name;\r\n      this.seasonsPlayed = playerSeasonsMAP.get(this.name);\r\n      // all time player stats per object (player)\r\n      this.allTimeStats = []; // collects from GamePlayerStats JSON\r\n      this.allTimeSeasonStats = []; // GameResults JSON filtered to seasonType is \"Season\"\r\n      this.allTimePlayoffStats = []; // GameResults JSON filtered to seasonType is \"Playoff\"\r\n      this.allTimeStatsMAP = new Map();\r\n      this.allTimeSeasonStatsMAP = new Map();\r\n      this.allTimePlayoffStatsMAP = new Map();\r\n      this.seasonsPlayed.forEach((item) => {\r\n        this[\"playersSeason\" + item + \"CombinedStats\"] = [];\r\n        this[\"playersSeason\" + item + \"SeasonStats\"] = [];\r\n        this[\"playersSeason\" + item + \"PlayoffStats\"] = [];\r\n        this[\"playersSeason\" + item + \"CombinedStatsMAP\"] = new Map();\r\n        this[\"playersSeason\" + item + \"SeasonStatsMAP\"] = new Map();\r\n        this[\"playersSeason\" + item + \"PlayoffStatsMAP\"] = new Map();\r\n      });\r\n    }\r\n  \r\n    // static properties and methods\r\n  \r\n    static allPlayersStats = {}; // individual players instances of this class placed here\r\n    static playerStatsProfile = []; // same as above but in array form\r\n  \r\n    // these arrays contain MAPS for each players all time totals ready for tabular display\r\n    static groupPlayersAllTimeStats = [];\r\n    static groupPlayersAllTimeSeasonStats = [];\r\n    static groupPlayersAllTimePlayoffStats = [];\r\n  \r\n    static setPerSeasonAllTimeContainers(seasonCountLength) {\r\n      if (seasonCountLength > 1) {\r\n        seasonCount.forEach((item) => {\r\n          this[\"groupPlayersSeason\" + item + \"CombinedStats\"] = [];\r\n          this[\"groupPlayersSeason\" + item + \"SeasonStats\"] = [];\r\n          this[\"groupPlayersSeason\" + item + \"PlayoffStats\"] = [];\r\n        });\r\n      }\r\n    }\r\n  \r\n    // set player all time stats arrays\r\n  \r\n    setPlayersAllTimeStats(\r\n      allTimeArray,\r\n      allTimeSeasonArray,\r\n      allTimePlayoffArray\r\n    ) {\r\n      // fills allTimeStats[]/seasonStats[]/playoff[]\r\n      GamePlayerStats.forEach((item) => {\r\n        if (playersMAP.get(Number(item.PlayerID)) == this.name) {\r\n          this[allTimeArray].push(item);\r\n        }\r\n      });\r\n  \r\n      this[allTimeArray].forEach((item) => {\r\n        for (let i = 0; i < GameResultsLength; i++) {\r\n          // GameResultsLength\r\n          if (\r\n            item.GameID == GameResults[i].GameID &&\r\n            gameTypeMAP.get(Number(GameResults[i].GameTypeID)) == \"Season\"\r\n          )\r\n            this[allTimeSeasonArray].push(item);\r\n          if (\r\n            item.GameID == GameResults[i].GameID &&\r\n            gameTypeMAP.get(Number(GameResults[i].GameTypeID)) == \"Playoff\"\r\n          )\r\n            this[allTimePlayoffArray].push(item);\r\n        }\r\n      });\r\n    }\r\n  }","import IndividualPlayerStats from \"../classFiles/individualPlayerStats\";\r\nimport { GameResults } from \"../../constants/masterHaxData\";\r\nimport seasonCount from \"../var_lib/season/seasonCount\";\r\nimport playersMAP from \"../var_lib/maps/players/playersMAP\";\r\nimport gameTypeMAP from \"../var_lib/maps/gameType/gameTypeMAP\"\r\nimport { playerStatsFields, allTimeStatsArray, allTimeStatsMAPS, groupedAllTimePlayerStats, perSeasonCats, perSeasonCatMAPS } from \"../../constants/consts/supportVars\";\r\n\r\n// IndividualPlayerStats is the class each players' object creation\r\n// allPLayersStats (object) is the container holding each players' object\r\n// IndividualPlayerStats.allPlayersStats(<playerName>) is how to get within any players' own object\r\n// --------------------\r\n//    \"groupPlayersAllTimeStats\", \"groupPlayersAllTimeSeasonStats\",\r\n// \"groupPlayersAllTimePlayoffStats\", are static arrays for the class which hold each players'\r\n// MAPS that have each players' all time stats reduced and ready for table display\r\n// --------------------\r\n//    \"groupPlayersSeason<number> followed with either <CombinedStats>,<SeasonStats> or <PlayoffStats>,\r\n// are static arrays for the class which hold each players'\r\n// MAPS that have each players' all time stats reduced and ready for table display\r\n// --------------------\r\n// Each players' own object contains various arrays and MAPS that are both \"allTime\" and \"per season\"\r\n// which the array holds each record that the player is directly in and MAPS which reduce the arrays\r\n// into single totals ready to be displayed in table form\r\n// --------------------\r\n// sortGroupedPlayerStats(<arrayName>, <fieldName>) is function to sort the static class arrays containing\r\n// each players' MAPS by category.\r\n// SORT EXAMPLE\r\n// sortGroupedPlayerStats(\r\n//   IndividualPlayerStats[groupedAllTimePlayerStats[i]],\r\n//   \"Points\" // change sort category here\r\n// );\r\n\r\nconst gameResultsLength = GameResults.length;\r\nconst seasonCountLength = seasonCount.length;\r\n\r\n// instantiating the class and all related objects\r\n\r\nIndividualPlayerStats.setPerSeasonAllTimeContainers(seasonCountLength);\r\n\r\nfor (let i = 1; i <= playersMAP.size; i++) {\r\n  IndividualPlayerStats.allPlayersStats[playersMAP.get(i)] =\r\n    new IndividualPlayerStats(playersMAP.get(i));\r\n\r\n  IndividualPlayerStats.allPlayersStats[\r\n    playersMAP.get(i)\r\n  ].setPlayersAllTimeStats(\r\n    \"allTimeStats\",\r\n    \"allTimeSeasonStats\",\r\n    \"allTimePlayoffStats\"\r\n  );\r\n}\r\n\r\n// all time MAPS for each player\r\n\r\nfor (let i = 1; i <= playersMAP.size; i++) {\r\n  for (let j = 0; j < allTimeStatsArray.length; j++) {\r\n    for (let k = 0; k < playerStatsFields.length; k++) {\r\n      IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n        allTimeStatsMAPS[j]\r\n      ].set(\r\n        playerStatsFields[k],\r\n        IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n          allTimeStatsArray[j]\r\n        ]\r\n          .map((item) => Number(item[playerStatsFields[k]]))\r\n          .reduce((current, adjusted) => current + adjusted, 0)\r\n      );\r\n    }\r\n    IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n      allTimeStatsMAPS[j]\r\n    ].set(\r\n      \"GP\",\r\n      IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n        allTimeStatsArray[j]\r\n      ].length\r\n    );\r\n    IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n      allTimeStatsMAPS[j]\r\n    ].set(\r\n      \"Points\",\r\n      IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n        allTimeStatsMAPS[j]\r\n      ].get(\"Assists\") +\r\n        IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n          allTimeStatsMAPS[j]\r\n        ].get(\"Goals\")\r\n    );\r\n  }\r\n}\r\n// loop that fills each players seasons stats per each season\r\n// array for specific season, that seasons playoff and also combined season and playoffs\r\n\r\n// if (seasonCount.length > 1) {\r\n//array for combined season and playoffs\r\n\r\nfor (let i = 1; i <= playersMAP.size; i++) {\r\n  let playersSeasonAppearances =\r\n    IndividualPlayerStats.allPlayersStats[playersMAP.get(i)].seasonsPlayed;\r\n  for (let j = 0; j < playersSeasonAppearances.length; j++) {\r\n    IndividualPlayerStats.allPlayersStats[\r\n      playersMAP.get(i)\r\n    ].allTimeStats.forEach((item) => {\r\n      for (let k = 0; k < gameResultsLength; k++) {\r\n        if (\r\n          item.GameID == GameResults[k].GameID &&\r\n          GameResults[k].SeasonNumber == playersSeasonAppearances[j]\r\n        )\r\n          IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n            \"playersSeason\" + playersSeasonAppearances[j] + \"CombinedStats\"\r\n          ].push(item);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n// array for specific for season and seperately playoff\r\n\r\nfor (let i = 1; i <= playersMAP.size; i++) {\r\n  let playersSeasonAppearances =\r\n    IndividualPlayerStats.allPlayersStats[playersMAP.get(i)].seasonsPlayed;\r\n  for (let j = 0; j < playersSeasonAppearances.length; j++) {\r\n    IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n      \"playersSeason\" + playersSeasonAppearances[j] + \"CombinedStats\"\r\n    ].forEach((item) => {\r\n      for (let k = 0; k < gameResultsLength; k++) {\r\n        if (\r\n          item.GameID == GameResults[k].GameID &&\r\n          GameResults[k].SeasonNumber == playersSeasonAppearances[j] &&\r\n          gameTypeMAP.get(Number(GameResults[k].GameTypeID)) == \"Playoff\"\r\n        )\r\n          IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n            \"playersSeason\" + playersSeasonAppearances[j] + \"PlayoffStats\"\r\n          ].push(item);\r\n        if (\r\n          item.GameID == GameResults[k].GameID &&\r\n          GameResults[k].SeasonNumber == playersSeasonAppearances[j] &&\r\n          gameTypeMAP.get(Number(GameResults[k].GameTypeID)) == \"Season\"\r\n        )\r\n          IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n            \"playersSeason\" + playersSeasonAppearances[j] + \"SeasonStats\"\r\n          ].push(item);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n//////////////////////Individual player season MAPS\r\nfor (let i = 1; i <= playersMAP.size; i++) {\r\n  let seasonsPlayedIn =\r\n    IndividualPlayerStats.allPlayersStats[playersMAP.get(i)].seasonsPlayed;\r\n  for (let j = 0; j < seasonsPlayedIn.length; j++) {\r\n    for (let l = 0; l < perSeasonCatMAPS.length; l++) {\r\n      for (let k = 0; k < playerStatsFields.length; k++) {\r\n        IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n          \"playersSeason\" + seasonsPlayedIn[j] + perSeasonCatMAPS[l]\r\n        ].set(\r\n          playerStatsFields[k],\r\n          IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n            \"playersSeason\" + seasonsPlayedIn[j] + perSeasonCats[l]\r\n          ]\r\n            .map((item) => Number(item[playerStatsFields[k]]))\r\n            .reduce((current, adjusted) => current + adjusted, 0)\r\n        );\r\n      }\r\n      IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n        \"playersSeason\" + seasonsPlayedIn[j] + perSeasonCatMAPS[l]\r\n      ].set(\r\n        \"GP\",\r\n        IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n          \"playersSeason\" + seasonsPlayedIn[j] + [perSeasonCats[l]]\r\n        ].length\r\n      );\r\n      IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n        \"playersSeason\" + seasonsPlayedIn[j] + perSeasonCatMAPS[l]\r\n      ].set(\r\n        \"Points\",\r\n        IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n          \"playersSeason\" + seasonsPlayedIn[j] + perSeasonCatMAPS[l]\r\n        ].get(\"Assists\") +\r\n          IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n            \"playersSeason\" + seasonsPlayedIn[j] + perSeasonCatMAPS[l]\r\n          ].get(\"Goals\")\r\n      );\r\n    }\r\n  }\r\n}\r\n// } // end of if season is greater than 1\r\n////////////BEGIN of populating arrays for tabular style data. All time and per season with varying modes. (alltime, season and playoffs)\r\n// copying allPlayerStats objects contents into array form in order to use array functionality\r\nfor (let i = 1; i <= playersMAP.size; i++) {\r\n  IndividualPlayerStats.playerStatsProfile.push(\r\n    IndividualPlayerStats.allPlayersStats[playersMAP.get(i)]\r\n  );\r\n}\r\n\r\n// seperating playerStatsProfile array (each player) into allTime, Season and Playoff arrays\r\nIndividualPlayerStats.playerStatsProfile.forEach((item) => {\r\n  for (let i = 0; i < groupedAllTimePlayerStats.length; i++) {\r\n    item[allTimeStatsMAPS[i]].set(\"Name\", item.name); // MAP needs name to associate who owns the stats\r\n    IndividualPlayerStats[groupedAllTimePlayerStats[i]].push(\r\n      item[allTimeStatsMAPS[i]]\r\n    );\r\n  }\r\n});\r\n\r\n// seperating playerStatsProfile array (each player) into per each Season stats ready for tabular data\r\nif (seasonCount.length > 1) {\r\n  for (let i = 1; i <= playersMAP.size; i++) {\r\n    let seasonsPlayedIn =\r\n      IndividualPlayerStats.allPlayersStats[playersMAP.get(i)].seasonsPlayed;\r\n    for (let j = 0; j < seasonsPlayedIn.length; j++) {\r\n      for (let k = 0; k < perSeasonCats.length; k++) {\r\n        IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n          \"playersSeason\" + seasonsPlayedIn[j] + [perSeasonCatMAPS[k]]\r\n        ].set(\"Name\", playersMAP.get(i));\r\n        IndividualPlayerStats[\r\n          \"groupPlayersSeason\" + seasonsPlayedIn[j] + [perSeasonCats[k]]\r\n        ].push(\r\n          IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n            \"playersSeason\" + seasonsPlayedIn[j] + [perSeasonCatMAPS[k]]\r\n          ]\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// TESTING\r\n\r\n// EXPORTS\r\n\r\nexport default IndividualPlayerStats;","// import TeamStats from \"../../scripts/classFiles/teamStats\";\r\nimport TeamStats from \"../../setTables/createTeam\";\r\nimport IndividualPlayerStats from \"../../setTables/createPlayer\";\r\nimport seasonCount from \"../../var_lib/season/seasonCount\";\r\n\r\nconst seasonCountLength = seasonCount.length;\r\nconst tableDataSource = new Map();\r\ntableDataSource\r\n  // TEAMS GROUPINGS\r\n  // ALL TIME\r\n  .set(\r\n    \"TeamStats.groupTeamsAllTimeSeasonStats\",\r\n    TeamStats.groupTeamsAllTimeSeasonStats\r\n  )\r\n  .set(\r\n    \"TeamStats.groupTeamsAllTimePlayoffStats\",\r\n    TeamStats.groupTeamsAllTimePlayoffStats\r\n  )\r\n  .set(\"TeamStats.groupTeamsAllTimeStats\", TeamStats.groupTeamsAllTimeStats);\r\n  // EACH SEASONS TEAMS\r\n  let statCategory = [\"Season\", \"Playoff\", \"Combined\"];\r\n  for (let i = 0; i < statCategory.length; i++) {\r\n    for (let j = 1; j <= seasonCountLength; j++) {\r\n      const key = `groupTeamsSeason${j}${statCategory[i]}Stats`;\r\n      tableDataSource.set(\r\n        \"TeamStats.groupTeamsSeason\" + j + statCategory[i] + \"Stats\",\r\n        TeamStats[key]\r\n        // eval(\"TeamStats.groupTeamsSeason\" + j + statCategory[i] + \"Stats\")\r\n      );\r\n    }\r\n  }\r\n// PLAYERS GROUPINGS\r\n// ALL TIME PLAYERS\r\ntableDataSource\r\n  .set(\r\n    \"IndividualPlayerStats.groupPlayersAllTimeSeasonStats\",\r\n    IndividualPlayerStats.groupPlayersAllTimeSeasonStats\r\n  )\r\n  .set(\r\n    \"IndividualPlayerStats.groupPlayersAllTimePlayoffStats\",\r\n    IndividualPlayerStats.groupPlayersAllTimePlayoffStats\r\n  )\r\n  .set(\r\n    \"IndividualPlayerStats.groupPlayersAllTimeStats\",\r\n    IndividualPlayerStats.groupPlayersAllTimeStats\r\n  );\r\n// EACH SEASONS PLAYERS\r\n\r\nfor (let i = 0; i < statCategory.length; i++) {\r\n  for (let j = 1; j <= seasonCountLength; j++) {\r\n    const key = `groupPlayersSeason${j}${statCategory[i]}Stats`;\r\n    tableDataSource.set(\r\n      \"IndividualPlayerStats.groupPlayersSeason\" +\r\n        j +\r\n        statCategory[i] +\r\n        \"Stats\",\r\n        IndividualPlayerStats[key]\r\n      // eval(\r\n      //   \"IndividualPlayerStats.groupPlayersSeason\" +\r\n      //     j +\r\n      //     statCategory[i] +\r\n      //     \"Stats\"\r\n      // )\r\n    );\r\n  }\r\n}\r\n// end seasons sets\r\nexport default tableDataSource;","import { fullTable, homePageFields, playersTable, fullTableNoTies, homePageFieldsNoTies } from \"../../../constants/consts/supportVars\";\r\n\r\n// PLACE ARRAYS IN A MAP IN ORDER FOR \"sortTable\" METHOD TO PROPERLY RETRIEVE DATA ATTRIBUTES\r\nconst tableFields = new Map();\r\ntableFields\r\n  .set(\"fullTable\", fullTable)\r\n  .set(\"homePageFields\", homePageFields)\r\n  .set(\"playersTable\", playersTable)\r\n  .set(\"fullTableNoTies\", fullTableNoTies)\r\n  .set(\"homePageFieldsNoTies\", homePageFieldsNoTies);\r\n\r\n  export default tableFields;","// used to sort tabular data from both teams and players objects\r\n\r\nexport default function sortGroupedStats(inputArray, category) {\r\n    inputArray.sort((a, b) => b.get(category) - a.get(category));\r\n  }","function closeSidebar() {\r\n    document.getElementById(\"sidebar\").style.display = \"none\";\r\n  }\r\n\r\nexport default closeSidebar;","export default function clearScoreboardDiv() {\r\n    let scoreboardDiv = document.getElementById(\"scoreboardDiv\");\r\n    scoreboardDiv.style.display = \"\";\r\n    scoreboardDiv.style.flexDirection = \"\";\r\n    scoreboardDiv.style.alignItems = \"\";\r\n    scoreboardDiv.innerHTML = \"\";\r\n  }","export default function getTablesDiv() {\r\n    let tablesDiv = document.getElementById(\"tablesDiv\");\r\n    return tablesDiv;\r\n  }","// maps key as textual name key to playerID value\r\nimport { PLAYERS_LENGTH } from \"../../../../constants/consts/vars\";\r\nimport { Players } from \"../../../../constants/masterHaxData\";\r\n\r\nconst playersNumMAP = new Map();\r\n\r\nfor (let i = 0; i < PLAYERS_LENGTH; i++) {\r\n    // map a list of players textual key to number value nameID\r\n    playersNumMAP.set(Players[i].Players, Number(Players[i].PlayerID));\r\n  }\r\n\r\nexport default playersNumMAP;","// maps out each teams basic info. ID, Color, logo file path, etc...\r\nimport { TEAMS_LENGTH, TEAM_NAMES_ARRAY } from \"../../../../constants/consts/vars\";\r\nimport { Teams } from \"../../../../constants/masterHaxData\";\r\n\r\nconst eachTeamObjectMAP = new Map();\r\n\r\nfor (let i = 0; i < TEAMS_LENGTH; i++) {\r\n    TEAM_NAMES_ARRAY[i] = Teams[i].TeamName;\r\n    eachTeamObjectMAP.set(TEAM_NAMES_ARRAY[i], Teams[i]);\r\n  }\r\n\r\n  export default eachTeamObjectMAP;","import { TeamPlayers } from \"../../constants/masterHaxData\";\r\nimport teamsMAP from \"../var_lib/maps/teams/teamsMAP\";\r\nimport currentSeason from \"../var_lib/season/currentSeason\";\r\nimport playersNumMAP from \"../var_lib/maps/players/playersNumMAP\";\r\nimport eachTeamObjectMAP from \"../var_lib/maps/teams/eachTeamObjectMAP\";\r\n\r\n  \r\n  export default function setPlayersTableBgColor(seasonNumber = currentSeason) {\r\n    let playerRow = document.querySelectorAll(\"td[data-field-name='Name']\");\r\n    if (seasonNumber > 0) {\r\n      let thisSeasonNumbersRecords = TeamPlayers.filter(\r\n        (item) => item.SeasonNumber == seasonNumber\r\n      );\r\n      playerRow.forEach((item) => {\r\n        let playersName = item.textContent;\r\n        let playersID = playersNumMAP.get(playersName);\r\n        let playersTeamRecord = thisSeasonNumbersRecords.filter(\r\n          (item) => item.PlayerID == playersID\r\n        );\r\n        let playersTeam = +playersTeamRecord[0].TeamID;\r\n        let playersTeamName = teamsMAP.get(playersTeam);\r\n        item.style.backgroundColor = `#${\r\n          eachTeamObjectMAP.get(playersTeamName).MainColor\r\n        }`;\r\n        item.style.color = \"white\";\r\n      });\r\n    } else {\r\n      playerRow.forEach((item) => {\r\n        let playersName = item.textContent;\r\n        let playersID = playersNumMAP.get(playersName);\r\n        let playersTeams = TeamPlayers.filter(\r\n          (item) => item.PlayerID == playersID\r\n        );\r\n        playersTeams.sort((a, b) => a.SeasonNumber - b.SeasonNumber);\r\n        let getPlayersMostRecentSeasonsRecord =\r\n          playersTeams[playersTeams.length - 1];\r\n        if (+getPlayersMostRecentSeasonsRecord.SeasonNumber == currentSeason) {\r\n          let playersMostRecentTeam = getPlayersMostRecentSeasonsRecord.TeamID;\r\n          let playersTeamName = teamsMAP.get(+playersMostRecentTeam);\r\n          item.style.backgroundColor = `#${\r\n            eachTeamObjectMAP.get(playersTeamName).MainColor\r\n          }`;\r\n          item.style.color = \"white\";\r\n        }\r\n      });\r\n    }\r\n  }","import eachTeamObjectMAP from \"../var_lib/maps/teams/eachTeamObjectMAP\";\r\n\r\nexport default function setTeamsTableBgColor() {\r\n  let teamRow = document.querySelectorAll(\"td[data-field-name='Team']\");\r\n  teamRow.forEach((item) => {\r\n    item.style.backgroundColor = `#${\r\n      eachTeamObjectMAP.get(item.textContent).MainColor\r\n    }`;\r\n    item.style.color = \"white\";\r\n  });\r\n}","import sortGroupedStats from \"../misc/sort\";\r\nimport closeSidebar from \"../sidebar/closeSidebar\";\r\nimport clearScoreboardDiv from \"../scoreboard/clearScoreboardDiv\";\r\nimport getTablesDiv from \"./getTablesDiv\";\r\nimport setPlayersTableBgColor from \"../misc/playerTableBgColor\";\r\nimport setTeamsTableBgColor from \"../misc/setTeamsTableBgColor\";\r\n\r\nexport default function createTable(\r\n    seasonNumber,\r\n    tableName,\r\n    dataSourceName,\r\n    dataSource,\r\n    color,\r\n    sortBy = \"Points\",\r\n    fieldsArrayName,\r\n    ...fieldsArray\r\n  ) {\r\n    sortGroupedStats(dataSource, sortBy);\r\n    let tableHeaders = fieldsArray[0];\r\n    let fieldsLength = fieldsArray[0].length; // named array of fields previously made\r\n    let isOTW = tableHeaders.includes(\"OTW\"); // checks for if any given season has tie games or extra time\r\n    let screenedDataSource;\r\n    let tableStats;\r\n    // check if dataSource is a teams table\r\n    let isTeamTable = dataSourceName.includes(\"TeamStats\");\r\n    // check if dataSource is a player table\r\n    let isPlayerTable = dataSourceName.includes(\"Individual\");\r\n    // check if dataSource is team Playoff table\r\n    let isPlayoffTable = dataSourceName.includes(\"Playoff\");\r\n    if ((isTeamTable || isPlayerTable) && isPlayoffTable) {\r\n      screenedDataSource = dataSource.filter((item) => item.get(\"GP\") > 0);\r\n    } else {\r\n      screenedDataSource = dataSource;\r\n    }\r\n    // html table begin\r\n    tableStats = \"<table>\";\r\n    // html table caption\r\n    tableStats += `<caption><h1>${tableName}</h1></caption>`;\r\n    // html table thead\r\n    tableStats += \"<thead><tr>\";\r\n    for (let i = 0; i < fieldsLength; i++) {\r\n      tableStats +=\r\n        `<th data-season-Number=${seasonNumber} data-data-source=${dataSourceName} data-array-source=${fieldsArrayName} data-field-name=` + //data-fieldNames required for mobile layout\r\n        tableHeaders[i] +\r\n        \" >\" +\r\n        tableHeaders[i] +\r\n        \"</th>\";\r\n    }\r\n    tableStats += \"</tr></thead>\";\r\n    // end of html table header fields row\r\n  \r\n    screenedDataSource.forEach((item) => {\r\n      // table data begins for each field\r\n      tableStats += \"<tr>\";\r\n  \r\n      for (let j = 0; j < fieldsLength; j++) {\r\n        if (tableHeaders[j] == sortBy) {\r\n          // this if part adds highlight to sorted column\r\n          tableStats +=\r\n            `<td data-season-Number=${seasonNumber} data-data-source=${dataSourceName} data-array-source=${fieldsArrayName} class=${color} data-field-name=` + //data-fieldNames required for mobile layout\r\n            tableHeaders[j] +\r\n            \" >\";\r\n          // this if correctly outputs wins - OTW in full table view\r\n          if (isOTW && tableHeaders[j] == \"Wins\") {\r\n            tableStats += item.get(tableHeaders[j]) - item.get(\"OTW\");\r\n          } else {\r\n            tableStats += item.get(tableHeaders[j]);\r\n          }\r\n          tableStats += \"</td>\";\r\n        } else {\r\n          tableStats +=\r\n            `<td  data-season-Number=${seasonNumber} data-data-source=${dataSourceName} data-array-source=${fieldsArrayName} data-field-name=` + //data-fieldNames required for mobile layout\r\n            tableHeaders[j] +\r\n            \" >\";\r\n          // this if correctly outputs wins - OTW in full table view\r\n          if (isOTW && tableHeaders[j] == \"Wins\") {\r\n            tableStats += item.get(tableHeaders[j]) - item.get(\"OTW\");\r\n          } else {\r\n            tableStats += item.get(tableHeaders[j]);\r\n          }\r\n          tableStats += \"</td>\";\r\n        }\r\n      }\r\n      tableStats += \"</tr>\";\r\n    });\r\n  \r\n    // html table ends\r\n    tableStats += \"</table>\";\r\n  \r\n    closeSidebar();\r\n    clearScoreboardDiv();\r\n  \r\n    // display table on web page\r\n    getTablesDiv(); // import function\r\n    tablesDiv.innerHTML = tableStats;\r\n  \r\n    // function to change background-color on team row viewed on smaller screens\r\n    if (isTeamTable) {\r\n      setTeamsTableBgColor();\r\n    } else {\r\n      setPlayersTableBgColor(seasonNumber);\r\n    }\r\n  }","import setTableListeners from \"../listeners/listenerHelpers/setTableListeners\";\r\nimport tableDataSource from \"../var_lib/maps/tableDataSourceMAP\";\r\nimport tableFields from \"../var_lib/maps/tableFieldsMAP\";\r\nimport createTable from \"../tables/createTable\";\r\n\r\nexport default function sortTable(event) {\r\n    let seasonNumber = event.target.dataset.seasonNumber;\r\n    let caption = document.querySelector(\"table caption > h1\");\r\n    let tableName = caption.textContent;\r\n    let dataName = event.target.dataset.dataSource;\r\n    let data = tableDataSource.get(dataName);\r\n    let color = \"w3-yellow\";\r\n    let sortBy = event.target.dataset.fieldName;\r\n    let arrayName = event.target.dataset.arraySource;\r\n    let arraySource = tableFields.get(arrayName);\r\n    createTable(\r\n      seasonNumber,\r\n      tableName,\r\n      dataName,\r\n      data,\r\n      color,\r\n      sortBy,\r\n      arrayName,\r\n      arraySource\r\n    );\r\n    setTableListeners();\r\n  }","import sortTable from \"../../misc/sortTable\";\r\n\r\nexport default function setTableListeners() {\r\n    let browserWidth = window.innerWidth;\r\n    if (browserWidth < 982) {\r\n      let mobileTableCells = document.querySelectorAll(\"#tablesDiv\");\r\n      mobileTableCells[0].onclick = function (e) {\r\n        let td = e.target.closest(\"td\");\r\n        if (!td) return;\r\n        sortTable(e);\r\n      };\r\n    } else {\r\n      let getFieldNames = document.querySelectorAll(\"#tablesDiv\");\r\n      getFieldNames[0].onclick = function (e) {\r\n        let th = e.target.closest(\"th\");\r\n        if (!th) return;\r\n        sortTable(e);\r\n      };\r\n    }\r\n  }","// maps via key as number representing season to array value of which teams competed that season\r\nimport seasonCount from \"../../season/seasonCount\"\r\nimport { TeamPlayers } from \"../../../../constants/masterHaxData\"\r\nimport teamsMAP from \"./teamsMAP\";\r\n\r\nconst eachSeasonsTeamsMAP = new Map();\r\n\r\nfor (let i = 1; i <= seasonCount.length; i++) {\r\n    eachSeasonsTeamsMAP.set(\r\n      i,\r\n      Array.from(\r\n        new Set(\r\n          TeamPlayers\r\n            .filter((item) => item.SeasonNumber == i)\r\n            .map((item) => teamsMAP.get(+item.TeamID))\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\nexport default eachSeasonsTeamsMAP;","export default function clearTablesDiv() {\r\n    let previousData = document.getElementById(\"tablesDiv\");\r\n    previousData.innerHTML = \"\";\r\n  }","import { DEFENDING_CHAMPS } from \"../../constants/consts/vars\";\r\n\r\nexport default function setHeaderBanner(imgSource, team) {\r\n    // note this is not the champions banner\r\n    let headerImage = document.querySelector(\"#championsCard>div>img\");\r\n    headerImage.src = imgSource;\r\n    let header = document.getElementById(\"headerTeamName\");\r\n    let headerChildren = header.childNodes;\r\n    headerChildren[headerChildren.length-1].textContent = team;\r\n    // add champions name here to display trophy icon when champion team selected\r\n    let trophy = document.querySelector(\"i\");\r\n    if (team == DEFENDING_CHAMPS) {\r\n      trophy.classList.add(\"fa-trophy\");\r\n    } else {\r\n      trophy.classList.remove(\"fa-trophy\");\r\n    }\r\n  }","// maps teams main color with ID number\r\nimport teamsMAP from \"./teamsMAP\";\r\nimport { Teams } from \"../../../../constants/masterHaxData\";\r\n\r\nconst teamsColorMAP = new Map();\r\n\r\nfor (let i = 0; i < teamsMAP.size; i++) {\r\n    teamsColorMAP.set(teamsMAP.get(i + 1), Teams[i].MainColor);\r\n  }\r\n\r\nexport default teamsColorMAP;","  import { TeamPlayers } from \"../../constants/masterHaxData.js\";\r\n  import playersMAP from \"../var_lib/maps/players/playersMAP.js\";\r\n  import teamsMAP from \"../var_lib/maps/teams/teamsMAP.js\";\r\n  import teamsNumMAP from \"../var_lib/maps/teams/teamsNumMAP.js\";\r\n  import eachTeamObjectMAP from \"../var_lib/maps/teams/eachTeamObjectMAP.js\";\r\n  import IndividualPlayerStats from \"../classFiles/individualPlayerStats.js\";\r\n  import clearScoreboardDiv from \"../scoreboard/clearScoreboardDiv.js\";\r\n  import clearTablesDiv from \"../tables/clearTablesDiv.js\";\r\n  import sortGroupedStats from \"../misc/sort.js\";\r\n  import setTeamsPageLayout from \"./setTeamsPageLayout.js\";\r\n  \r\n  let playersTable = [\r\n    \"Name\",\r\n    \"GP\",\r\n    \"Goals\",\r\n    \"Assists\",\r\n    \"Points\",\r\n    \"Kicks\",\r\n    \"Passes\",\r\n    \"ShotsOnGoal\",\r\n    \"OwnGoals\",\r\n  ];\r\n  let fieldsLength = playersTable.length;\r\n  \r\n  export default function getTeamsPlayersPerSeason(\r\n    e,\r\n    thisTeam,\r\n    thisSeasonNumber,\r\n    thisTeamLogo,\r\n    seasonSelectedField = \"Points\",\r\n    playoffSelectedField = \"Points\",\r\n    combinedSelectedField = \"Points\"\r\n  ) {\r\n    clearTablesDiv();\r\n    clearScoreboardDiv();\r\n    let team, teamName, teamColor, seasonNum, teamImage;\r\n    if (e !== false) {\r\n      team = teamsNumMAP.get(e.target.dataset.teamName);\r\n      teamName = teamsMAP.get(+team);\r\n      teamColor = `#${eachTeamObjectMAP.get(teamsMAP.get(team)).MainColor}`;\r\n      seasonNum = e.target.dataset.seasonNum;\r\n      teamImage = e.target.dataset.teamLogo; // used for the back button\r\n    } else {\r\n      team = teamsNumMAP.get(thisTeam);\r\n      teamName = teamsMAP.get(+team);\r\n      teamColor = `#${eachTeamObjectMAP.get(teamsMAP.get(team)).MainColor}`;\r\n      seasonNum = thisSeasonNumber;\r\n      teamImage = thisTeamLogo; // used for the back button\r\n    }\r\n    // grab players who played on this team\r\n    let playersFiltered = TeamPlayers.filter(\r\n      (item) => item.TeamID == team && item.SeasonNumber == seasonNum\r\n    );\r\n    // enter players on this team into an array\r\n    let playersArray = [];\r\n    playersFiltered.forEach((item) =>\r\n      playersArray.push(playersMAP.get(+item.PlayerID))\r\n    );\r\n    // push those players seasons stats into team array and sort by points\r\n    let playerSeasonObjects = [];\r\n    playersArray.forEach((item) =>\r\n      playerSeasonObjects.push(\r\n        IndividualPlayerStats.allPlayersStats[item][\r\n          `playersSeason${seasonNum}SeasonStatsMAP`\r\n        ]\r\n      )\r\n    );\r\n    sortGroupedStats(playerSeasonObjects, seasonSelectedField);\r\n    // push those players playoff stats into team array and sort by points\r\n    let playerPlayoffObjects = [];\r\n    playersArray.forEach((item) =>\r\n      playerPlayoffObjects.push(\r\n        IndividualPlayerStats.allPlayersStats[item][\r\n          `playersSeason${seasonNum}PlayoffStatsMAP`\r\n        ]\r\n      )\r\n    );\r\n    sortGroupedStats(playerPlayoffObjects, playoffSelectedField);\r\n    // push those players full season combined stats into team array and sort by points\r\n    let playerCombinedObjects = [];\r\n    playersArray.forEach((item) =>\r\n      playerCombinedObjects.push(\r\n        IndividualPlayerStats.allPlayersStats[item][\r\n          `playersSeason${seasonNum}CombinedStatsMAP`\r\n        ]\r\n      )\r\n    );\r\n    sortGroupedStats(playerCombinedObjects, combinedSelectedField);\r\n    // var containing the innerHTML of tables\r\n    let playerStats = \"\";\r\n    playerStats += `<button id=\"playerStatsBackButton\" class=\"w3-btn w3-round-large\" style=\"background-color:${teamColor}; color: #ffffff;\" data-team-name=\"${teamName}\" data-team-logo=\"${teamImage}\" data-season-num=\"${seasonNum}\">back</button>`;\r\n    playerStats += `<h1>Season ${seasonNum}</h1>`;\r\n    // the following div ID \"teamPlayerList\" is used for where to position the regular season players table after a sort function\r\n    playerStats += `<div id=\"teamPlayerList\" class=\"w3-padding w3-card-4 w3-round-large\" style=\"color:#fff;background-color:${teamColor};\">`;\r\n    playersArray.forEach(\r\n      (item) =>\r\n        (playerStats += `\r\n      <div style=\"font-size: 1.2em;\">${item}</div>`)\r\n    );\r\n    playerStats += `</div>`;\r\n  \r\n    // html table season stats begin\r\n    playerStats += \"<table id='teamPlayerSeasonTable'>\";\r\n    // html table caption\r\n    playerStats += `<caption><h3>Regular Season</h3></caption>`;\r\n    // html table thead\r\n    playerStats += \"<thead><tr>\";\r\n    for (let i = 0; i < fieldsLength; i++) {\r\n      if (playersTable[i] == seasonSelectedField) {\r\n        playerStats +=\r\n          `<th data-field-name=` + //data-fieldNames required for mobile layout\r\n          playersTable[i] +\r\n          ` class=\"w3-orange\">` +\r\n          playersTable[i] +\r\n          \"</th>\";\r\n      } else {\r\n        playerStats +=\r\n          `<th  data-field-name=` + //data-fieldNames required for mobile layout\r\n          playersTable[i] +\r\n          \" >\" +\r\n          playersTable[i] +\r\n          \"</th>\";\r\n      }\r\n    }\r\n    playerStats += \"</tr></thead>\";\r\n    // end of html table header fields row\r\n  \r\n    playerSeasonObjects.forEach((item) => {\r\n      // table data begins for each field\r\n      playerStats += \"<tr>\";\r\n  \r\n      for (let j = 0; j < fieldsLength; j++) {\r\n        if (playersTable[j] == seasonSelectedField) {\r\n          playerStats +=\r\n            `<td data-field-name=` + //data-fieldNames required for mobile layout\r\n            playersTable[j] +\r\n            ` class=\"w3-yellow\">` + // add yellow background for sorted column points\r\n            item.get(playersTable[j]) +\r\n            \"</td>\";\r\n        } else {\r\n          playerStats +=\r\n            `<td data-field-name=` + //data-fieldNames required for mobile layout\r\n            playersTable[j] +\r\n            \" >\" +\r\n            item.get(playersTable[j]) +\r\n            \"</td>\";\r\n        }\r\n      }\r\n      playerStats += \"</tr>\";\r\n    });\r\n  \r\n    // html table ends\r\n    playerStats += \"</table>\";\r\n  \r\n    // html table playoff stats begin\r\n    if (playerPlayoffObjects[0].get(\"GP\") > 0) {\r\n      playerStats += \"<table id='teamPlayerPlayoffTable'>\";\r\n      // html table caption\r\n      playerStats += `<caption><h3>Playoffs</h3></caption>`;\r\n      // html table thead\r\n      playerStats += \"<thead><tr>\";\r\n      for (let i = 0; i < fieldsLength; i++) {\r\n        if (playersTable[i] == playoffSelectedField) {\r\n          playerStats +=\r\n            `<th data-field-name=` + //data-fieldNames required for mobile layout\r\n            playersTable[i] +\r\n            ` class=\"w3-orange\">` +\r\n            playersTable[i] +\r\n            \"</th>\";\r\n        } else {\r\n          playerStats +=\r\n            `<th data-field-name=` + //data-fieldNames required for mobile layout\r\n            playersTable[i] +\r\n            \" >\" +\r\n            playersTable[i] +\r\n            \"</th>\";\r\n        }\r\n      }\r\n      playerStats += \"</tr></thead>\";\r\n      // end of html table header fields row\r\n  \r\n      playerPlayoffObjects.forEach((item) => {\r\n        // table data begins for each field\r\n        playerStats += \"<tr>\";\r\n  \r\n        for (let j = 0; j < fieldsLength; j++) {\r\n          if (playersTable[j] == playoffSelectedField) {\r\n            playerStats +=\r\n              `<td data-field-name=` + //data-fieldNames required for mobile layout\r\n              playersTable[j] +\r\n              ` class=\"w3-yellow\">` + // add yellow background for sorted column points\r\n              item.get(playersTable[j]) +\r\n              \"</td>\";\r\n          } else {\r\n            playerStats +=\r\n              `<td data-field-name=` + //data-fieldNames required for mobile layout\r\n              playersTable[j] +\r\n              \" >\" +\r\n              item.get(playersTable[j]) +\r\n              \"</td>\";\r\n          }\r\n        }\r\n        playerStats += \"</tr>\";\r\n      });\r\n  \r\n      // html table ends\r\n      playerStats += \"</table>\";\r\n  \r\n      // html table combined stats begin\r\n      playerStats += \"<table id='teamPlayerCombinedTable'>\";\r\n      // html table caption\r\n      playerStats += `<caption><h3>Combined Stats</h3></caption>`;\r\n      // html table thead\r\n      playerStats += \"<thead><tr>\";\r\n      for (let i = 0; i < fieldsLength; i++) {\r\n        if (playersTable[i] == combinedSelectedField) {\r\n          playerStats +=\r\n            `<th data-field-name=` + //data-fieldNames required for mobile layout\r\n            playersTable[i] +\r\n            ` class=\"w3-orange\">` +\r\n            playersTable[i] +\r\n            \"</th>\";\r\n        } else {\r\n          playerStats +=\r\n            `<th data-field-name=` + //data-fieldNames required for mobile layout\r\n            playersTable[i] +\r\n            \" >\" +\r\n            playersTable[i] +\r\n            \"</th>\";\r\n        }\r\n      }\r\n      playerStats += \"</tr></thead>\";\r\n      // end of html table header fields row\r\n  \r\n      playerCombinedObjects.forEach((item) => {\r\n        // table data begins for each field\r\n        playerStats += \"<tr>\";\r\n  \r\n        for (let j = 0; j < fieldsLength; j++) {\r\n          if (playersTable[j] == combinedSelectedField) {\r\n            playerStats +=\r\n              `<td data-field-name=` + //data-fieldNames required for mobile layout\r\n              playersTable[j] +\r\n              ` class=\"w3-yellow\">` + // add yellow background for sorted column points\r\n              item.get(playersTable[j]) +\r\n              \"</td>\";\r\n          } else {\r\n            playerStats +=\r\n              `<td data-field-name=` + //data-fieldNames required for mobile layout\r\n              playersTable[j] +\r\n              \" >\" +\r\n              item.get(playersTable[j]) +\r\n              \"</td>\";\r\n          }\r\n        }\r\n        playerStats += \"</tr>\";\r\n      });\r\n  \r\n      // html table ends\r\n      playerStats += \"</table>\";\r\n    } else {\r\n      playerStats += \"<h3>No playoff games played</h3>\";\r\n    }\r\n  \r\n    let playerStatsTable = document.getElementById(\"scoreboardDiv\");\r\n    playerStatsTable.style.display = \"flex\";\r\n    playerStatsTable.style.flexDirection = \"column\";\r\n    playerStatsTable.style.alignItems = \"center\";\r\n    playerStatsTable.innerHTML = playerStats;\r\n  \r\n    let playerNameCells = document.querySelectorAll(\"td[data-field-name='Name']\");\r\n    playerNameCells.forEach((item) => {\r\n      item.style.color = \"#fff\";\r\n      item.style.backgroundColor = teamColor;\r\n    });\r\n  \r\n    // listener for the back button back to teams layout Page\r\n    document\r\n      .getElementById(\"playerStatsBackButton\")\r\n      .addEventListener(\"click\", setTeamsPageLayout);\r\n    // end back button\r\n  \r\n    ////////////////////BEGIN OF SORTINGFUNCTIONS FOR THE ABOVE 3 TABLES//////////////////////////////\r\n    // regular season sorting and listening function\r\n    function sortTeamPlayersSeasonTable(e) {\r\n      let sortBy = e.target.dataset.fieldName;\r\n      sortGroupedStats(playerSeasonObjects, sortBy);\r\n      let teamPlayersSeasonTable = \"\";\r\n      // html table season stats begin\r\n      teamPlayersSeasonTable += \"<table id='teamPlayerSeasonTable'>\";\r\n      // html table caption\r\n      teamPlayersSeasonTable += `<caption><h3>Regular Season</h3></caption>`;\r\n      // html table thead\r\n      teamPlayersSeasonTable += \"<thead><tr>\";\r\n      for (let i = 0; i < fieldsLength; i++) {\r\n        if (playersTable[i] == sortBy) {\r\n          teamPlayersSeasonTable +=\r\n            `<th data-field-name=` + //data-fieldNames required for mobile layout\r\n            playersTable[i] +\r\n            ` class=\"w3-orange\">` +\r\n            playersTable[i] +\r\n            \"</th>\";\r\n        } else {\r\n          teamPlayersSeasonTable +=\r\n            `<th  data-field-name=` + //data-fieldNames required for mobile layout\r\n            playersTable[i] +\r\n            \" >\" +\r\n            playersTable[i] +\r\n            \"</th>\";\r\n        }\r\n      }\r\n      teamPlayersSeasonTable += \"</tr></thead>\";\r\n      // end of html table header fields row\r\n  \r\n      playerSeasonObjects.forEach((item) => {\r\n        // table data begins for each field\r\n        teamPlayersSeasonTable += \"<tr>\";\r\n  \r\n        for (let j = 0; j < fieldsLength; j++) {\r\n          if (playersTable[j] == sortBy) {\r\n            teamPlayersSeasonTable +=\r\n              `<td data-field-name=` + //data-fieldNames required for mobile layout\r\n              playersTable[j] +\r\n              ` class=\"w3-yellow\">` + // add yellow background for sorted column points\r\n              item.get(playersTable[j]) +\r\n              \"</td>\";\r\n          } else {\r\n            teamPlayersSeasonTable +=\r\n              `<td data-field-name=` + //data-fieldNames required for mobile layout\r\n              playersTable[j] +\r\n              \" >\" +\r\n              item.get(playersTable[j]) +\r\n              \"</td>\";\r\n          }\r\n        }\r\n        teamPlayersSeasonTable += \"</tr>\";\r\n      });\r\n  \r\n      // html table ends\r\n      teamPlayersSeasonTable += \"</table>\";\r\n      /////////////////////////////////////////////////////////////////////////////\r\n      let seasonTable = document.getElementById(\"teamPlayerSeasonTable\");\r\n      let position = document.querySelector(\"#teamPlayerList\");\r\n      seasonTable.remove();\r\n      position.insertAdjacentHTML(\"afterend\", teamPlayersSeasonTable);\r\n  \r\n      setTeamPlayerSeasonTableListeners(); // this resets the listeners on the table after being redisplayed\r\n  \r\n      let playerNameCells = document.querySelectorAll(\r\n        \"td[data-field-name='Name']\"\r\n      );\r\n      playerNameCells.forEach((item) => {\r\n        item.style.color = \"#fff\";\r\n        item.style.backgroundColor = teamColor;\r\n      });\r\n    }\r\n  \r\n    // listeners on table headers for sorting table on larger screens\r\n    function setTeamPlayerSeasonTableListeners() {\r\n      let browserWidth = window.innerWidth;\r\n      let getTable = document.querySelectorAll(\"#teamPlayerSeasonTable\");\r\n      // for mobile screens\r\n      if (browserWidth < 982) {\r\n        getTable[0].onclick = function (e) {\r\n          let td = e.target.closest(\"td\");\r\n          if (!td) return;\r\n          sortTeamPlayersSeasonTable(e);\r\n        };\r\n      }\r\n      // for larger screens\r\n      else {\r\n        getTable[0].onclick = function (e) {\r\n          let th = e.target.closest(\"th\");\r\n          if (!th) return;\r\n          sortTeamPlayersSeasonTable(e);\r\n        };\r\n      }\r\n    }\r\n    setTeamPlayerSeasonTableListeners();\r\n  \r\n    // playoffs sorting and listening functions\r\n    function sortTeamPlayersPlayoffTable(e) {\r\n      let sortBy = e.target.dataset.fieldName;\r\n      sortGroupedStats(playerPlayoffObjects, sortBy);\r\n      let teamPlayersPlayoffTable = \"\";\r\n      // html table season stats begin\r\n      teamPlayersPlayoffTable += \"<table id='teamPlayerPlayoffTable'>\";\r\n      // html table caption\r\n      teamPlayersPlayoffTable += `<caption><h3>Playoffs</h3></caption>`;\r\n      // html table thead\r\n      teamPlayersPlayoffTable += \"<thead><tr>\";\r\n      for (let i = 0; i < fieldsLength; i++) {\r\n        if (playersTable[i] == sortBy) {\r\n          teamPlayersPlayoffTable +=\r\n            `<th data-field-name=` + //data-fieldNames required for mobile layout\r\n            playersTable[i] +\r\n            ` class=\"w3-orange\">` +\r\n            playersTable[i] +\r\n            \"</th>\";\r\n        } else {\r\n          teamPlayersPlayoffTable +=\r\n            `<th  data-field-name=` + //data-fieldNames required for mobile layout\r\n            playersTable[i] +\r\n            \" >\" +\r\n            playersTable[i] +\r\n            \"</th>\";\r\n        }\r\n      }\r\n      teamPlayersPlayoffTable += \"</tr></thead>\";\r\n      // end of html table header fields row\r\n  \r\n      playerPlayoffObjects.forEach((item) => {\r\n        // table data begins for each field\r\n        teamPlayersPlayoffTable += \"<tr>\";\r\n  \r\n        for (let j = 0; j < fieldsLength; j++) {\r\n          if (playersTable[j] == sortBy) {\r\n            teamPlayersPlayoffTable +=\r\n              `<td data-field-name=` + //data-fieldNames required for mobile layout\r\n              playersTable[j] +\r\n              ` class=\"w3-yellow\">` + // add yellow background for sorted column points\r\n              item.get(playersTable[j]) +\r\n              \"</td>\";\r\n          } else {\r\n            teamPlayersPlayoffTable +=\r\n              `<td data-field-name=` + //data-fieldNames required for mobile layout\r\n              playersTable[j] +\r\n              \" >\" +\r\n              item.get(playersTable[j]) +\r\n              \"</td>\";\r\n          }\r\n        }\r\n        teamPlayersPlayoffTable += \"</tr>\";\r\n      });\r\n  \r\n      // html table ends\r\n      teamPlayersPlayoffTable += \"</table>\";\r\n      /////////////////////////////////////////////////////////////////////////////\r\n      let playoffTable = document.getElementById(\"teamPlayerPlayoffTable\");\r\n      let position = document.querySelector(\"#teamPlayerCombinedTable\");\r\n      playoffTable.remove();\r\n      position.insertAdjacentHTML(\"beforebegin\", teamPlayersPlayoffTable);\r\n      setTeamPlayerPlayoffTableListeners(); // this resets the listeners on the table after being redisplayed\r\n  \r\n      let playerNameCells = document.querySelectorAll(\r\n        \"td[data-field-name='Name']\"\r\n      );\r\n      playerNameCells.forEach((item) => {\r\n        item.style.color = \"#fff\";\r\n        item.style.backgroundColor = teamColor;\r\n      });\r\n    }\r\n  \r\n    // listeners on table headers for sorting regular season table\r\n    function setTeamPlayerPlayoffTableListeners() {\r\n      let browserWidth = window.innerWidth;\r\n      let getTable = document.querySelectorAll(\"#teamPlayerPlayoffTable\");\r\n      // test if team made playoffs\r\n      if (getTable.length > 0) {\r\n        // for mobile screens\r\n        if (browserWidth < 982) {\r\n          getTable[0].onclick = function (e) {\r\n            let td = e.target.closest(\"td\");\r\n            if (!td) return;\r\n            sortTeamPlayersPlayoffTable(e);\r\n          };\r\n        }\r\n        // for larger screens\r\n        else {\r\n          getTable[0].onclick = function (e) {\r\n            let th = e.target.closest(\"th\");\r\n            if (!th) return;\r\n            sortTeamPlayersPlayoffTable(e);\r\n          };\r\n        }\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n    setTeamPlayerPlayoffTableListeners();\r\n  \r\n    // combined stats for sorting and listening functions\r\n  \r\n    function sortTeamPlayerscombinedTable(e) {\r\n      let sortBy = e.target.dataset.fieldName;\r\n      sortGroupedStats(playerCombinedObjects, sortBy);\r\n      let teamPlayersCombinedTable = \"\";\r\n      // html table season stats begin\r\n      teamPlayersCombinedTable += \"<table id='teamPlayerCombinedTable'>\";\r\n      // html table caption\r\n      teamPlayersCombinedTable += `<caption><h3>Combined Stats</h3></caption>`;\r\n      // html table thead\r\n      teamPlayersCombinedTable += \"<thead><tr>\";\r\n      for (let i = 0; i < fieldsLength; i++) {\r\n        if (playersTable[i] == sortBy) {\r\n          teamPlayersCombinedTable +=\r\n            `<th data-field-name=` + //data-fieldNames required for mobile layout\r\n            playersTable[i] +\r\n            ` class=\"w3-orange\">` +\r\n            playersTable[i] +\r\n            \"</th>\";\r\n        } else {\r\n          teamPlayersCombinedTable +=\r\n            `<th  data-field-name=` + //data-fieldNames required for mobile layout\r\n            playersTable[i] +\r\n            \" >\" +\r\n            playersTable[i] +\r\n            \"</th>\";\r\n        }\r\n      }\r\n      teamPlayersCombinedTable += \"</tr></thead>\";\r\n      // end of html table header fields row\r\n  \r\n      playerCombinedObjects.forEach((item) => {\r\n        // table data begins for each field\r\n        teamPlayersCombinedTable += \"<tr>\";\r\n  \r\n        for (let j = 0; j < fieldsLength; j++) {\r\n          if (playersTable[j] == sortBy) {\r\n            teamPlayersCombinedTable +=\r\n              `<td data-field-name=` + //data-fieldNames required for mobile layout\r\n              playersTable[j] +\r\n              ` class=\"w3-yellow\">` + // add yellow background for sorted column points\r\n              item.get(playersTable[j]) +\r\n              \"</td>\";\r\n          } else {\r\n            teamPlayersCombinedTable +=\r\n              `<td data-field-name=` + //data-fieldNames required for mobile layout\r\n              playersTable[j] +\r\n              \" >\" +\r\n              item.get(playersTable[j]) +\r\n              \"</td>\";\r\n          }\r\n        }\r\n        teamPlayersCombinedTable += \"</tr>\";\r\n      });\r\n  \r\n      // html table ends\r\n      teamPlayersCombinedTable += \"</table>\";\r\n      /////////////////////////////////////////////////////////////////////////////\r\n      let combinedTable = document.getElementById(\"teamPlayerCombinedTable\");\r\n      let position = document.querySelector(\"#teamPlayerPlayoffTable\");\r\n      combinedTable.remove();\r\n      position.insertAdjacentHTML(\"afterend\", teamPlayersCombinedTable);\r\n      setTeamPlayerCombinedTableListeners(); // this resets the listeners on the table after being redisplayed\r\n  \r\n      let playerNameCells = document.querySelectorAll(\r\n        \"td[data-field-name='Name']\"\r\n      );\r\n      playerNameCells.forEach((item) => {\r\n        item.style.color = \"#fff\";\r\n        item.style.backgroundColor = teamColor;\r\n      });\r\n    }\r\n  \r\n    // listeners on table headers for sorting combined stats table\r\n    function setTeamPlayerCombinedTableListeners() {\r\n      let browserWidth = window.innerWidth;\r\n      let getTable = document.querySelectorAll(\"#teamPlayerCombinedTable\");\r\n      // test if team made playoffs\r\n      if (getTable.length > 0) {\r\n        // for mobile screens\r\n        if (browserWidth < 982) {\r\n          getTable[0].onclick = function (e) {\r\n            let td = e.target.closest(\"td\");\r\n            if (!td) return;\r\n            sortTeamPlayerscombinedTable(e);\r\n          };\r\n        }\r\n        // for larger screens\r\n        else {\r\n          getTable[0].onclick = function (e) {\r\n            let th = e.target.closest(\"th\");\r\n            if (!th) return;\r\n            sortTeamPlayerscombinedTable(e);\r\n          };\r\n        }\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n    setTeamPlayerCombinedTableListeners();\r\n  }\r\n  ","  import { GameResults, Gifs } from \"../../constants/masterHaxData.js\";\r\n  import teamsMAP from \"../var_lib/maps/teams/teamsMAP.js\";\r\n  import eachTeamObjectMAP from \"../var_lib/maps/teams/eachTeamObjectMAP.js\";\r\n  import clearScoreboardDiv from \"../scoreboard/clearScoreboardDiv.js\";\r\n  import clearTablesDiv from \"../tables/clearTablesDiv.js\";\r\n  import getScoreboardDiv from \"../scoreboard/clearScoreboardDiv.js\";\r\n  import getTablesDiv from \"../tables/getTablesDiv.js\";\r\n  import getTeamsGameResults from \"./getTeamsGamesResults.js\";\r\n  \r\n  export default function setGifs(e) {\r\n    clearScoreboardDiv();\r\n    clearTablesDiv();\r\n    getTablesDiv();\r\n    getScoreboardDiv();\r\n    let displayGifsHeader = \"\";\r\n    let displayGifs = \"\";\r\n    let gameNumber = e.target.dataset.gameId;\r\n    let teamName = e.target.dataset.teamName;\r\n    let teamLogo = e.target.dataset.teamLogo;\r\n    let gameType = e.target.dataset.gameType;\r\n    let thisGamesResult = GameResults.filter((item) => item.GameID == gameNumber);\r\n    let thisGifsSeasonNum = thisGamesResult[0].SeasonNumber;\r\n    let thisGamesHomeTeam = teamsMAP.get(+thisGamesResult[0].TeamOne);\r\n    let thisGamesHomeTeamLogo =\r\n      eachTeamObjectMAP.get(thisGamesHomeTeam)[\r\n        `S0${thisGifsSeasonNum}HomeFilePath`\r\n      ];\r\n    let thisGamesHomeTeamScore = thisGamesResult[0].TeamOneScore;\r\n    let thisGamesAwayTeam = teamsMAP.get(+thisGamesResult[0].TeamTwo);\r\n    let thisGamesAwayTeamLogo =\r\n      eachTeamObjectMAP.get(thisGamesAwayTeam)[\r\n        `S0${thisGifsSeasonNum}HomeFilePath`\r\n      ];\r\n    let thisGamesAwayTeamScore = thisGamesResult[0].TeamTwoScore;\r\n    let thisGamesHighlights = Gifs.filter((item) => item.GameID == gameNumber);\r\n    if (thisGamesHighlights.length > 0) {\r\n      // begin title for gifs page\r\n      displayGifsHeader = `<div class=\"gifsHeaderContainer\">`;\r\n      // back button\r\n      displayGifsHeader += `<button id=\"gamesGifsBackButton\" class=\"w3-btn w3-round-large gifsBackButton\" style=\"background-color:#${\r\n        eachTeamObjectMAP.get(teamName).MainColor\r\n      }; color: #ffffff;\" data-team-name=\"${teamName}\" data-team-logo=\"${teamLogo}\" data-season-num=\"${thisGifsSeasonNum}\" data-game-type=\"${gameType}\">back</button>`;\r\n      // end back button\r\n      displayGifsHeader += `<div class=\"gifsHomeTeam\">`;\r\n      displayGifsHeader += `<img src=\"${thisGamesHomeTeamLogo}\">`;\r\n      displayGifsHeader += `</div>`;\r\n      displayGifsHeader += `<div class=\"gifsHomeTeamScore\">`;\r\n      displayGifsHeader += thisGamesHomeTeamScore;\r\n      displayGifsHeader += `</div>`;\r\n      displayGifsHeader += `<div class=\"gifsVsHeader\">`;\r\n      displayGifsHeader += ` vs `;\r\n      displayGifsHeader += `</div>`;\r\n      displayGifsHeader += `<div class=\"gifsAwayTeam\">`;\r\n      displayGifsHeader += `<img src=\"${thisGamesAwayTeamLogo}\">`;\r\n      displayGifsHeader += `</div>`;\r\n      displayGifsHeader += `<div class=\"gifsAwayTeamScore\">`;\r\n      displayGifsHeader += thisGamesAwayTeamScore;\r\n      displayGifsHeader += `</div>`;\r\n      //end div for header container\r\n      displayGifsHeader += `</div>`;\r\n      //end of gifs page title\r\n      tablesDiv.innerHTML = displayGifsHeader;\r\n  \r\n      // listener for the back button back to teams layout Page\r\n      document\r\n        .getElementById(\"gamesGifsBackButton\")\r\n        .addEventListener(\"click\", getTeamsGameResults);\r\n      // end back button\r\n      for (let i = 0; i < thisGamesHighlights.length; i++) {\r\n        let thisGamesFinalPath;\r\n        let theseGifsSubSet = thisGamesHighlights[0].Filepath;\r\n        let thisGifsSubPath = theseGifsSubSet.slice(\r\n          0,\r\n          theseGifsSubSet.length - 6\r\n        );\r\n        if (i < 9) {\r\n          thisGamesFinalPath = `${thisGifsSubPath}0${i + 1}.gif`;\r\n        } else {\r\n          thisGamesFinalPath = `${thisGifsSubPath}${i + 1}.gif`;\r\n        }\r\n        let thisGif = thisGamesHighlights.find(\r\n          (item) => item.Filepath == thisGamesFinalPath\r\n        );\r\n        displayGifs += `<h5>${thisGif.Comment}</h5>`;\r\n        displayGifs += `<img src=\"${thisGamesFinalPath}\">`;\r\n      }\r\n      scoreboardDiv.innerHTML = displayGifs;\r\n    } else {\r\n      let noGifs = \"<h3>No highlights for this game</h3>\";\r\n      scoreboardDiv.innerHTML = noGifs;\r\n    }\r\n  }","export default function getScoreboardDiv() {\r\n    let scoreboardDiv = document.getElementById(\"scoreboardDiv\");\r\n    return scoreboardDiv;\r\n  }","\r\n  import { GameResults, GamePlayerStats, TeamPlayers } from \"../../constants/masterHaxData.js\";\r\n  import teamsMAP from \"../var_lib/maps/teams/teamsMAP.js\";\r\n  import playersMAP from \"../var_lib/maps/players/playersMAP.js\";\r\n  import teamsNumMAP from \"../var_lib/maps/teams/teamsNumMAP.js\";\r\n  import eachTeamObjectMAP from \"../var_lib/maps/teams/eachTeamObjectMAP.js\";\r\n  import clearScoreboardDiv from \"../scoreboard/clearScoreboardDiv.js\";\r\n  import clearTablesDiv from \"../tables/clearTablesDiv.js\";\r\n  import getScoreboardDiv from \"../scoreboard/getScoreboardDiv.js\";\r\n  import getTablesDiv from \"../tables/getTablesDiv.js\";\r\n  import sortGroupedStats from \"../misc/sort.js\";\r\n  import getTeamsGameResults from \"./getTeamsGamesResults.js\";\r\n  \r\n  export default function setGamesData(e) {\r\n    clearScoreboardDiv();\r\n    clearTablesDiv();\r\n    getScoreboardDiv();\r\n    getTablesDiv();\r\n    let displayGameData = \"\";\r\n    let displayTeamLogos = \"\";\r\n    let gameNumber = e.target.dataset.gameId;\r\n    let teamName = e.target.dataset.teamName;\r\n    let teamLogo = e.target.dataset.teamLogo;\r\n    let gameType = e.target.dataset.gameType;\r\n    let thisSeasonNumber = GameResults.filter(\r\n      (item) => item.GameID == gameNumber\r\n    )[0].SeasonNumber;\r\n    let thisGamesResult = GameResults.filter((item) => item.GameID == gameNumber);\r\n    // begin home team\r\n    let thisGamesHomeTeam = teamsMAP.get(+thisGamesResult[0].TeamOne);\r\n    let thisGamesHomeTeamColor = `#${\r\n      eachTeamObjectMAP.get(thisGamesHomeTeam).MainColor\r\n    }`;\r\n    let thisGamesHomeTeamLogo =\r\n      eachTeamObjectMAP.get(thisGamesHomeTeam)[\r\n        `S0${thisSeasonNumber}HomeFilePath`\r\n      ];\r\n    //***************************** */\r\n  \r\n    let thisGamesHomeTeamsPlayerRecords = TeamPlayers.filter(\r\n      (item) =>\r\n        item.SeasonNumber == thisSeasonNumber &&\r\n        item.TeamID == String(teamsNumMAP.get(thisGamesHomeTeam))\r\n    );\r\n    let thisGamesHomeTeamPlayerNames = [];\r\n    thisGamesHomeTeamsPlayerRecords.forEach((item) =>\r\n      thisGamesHomeTeamPlayerNames.push(playersMAP.get(+item.PlayerID))\r\n    );\r\n  \r\n    //**************************************** */\r\n    let thisGamesHomeTeamScore = thisGamesResult[0].TeamOneScore;\r\n    let thisGamesHomeTeamPossession = thisGamesResult[0].TeamOnePossession;\r\n    let thisGamesHomeTeamShotsOnGoal = thisGamesResult[0].TeamOneShotsOnGoal;\r\n    let thisGamesHomeTeamPasses = thisGamesResult[0].TeamOnePasses;\r\n    let thisGamesHomeTeamKicks = thisGamesResult[0].TeamOneKicks;\r\n    // end home team\r\n    // begin away team\r\n    let thisGamesAwayTeam = teamsMAP.get(+thisGamesResult[0].TeamTwo);\r\n    let thisGamesAwayTeamColor = `#${\r\n      eachTeamObjectMAP.get(thisGamesAwayTeam).MainColor\r\n    }`;\r\n    let thisGamesAwayTeamLogo =\r\n      eachTeamObjectMAP.get(thisGamesAwayTeam)[\r\n        `S0${thisSeasonNumber}HomeFilePath`\r\n      ];\r\n    //***************************** */\r\n    let thisGamesAwayTeamsPlayerRecords = TeamPlayers.filter(\r\n      (item) =>\r\n        item.SeasonNumber == thisSeasonNumber &&\r\n        item.TeamID == String(teamsNumMAP.get(thisGamesAwayTeam))\r\n    );\r\n    let thisGamesAwayTeamPlayerNames = [];\r\n    thisGamesAwayTeamsPlayerRecords.forEach((item) =>\r\n      thisGamesAwayTeamPlayerNames.push(playersMAP.get(+item.PlayerID))\r\n    );\r\n    //***************************************** */\r\n    let thisGamesAwayTeamScore = thisGamesResult[0].TeamTwoScore;\r\n    let thisGamesAwayTeamPossession = thisGamesResult[0].TeamTwoPossession;\r\n    let thisGamesAwayTeamShotsOnGoal = thisGamesResult[0].TeamTwoShotsOnGoal;\r\n    let thisGamesAwayTeamPasses = thisGamesResult[0].TeamTwoPasses;\r\n    let thisGamesAwayTeamKicks = thisGamesResult[0].TeamTwoKicks;\r\n    // end away team\r\n  \r\n    let gameCategories = [\r\n      \"Team\",\r\n      \"Score\",\r\n      \"Possession\",\r\n      \"SOG\",\r\n      \"Passes\",\r\n      \"Kicks\",\r\n    ];\r\n    let thisGamesHomeTeamStats = [\r\n      thisGamesHomeTeam,\r\n      thisGamesHomeTeamScore,\r\n      thisGamesHomeTeamPossession,\r\n      thisGamesHomeTeamShotsOnGoal,\r\n      thisGamesHomeTeamPasses,\r\n      thisGamesHomeTeamKicks,\r\n    ];\r\n    let thisGamesAwayTeamStats = [\r\n      thisGamesAwayTeam,\r\n      thisGamesAwayTeamScore,\r\n      thisGamesAwayTeamPossession,\r\n      thisGamesAwayTeamShotsOnGoal,\r\n      thisGamesAwayTeamPasses,\r\n      thisGamesAwayTeamKicks,\r\n    ];\r\n    // boxscore div container\r\n    // team logos\r\n  \r\n    displayTeamLogos += `<div class=\" w3-section boxscoreTeamLogosContainer\">`;\r\n    // back button area which is row above team logos\r\n    displayTeamLogos += `<button id=\"gamesBoxscoreBackButton\" class=\"w3-btn w3-round-large boxscoreBackButton\" style=\"background-color:#${\r\n      eachTeamObjectMAP.get(teamName).MainColor\r\n    }; color: #ffffff;\" data-team-name=\"${teamName}\" data-team-logo=\"${teamLogo}\" data-season-num=\"${thisSeasonNumber}\" data-game-type=\"${gameType}\">back</button>`;\r\n    displayTeamLogos += `<div class=\" w3-blue w3-round-large w3-card-4 w3-padding-small boxscoreHomeTeamLogo\">`;\r\n    displayTeamLogos += `<img src=\"${thisGamesHomeTeamLogo}\">`;\r\n    displayTeamLogos += `</div>`;\r\n    displayTeamLogos += `<div class=\"w3-blue w3-round-large w3-card-4 w3-padding-small boxscoreAwayTeamLogo\">`;\r\n    displayTeamLogos += `<img src=\"${thisGamesAwayTeamLogo}\">`;\r\n    displayTeamLogos += `</div>`;\r\n    displayTeamLogos += `</div>`;\r\n    // display team logos\r\n    tablesDiv.innerHTML = displayTeamLogos;\r\n    // end team logos\r\n  \r\n    // begin data containers\r\n    for (let i = 0; i < gameCategories.length; i++) {\r\n      displayGameData += `<div class=\"boxscoreContainer w3-center\">`;\r\n      // set first rows home teams cell to teams main color\r\n      if (i == 0) {\r\n        displayGameData += `<div class=\"boxscoreHomeStats\" style=\"background-color:${thisGamesHomeTeamColor}\">`;\r\n      } else {\r\n        displayGameData += `<div class=\"boxscoreHomeStats\">`;\r\n      }\r\n      // onto next rows\r\n      displayGameData += `${thisGamesHomeTeamStats[i]}`;\r\n      displayGameData += `</div>`;\r\n  \r\n      displayGameData += `<div class=\"boxscoreSeperator\">`;\r\n      displayGameData += `${gameCategories[i]}`;\r\n  \r\n      displayGameData += `</div>`;\r\n  \r\n      // set first rows home teams cell to teams main color\r\n      if (i == 0) {\r\n        displayGameData += `<div class=\"boxscoreAwayStats\" style=\"background-color:${thisGamesAwayTeamColor}\">`;\r\n      } else {\r\n        displayGameData += `<div class=\"boxscoreAwayStats\">`;\r\n      }\r\n      // onto next rows\r\n      displayGameData += `${thisGamesAwayTeamStats[i]}`;\r\n      displayGameData += `</div>`;\r\n      // end boxscore container div\r\n      displayGameData += `</div>`;\r\n    }\r\n  \r\n    displayGameData += `<br>`;\r\n  \r\n    displayGameData += `<br>`;\r\n  \r\n    // div holding the players table\r\n    displayGameData += `<div id=\"boxscorePlayerStats\"></div>`;\r\n  \r\n    // display team stats below team logos\r\n    scoreboardDiv.innerHTML = displayGameData;\r\n  \r\n    // listener for the back button back to teams layout Page\r\n    document\r\n      .getElementById(\"gamesBoxscoreBackButton\")\r\n      .addEventListener(\"click\", getTeamsGameResults);\r\n    // end back button\r\n    // begin player stats data\r\n    let thisGamesPlayerStats = GamePlayerStats.filter(\r\n      (item) => item.GameID == gameNumber\r\n    );\r\n    let playersTable = [\r\n      \"Name\",\r\n      \"Goals\",\r\n      \"Assists\",\r\n      \"Points\",\r\n      \"Kicks\",\r\n      \"Passes\",\r\n      \"ShotsOnGoal\",\r\n      \"OwnGoals\",\r\n    ];\r\n    let fieldsLength = playersTable.length;\r\n    let thisGamesPlayerStatMAPS = [];\r\n    for (let i = 0; i < thisGamesPlayerStats.length; i++) {\r\n      thisGamesPlayerStatMAPS.push(\r\n        new Map(Object.entries(thisGamesPlayerStats[i]))\r\n      );\r\n      thisGamesPlayerStatMAPS[i].set(\r\n        \"Points\",\r\n        +thisGamesPlayerStatMAPS[i].get(\"Goals\") +\r\n          +thisGamesPlayerStatMAPS[i].get(\"Assists\")\r\n      );\r\n    }\r\n    function setPlayersBoxscoreTable(e) {\r\n      let sortBy;\r\n      if (e) {\r\n        sortBy = e.target.dataset.fieldName;\r\n      } else {\r\n        sortBy = \"Points\";\r\n      }\r\n      sortGroupedStats(thisGamesPlayerStatMAPS, sortBy);\r\n      let playerStatsContainer = document.querySelector(\"#boxscorePlayerStats\");\r\n      let playersData = \"\";\r\n      // begin players game stats table\r\n      playersData += `<table>`;\r\n      // html table thead\r\n      playersData += \"<thead><tr>\";\r\n      for (let i = 0; i < fieldsLength; i++) {\r\n        if (playersTable[i] == sortBy) {\r\n          playersData +=\r\n            `<th data-field-name=` + //data-fieldNames required for mobile layout\r\n            playersTable[i] +\r\n            ` class=\"w3-orange\">` +\r\n            playersTable[i] +\r\n            \"</th>\";\r\n        } else {\r\n          playersData +=\r\n            `<th data-field-name=` + //data-fieldNames required for mobile layout\r\n            playersTable[i] +\r\n            \" >\" +\r\n            playersTable[i] +\r\n            \"</th>\";\r\n        }\r\n      }\r\n      playersData += \"</tr></thead>\";\r\n      // end of html table header fields row\r\n      thisGamesPlayerStatMAPS.forEach((item) => {\r\n        // table data begins for each field\r\n        playersData += \"<tr>\";\r\n        for (let j = 0; j < fieldsLength; j++) {\r\n          if (playersTable[j] == sortBy) {\r\n            playersData +=\r\n              `<td data-field-name=` + //data-fieldNames required for mobile layout\r\n              playersTable[j] +\r\n              ` class=\"w3-yellow\">` + // add yellow background for sorted column points\r\n              item.get(playersTable[j]) +\r\n              \"</td>\";\r\n          } else if (playersTable[j] == \"Name\") {\r\n            if (\r\n              thisGamesHomeTeamPlayerNames.includes(\r\n                playersMAP.get(+item.get(\"PlayerID\"))\r\n              )\r\n            ) {\r\n              playersData +=\r\n                `<td data-field-name=` + //data-fieldNames required for mobile layout\r\n                playersTable[j] +\r\n                ` style=\"background-color:${thisGamesHomeTeamColor};color:#fff\">` +\r\n                playersMAP.get(+item.get(\"PlayerID\")) +\r\n                \"</td>\";\r\n            } else {\r\n              playersData +=\r\n                `<td data-field-name=` + //data-fieldNames required for mobile layout\r\n                playersTable[j] +\r\n                ` style=\"background-color:${thisGamesAwayTeamColor};color:#fff\">` +\r\n                playersMAP.get(+item.get(\"PlayerID\")) +\r\n                \"</td>\";\r\n            }\r\n          } else {\r\n            playersData +=\r\n              `<td data-field-name=` + //data-fieldNames required for mobile layout\r\n              playersTable[j] +\r\n              \" >\" +\r\n              item.get(playersTable[j]) +\r\n              \"</td>\";\r\n          }\r\n        }\r\n  \r\n        playersData += \"</tr>\";\r\n      });\r\n      playersData += `</table>`;\r\n      playerStatsContainer.innerHTML = playersData;\r\n      let browserWidth = window.innerWidth;\r\n      if (browserWidth < 982) {\r\n        let mobileTableCells = document.querySelectorAll(\r\n          \"#boxscorePlayerStats td\"\r\n        );\r\n        let eachCell = Array.from(mobileTableCells);\r\n        eachCell.forEach((field) =>\r\n          field.addEventListener(\"click\", setPlayersBoxscoreTable)\r\n        );\r\n      } else {\r\n        let getFieldNames = document.querySelectorAll(\"#boxscorePlayerStats th\");\r\n        let headers = Array.from(getFieldNames);\r\n        headers.forEach((field) =>\r\n          field.addEventListener(\"click\", setPlayersBoxscoreTable)\r\n        );\r\n      }\r\n    }\r\n    setPlayersBoxscoreTable();\r\n    // end players game stats table\r\n  }\r\n  \r\n  //end data containers","import TeamStats from \"../classFiles/teamStats\";\r\nimport teamsMAP from \"../var_lib/maps/teams/teamsMAP\";\r\nimport setHeaderBanner from \"./setHeaderBanner\";\r\nimport clearTablesDiv from \"../tables/clearTablesDiv\";\r\nimport teamsColorMAP from \"../var_lib/maps/teams/teamsColorMAP\";\r\nimport eachTeamObjectMAP from \"../var_lib/maps/teams/eachTeamObjectMAP\";\r\nimport setTeamsPageLayout from \"./setTeamsPageLayout\";\r\nimport setGifs from \"./setGifs\"\r\nimport setGamesData from \"./singleGameStats\"\r\nimport { Teams, Gifs } from \"../../constants/masterHaxData\";\r\n\r\nexport default function getTeamsGameResults(e) {\r\n    let team = e.target.dataset.teamName;\r\n    let teamImage = e.target.dataset.teamLogo;\r\n    let seasonNum = e.target.dataset.seasonNum;\r\n    let gameType = e.target.dataset.gameType; // 1=\"Season\" 2=\"Playoff\"\r\n  \r\n    let teamsGames;\r\n    let thisGamesGifs;\r\n    let gameResults = \"\";\r\n    let gameResultsBoxResult = \"\";\r\n    let win = \"W\";\r\n    let loss = \"L\";\r\n    let draw = \"D\";\r\n    let overTimeWin = \"OTW\";\r\n    let overTimeLoss = \"OTL\";\r\n    teamsGames =\r\n      TeamStats.allTeamStats[team][\r\n        \"teamsSeason\" + seasonNum + gameType + \"Stats\"\r\n      ][0];\r\n    let gamesLength = teamsGames.length;\r\n    gameResults = `<button id=\"gameResultsBackButton\" class=\"w3-btn w3-round-large\" style=\"background-color:#${teamsColorMAP.get(\r\n      team\r\n    )}; color: #ffffff;\" data-team-name=\"${team}\" data-team-logo=\"${teamImage}\" data-season-num=\"${seasonNum}\">back</button>`;\r\n    gameResults += `<h1>${team}</h1>`;\r\n    gameResults += `<h4>S0${seasonNum} ${gameType}</h4>`;\r\n    if (gamesLength > 0) {\r\n      for (let i = 0; i < gamesLength; i++) {\r\n        gameResults += `<div style=\"display: flex; justify-content: center\">`;\r\n        // class gameResults is containing grid\r\n        gameResults += `<div class=\"w3-container w3-margin gameResults\">`;\r\n        // homeTeam logo\r\n        gameResults += `<div class=\"homeTeamLogo w3-card w3-blue\">`;\r\n        if (team == `${teamsMAP.get(+teamsGames[i].TeamOne)}`) {\r\n          gameResults += `<img src=${teamImage} style=\"width:85%;height:85%;\">`;\r\n        } else {\r\n          let otherTeam = `${teamsMAP.get(+teamsGames[i].TeamOne)}`;\r\n          let otherTeamsObject = Teams.filter(\r\n            (item) => item.TeamName == otherTeam\r\n          );\r\n          let otherTeamsLogo =\r\n            eachTeamObjectMAP.get(otherTeam)[`S0${seasonNum}HomeFilePath`];\r\n          gameResults += `<img src=${otherTeamsLogo} style=\"width:85%;height:85%;\">`;\r\n        }\r\n        gameResults += `</div>`;\r\n        // homeTeam name\r\n        gameResults += `<div class=\"homeTeam\"`;\r\n        if (team == `${teamsMAP.get(+teamsGames[i].TeamOne)}`) {\r\n          gameResults += `style=\"background-color: #${teamsColorMAP.get(\r\n            team\r\n          )}; color: #ffffff;\">`;\r\n        } else {\r\n          let otherTeam = `${teamsMAP.get(+teamsGames[i].TeamOne)}`;\r\n          gameResults += `style=\"background-color: #${teamsColorMAP.get(\r\n            otherTeam\r\n          )}; color: #ffffff;\">`;\r\n        }\r\n        gameResults += `${teamsMAP.get(+teamsGames[i].TeamOne)}`;\r\n        gameResults += `</div>`;\r\n        // homeScore\r\n        if (+`${teamsGames[i].TeamOneScore}` > +`${teamsGames[i].TeamTwoScore}`) {\r\n          gameResults += `<div class=\"homeScore w3-green\">`;\r\n        } else if (\r\n          +`${teamsGames[i].TeamOneScore}` == +`${teamsGames[i].TeamTwoScore}`\r\n        ) {\r\n          gameResults += `<div class=\"homeScore w3-dark-gray\">`;\r\n        } else {\r\n          gameResults += `<div class=\"homeScore w3-red\">`;\r\n        }\r\n        gameResults += `${+teamsGames[i].TeamOneScore}`;\r\n        gameResults += `</div>`;\r\n        // awayTeam\r\n        gameResults += `<div class=\"awayTeam\"`;\r\n        if (team == `${teamsMAP.get(+teamsGames[i].TeamTwo)}`) {\r\n          gameResults += `style=\"background-color: #${teamsColorMAP.get(\r\n            team\r\n          )}; color: #ffffff;\">`;\r\n        } else {\r\n          let otherTeam = `${teamsMAP.get(+teamsGames[i].TeamTwo)}`;\r\n          gameResults += `style=\"background-color: #${teamsColorMAP.get(\r\n            otherTeam\r\n          )}; color: #ffffff;\">`;\r\n        }\r\n        gameResults += ` ${teamsMAP.get(+teamsGames[i].TeamTwo)}`;\r\n        gameResults += `</div>`;\r\n        // awayTeam logo\r\n        gameResults += `<div class=\"awayTeamLogo w3-card w3-blue\">`;\r\n        if (team == `${teamsMAP.get(+teamsGames[i].TeamTwo)}`) {\r\n          gameResults += `<img src=${teamImage} style=\"width:85%;height:85%;\">`;\r\n        } else {\r\n          let otherTeam = `${teamsMAP.get(+teamsGames[i].TeamTwo)}`;\r\n          let otherTeamsObject = Teams.filter(\r\n            (item) => item.TeamName == otherTeam\r\n          );\r\n          let otherTeamsLogo =\r\n            eachTeamObjectMAP.get(otherTeam)[`S0${seasonNum}HomeFilePath`];\r\n          gameResults += `<img src=${otherTeamsLogo} style=\"width:85%;height:85%;\">`;\r\n        }\r\n        gameResults += `</div>`;\r\n        // awayTeam score\r\n        if (+`${teamsGames[i].TeamOneScore}` < +`${teamsGames[i].TeamTwoScore}`) {\r\n          gameResults += `<div class=\"awayScore w3-green\">`;\r\n        } else if (\r\n          +`${teamsGames[i].TeamTwoScore}` == +`${teamsGames[i].TeamOneScore}`\r\n        ) {\r\n          gameResults += `<div class=\"awayScore w3-dark-gray\">`;\r\n        } else {\r\n          gameResults += `<div class=\"awayScore w3-red\">`;\r\n        }\r\n        gameResults += `${+teamsGames[i].TeamTwoScore}`;\r\n        gameResults += `</div>`;\r\n        // gameResult div\r\n        if (team == `${teamsMAP.get(+teamsGames[i].TeamOne)}`) {\r\n          if (\r\n            +`${teamsGames[i].TeamOneScore}` > +`${teamsGames[i].TeamTwoScore}` &&\r\n            `${teamsGames[i].ExtraTime}` == \"No\"\r\n          ) {\r\n            gameResults += `<div class=\"gameResultsBox w3-green\">`;\r\n            gameResultsBoxResult = win;\r\n          } else if (\r\n            +`${teamsGames[i].TeamOneScore}` > +`${teamsGames[i].TeamTwoScore}` &&\r\n            `${teamsGames[i].ExtraTime}` == \"Yes\"\r\n          ) {\r\n            gameResults += `<div class=\"gameResultsBox w3-blue\">`;\r\n            gameResultsBoxResult = overTimeWin;\r\n          } else if (\r\n            +`${teamsGames[i].TeamOneScore}` == +`${teamsGames[i].TeamTwoScore}`\r\n          ) {\r\n            gameResults += `<div class=\"gameResultsBox w3-grey\">`;\r\n            gameResultsBoxResult = draw;\r\n          } else if (\r\n            +`${teamsGames[i].TeamOneScore}` < +`${teamsGames[i].TeamTwoScore}` &&\r\n            `${teamsGames[i].ExtraTime}` == \"Yes\"\r\n          ) {\r\n            gameResults += `<div class=\"gameResultsBox w3-grey\">`;\r\n            gameResultsBoxResult = overTimeLoss;\r\n          } else {\r\n            gameResults += `<div class=\"gameResultsBox w3-red\">`;\r\n            gameResultsBoxResult = loss;\r\n          }\r\n        } else {\r\n          if (team == `${teamsMAP.get(+teamsGames[i].TeamTwo)}`) {\r\n            if (\r\n              +`${teamsGames[i].TeamTwoScore}` >\r\n                +`${teamsGames[i].TeamOneScore}` &&\r\n              `${teamsGames[i].ExtraTime}` == \"No\"\r\n            ) {\r\n              gameResults += `<div class=\"gameResultsBox w3-green\">`;\r\n              gameResultsBoxResult = win;\r\n            } else if (\r\n              +`${teamsGames[i].TeamTwoScore}` >\r\n                +`${teamsGames[i].TeamOneScore}` &&\r\n              `${teamsGames[i].ExtraTime}` == \"Yes\"\r\n            ) {\r\n              gameResults += `<div class=\"gameResultsBox w3-blue\">`;\r\n              gameResultsBoxResult = overTimeWin;\r\n            } else if (\r\n              +`${teamsGames[i].TeamTwoScore}` == +`${teamsGames[i].TeamOneScore}`\r\n            ) {\r\n              gameResults += `<div class=\"gameResultsBox w3-grey\">`;\r\n              gameResultsBoxResult = draw;\r\n            } else if (\r\n              +`${teamsGames[i].TeamTwoScore}` <\r\n                +`${teamsGames[i].TeamOneScore}` &&\r\n              `${teamsGames[i].ExtraTime}` == \"Yes\"\r\n            ) {\r\n              gameResults += `<div class=\"gameResultsBox w3-grey\">`;\r\n              gameResultsBoxResult = overTimeLoss;\r\n            } else {\r\n              gameResults += `<div class=\"gameResultsBox w3-red\">`;\r\n              gameResultsBoxResult = loss;\r\n            }\r\n          }\r\n        }\r\n        gameResults += gameResultsBoxResult;\r\n        gameResults += `</div>`;\r\n        // end gameResult div\r\n        // this games highlight gifs div\r\n        thisGamesGifs = Gifs.filter(\r\n          (gifItem) => gifItem.GameID == teamsGames[i].GameID\r\n        );\r\n        gameResults += `<div data-game-highlights data-team-name=\"${team}\" data-game-id=\"${teamsGames[i].GameID}\" data-game-type=\"${gameType}\" data-team-logo=\"${teamImage}\" class=\"gameHighlights\">`;\r\n        gameResults += `Game Highlights (${thisGamesGifs.length})`;\r\n        gameResults += `</div>`;\r\n        // end hightlights gif div\r\n        // this games stats **NOTE data-game-stats=\"\" used to grab element by attribute by CSS\r\n        gameResults += `<div data-game-stats=\"\" data-team-name=\"${team}\" data-game-id=\"${teamsGames[i].GameID}\" data-team-logo=\"${teamImage}\" data-season-number=\"${seasonNum}\" data-game-type=${gameType}\" class=\"gameStats\">`;\r\n        gameResults += `Stats`;\r\n        gameResults += `</div>`;\r\n        // end this games stats\r\n  \r\n        gameResults += `</div>`;\r\n        gameResults += `</div>`;\r\n      }\r\n    } else {\r\n      gameResults += `<h4>No games played</h4>`;\r\n    }\r\n  \r\n    // change header banner when team is selected from navbar\r\n    setHeaderBanner(teamImage, team);\r\n  \r\n    // change bodies background color to that of team selected\r\n    document.body.style.backgroundColor = `#${teamsColorMAP.get(team)}`;\r\n  \r\n    // display data in correct div and clear previous data\r\n    clearTablesDiv();\r\n    let scores = document.getElementById(\"scoreboardDiv\");\r\n    scores.innerHTML = gameResults;\r\n    // listener for the back button back to teams layout Page\r\n    document\r\n      .getElementById(\"gameResultsBackButton\")\r\n      .addEventListener(\"click\", setTeamsPageLayout);\r\n    // end back button\r\n    // highlight divs\r\n    let gameHighlightDivs = Array.from(\r\n      document.querySelectorAll(\"div[data-game-highlights]\")\r\n    );\r\n  \r\n    gameHighlightDivs.forEach((item) => item.addEventListener(\"click\", setGifs));\r\n    //end highlights div\r\n    // single games result div\r\n    let gameResultsDataDiv = Array.from(\r\n      document.querySelectorAll(\"div[data-game-stats]\")\r\n    );\r\n    gameResultsDataDiv.forEach((item) =>\r\n      item.addEventListener(\"click\", setGamesData)\r\n    );\r\n    //end single games results div\r\n  }","import clearTablesDiv from \"../tables/clearTablesDiv\";\r\nimport clearScoreboardDiv from \"../scoreboard/clearScoreboardDiv\";\r\nimport getTablesDiv from \"../tables/getTablesDiv\";\r\nimport eachTeamObjectMAP from \"../var_lib/maps/teams/eachTeamObjectMAP\";\r\nimport setTeamsPageLayout from \"../layouts/setTeamsPageLayout\";\r\n\r\nexport default function teamColorsPage(e) {\r\n    clearTablesDiv();\r\n    clearScoreboardDiv();\r\n    getTablesDiv();\r\n    let team = e.target.dataset.teamName;\r\n    // let seasonNum = \"01\";\r\n    let seasonNum = e.target.dataset.seasonNum;\r\n    let teamLogoSrc = eachTeamObjectMAP.get(team)[`S0${seasonNum}HomeFilePath`];\r\n    let homeColorScheme = eachTeamObjectMAP.get(team)[`S0${seasonNum}Home`];\r\n    let awayTeamLogo = eachTeamObjectMAP.get(team)[`S0${seasonNum}AwayFilePath`];\r\n    let awayColorScheme = eachTeamObjectMAP.get(team)[`S0${seasonNum}Away`];\r\n    let teamLogosLayout;\r\n    let tLL = teamLogosLayout;\r\n    // teamsColorsLayout is grid containing class\r\n    tLL = `<div class=\"w3-container w3-margin teamColorsLayout\">`;\r\n    //  back button\r\n    tLL += `<button id=\"teamColorsBackButton\" class=\"w3-btn w3-round-large colorsBackButton\" style=\"background-color:#${\r\n      eachTeamObjectMAP.get(team).MainColor\r\n    }; color: #ffffff;\" data-team-name=\"${team}\" data-team-logo=\"${teamLogoSrc}\" data-season-num=\"${seasonNum}\">back</button>`;\r\n    // teamColorsLayout class that contains the title in colors layout\r\n    tLL += `<div class=\"teamColorsHeader w3-blue w3-round-large\">`;\r\n    tLL += `<h4 class=\"w3-text-black\">Copy teams color to clipboard</h4>`;\r\n    tLL += `</div>`;\r\n    // teamColorsLayout body of layout containing team logos\r\n    // begin flex items containing team logo cards\r\n    // opening teamColorsHomeContent\r\n    tLL += `<div class=\"teamColorsHomeContent w3-container w3-padding w3-blue w3-round-large\">`;\r\n    tLL += `<div class=\"w3-card-4 w3-padding w3-yellow w3-round-large\">`;\r\n    tLL += `<div><h5>Home</h5></div>`;\r\n    tLL += `<img src=\"${teamLogoSrc}\">`;\r\n    // container holding red blue buttons\r\n    tLL += `<div class=\"w3-container w3-padding redBlue\">`;\r\n    // red button container\r\n    tLL += `<div data-color-scheme=\"${\r\n      \"/colors red\" + \" \" + homeColorScheme\r\n    }\" class=\"w3-padding w3-round w3-center w3-red red\">`;\r\n    tLL += `left`;\r\n    // closing red button container\r\n    tLL += `</div>`;\r\n    // blue button container\r\n    tLL += `<div data-color-scheme=\"${\r\n      \"/colors blue\" + \" \" + homeColorScheme\r\n    }\" class=\"w3-padding w3-round w3-center w3-blue blue\">`;\r\n    tLL += `right`;\r\n    // closing blue button container\r\n    tLL += `</div>`;\r\n    // closing red blue container\r\n    tLL += `</div>`;\r\n    // closing card containing logo\r\n    tLL += `</div>`;\r\n    //closing teamColorsHomeContent\r\n    tLL += `</div>`;\r\n    // opening teamColorsAwayContent\r\n    tLL += `<div class=\"teamColorsAwayContent w3-container w3-padding w3-blue w3-round-large\">`;\r\n    tLL += `<div class=\"w3-card-4 w3-padding w3-yellow w3-round-large\">`;\r\n    tLL += `<div><h5>Alternate</h5></div>`;\r\n    tLL += `<img src=\"${awayTeamLogo}\">`;\r\n    // container holding red blue buttons\r\n    tLL += `<div class=\"w3-container w3-padding redBlue\">`;\r\n    // red button container\r\n    tLL += `<div data-color-scheme=\"${\r\n      \"/colors red\" + \" \" + awayColorScheme\r\n    }\" class=\"w3-padding w3-round w3-center w3-red red\">`;\r\n    tLL += `left`;\r\n    // closing red button container\r\n    tLL += `</div>`;\r\n    // blue button container\r\n    tLL += `<div data-color-scheme=\"${\r\n      \"/colors blue\" + \" \" + awayColorScheme\r\n    }\" class=\"w3-padding w3-round w3-center w3-blue blue\">`;\r\n    tLL += `right`;\r\n    // closing blue button container\r\n    tLL += `</div>`;\r\n    // closing red blue container\r\n    tLL += `</div>`;\r\n    // closing card containing logo\r\n    tLL += `</div>`;\r\n    //closing teamColorsAwayContent\r\n    tLL += `</div>`;\r\n    //closing teamColorsLayout\r\n    tLL += `</div>`;\r\n  \r\n    tablesDiv.innerHTML += `${tLL}`;\r\n  \r\n    // create function to copy color red/blue scheme\r\n  \r\n    document\r\n      .getElementById(\"teamColorsBackButton\")\r\n      .addEventListener(\"click\", setTeamsPageLayout);\r\n    // end back button\r\n  \r\n    function getColorScheme(e) {\r\n      let scheme = e.target.dataset.colorScheme;\r\n      navigator.clipboard.writeText(scheme);\r\n    }\r\n  \r\n    // set listeners on newly created red/blue button elements\r\n    let redBlueButtons = document.querySelectorAll(\"div[data-color-scheme]\");\r\n    redBlueButtons.forEach((item) =>\r\n      item.addEventListener(\"click\", getColorScheme)\r\n    );\r\n  }","import clearTablesDiv from \"../tables/clearTablesDiv\";\r\nimport getTablesDiv from \"../tables/getTablesDiv\";\r\nimport closeSidebar from \"../sidebar/closeSidebar\";\r\nimport clearScoreboardDiv from \"../scoreboard/clearScoreboardDiv\";\r\nimport TeamStats from \"../classFiles/teamStats\";\r\nimport setHeaderBanner from \"./setHeaderBanner\";\r\nimport teamsColorMAP from \"../var_lib/maps/teams/teamsColorMAP\"\r\nimport getTeamsPlayersPerSeason from \"./teamPlayerList\";\r\nimport getTeamsGameResults from \"./getTeamsGamesResults\";\r\nimport teamColorsPage from \"./teamsColorsPage\";\r\nimport { SEASONS_WITH_TIE_GAMES } from \"../../constants/consts/vars\";\r\n\r\nexport default function setTeamsPageLayout(e) {\r\n    clearTablesDiv();\r\n    clearScoreboardDiv();\r\n    closeSidebar();\r\n    getTablesDiv();\r\n    let team = e.target.dataset.teamName;\r\n    let teamLogoSrc;\r\n    if (e.target.src) {\r\n      teamLogoSrc = e.target.src;\r\n    } else {\r\n      teamLogoSrc = e.target.dataset.teamLogo;\r\n    }\r\n    let seasonNum = e.target.dataset.seasonNum;\r\n    let teamsSeasonObject =\r\n      TeamStats.allTeamStats[team][`teamsSeason${seasonNum}SeasonStatsMAP`];\r\n    let wins = teamsSeasonObject.get(\"Wins\");\r\n    let losses = teamsSeasonObject.get(\"Losses\");\r\n    let draws = \"\";\r\n    if (SEASONS_WITH_TIE_GAMES.includes(+seasonNum)) {\r\n      draws = teamsSeasonObject.get(\"Draws\");\r\n    } else {\r\n      draws = teamsSeasonObject.get(\"OTL\");\r\n    }\r\n    // class teamsLayout is grid container\r\n    let teamsLayout;\r\n    // 4 divs make up the grid. (teamName, gameType, notes, scoreboard and teamColors)\r\n    teamsLayout = `<div class=\"w3-container w3-margin teamsLayout\">`;\r\n    // team name grid area\r\n    teamsLayout += `<div class=\"teamName\">`;\r\n    teamsLayout += `<h1>${team}</h1>`;\r\n    teamsLayout += `</div>`;\r\n    // gametype grid area\r\n    teamsLayout += `<div class=\"gameType\">`;\r\n    teamsLayout += `<h3>Season ${seasonNum}</h3>`;\r\n    teamsLayout += `</div>`;\r\n    // teams season record grid area\r\n    teamsLayout += `<div class=\"teamRecord\">`;\r\n    // draws will refer to either a tie or OTL depending on that season if it has ties or not\r\n    teamsLayout += `<h3>(${wins} - ${losses} - ${draws})</h3>`;\r\n    teamsLayout += `</div>`;\r\n  \r\n    // players grid area\r\n    teamsLayout += `<div\r\n     data-team-name=\"${team}\"\r\n     data-team-logo=\"${teamLogoSrc}\"\r\n     data-season-num=\"${seasonNum}\"\r\n     data-game-type=\"Season\"\r\n     class=\"w3-round w3-green players\"\r\n     >`;\r\n    teamsLayout += `Players`;\r\n    teamsLayout += `</div>`;\r\n    // notes grid area **bottom of webpage**\r\n    teamsLayout += `<div class=\"notes\">`;\r\n    // teamsLayout += `<h5>More options will be placed here</h5>`;\r\n    teamsLayout += `</div>`;\r\n    // season scoreboard grid area\r\n    teamsLayout += `<div\r\n      data-team-name=\"${team}\"\r\n      data-team-logo=\"${teamLogoSrc}\"\r\n      data-season-num=\"${seasonNum}\"\r\n      data-game-type=\"Season\"\r\n      class=\"w3-round seasonScoreboard\"\r\n      >`;\r\n    teamsLayout += `Season Results`;\r\n    teamsLayout += `</div>`;\r\n    // playoff scoreboard grid area\r\n    teamsLayout += `<div\r\n      data-team-name=\"${team}\"\r\n      data-team-logo=\"${teamLogoSrc}\"\r\n      data-season-num=\"${seasonNum}\"\r\n      data-game-type=\"Playoff\"\r\n      class=\"w3-round playoffScoreboard\"\r\n      >`;\r\n    teamsLayout += `Playoff Results`;\r\n    teamsLayout += `</div>`;\r\n    // teamColors grid area\r\n    teamsLayout += `<div\r\n      data-team-name=\"${team}\"\r\n      data-season-num=\"${seasonNum}\"\r\n      style=\"background-color: #${teamsColorMAP.get(team)}\"\r\n      class=\"w3-round teamColors\"\r\n    >`;\r\n    teamsLayout += `Team Colors`;\r\n    teamsLayout += `</div>`;\r\n    teamsLayout += `</div>`;\r\n    tablesDiv.innerHTML = teamsLayout;\r\n  \r\n    // change header banner when team is selected from navbar\r\n    setHeaderBanner(teamLogoSrc, team);\r\n  \r\n    // change bodies background color to that of team selected\r\n    document.body.style.backgroundColor = `#${teamsColorMAP.get(team)}`;\r\n    // sets tables for that teams players stats for that season\r\n    let playersArea = document.querySelector(\".players\");\r\n    playersArea.addEventListener(\"click\", getTeamsPlayersPerSeason);\r\n    let teamColorsArea = document.querySelector(\".teamColors\");\r\n    teamColorsArea.style.backgroundColor = `#${teamsColorMAP.get(team)}`;\r\n    // set listeners on newly created elements (buttons) once entering teams layout page\r\n    let seasonGamesResultsArea = document.querySelector(\".seasonScoreboard\");\r\n    seasonGamesResultsArea.addEventListener(\"click\", getTeamsGameResults);\r\n    let playoffGamesResultsArea = document.querySelector(\".playoffScoreboard\");\r\n    playoffGamesResultsArea.addEventListener(\"click\", getTeamsGameResults);\r\n    teamColorsArea.addEventListener(\"click\", teamColorsPage);\r\n  }","import setTeamsPageLayout from \"../../layouts/setTeamsPageLayout\";\r\n\r\nexport default function setListenersMainNavbar() {\r\n    let getTeamsFromNavBar = document.querySelectorAll(\"img[data-team-name]\");\r\n    getTeamsFromNavBar.forEach((item) =>\r\n      // item.addEventListener(\"click\", getTeamsGameResults)\r\n      item.addEventListener(\"click\", setTeamsPageLayout)\r\n    );\r\n  }","// this function is run in listeners.js\r\n\r\nimport eachTeamObjectMAP from \"../var_lib/maps/teams/eachTeamObjectMAP\"\r\nimport eachSeasonsTeamsMAP from \"../var_lib/maps/teams/eachSeasonsTeamsMAP\"\r\nimport setListenersMainNavbar from \"../listeners/listenerHelpers/setListenersMainNavbar\";\r\nimport currentSeason from \"../var_lib/season/currentSeason\";\r\n  \r\n  export default function setMainNavbar(season) {\r\n    // season can be 0 when choosing all time player stats from menu\r\n    // season can become undefined when resizing the screen when all time player stats are showing\r\n    if(season === 0 || season == undefined){\r\n      season = currentSeason\r\n    }\r\n    let screenWidth = window.innerWidth;\r\n    const teamsThisSeason = eachSeasonsTeamsMAP.get(season).length;\r\n    let navbarContainer = document.querySelector(\"#teamsNavbar > section\");\r\n    let navbarContent = \"\";\r\n    // if statement to prevent to many team logos which appear too small on one navbar\r\n    if (teamsThisSeason > 5 && screenWidth < 500) {\r\n      // this is for more teams than 5 which on mobile becomes to crowded\r\n      navbarContainer.style.flexDirection = \"column\";\r\n      navbarContent += `<div>`; // container for first row of teams\r\n      for (let i = 0; i < teamsThisSeason / 2; i++) {\r\n        // first row of teams\r\n        let imageSource = eachTeamObjectMAP.get(\r\n          eachSeasonsTeamsMAP.get(season)[i]\r\n        )[`S0${season}HomeFilePath`];\r\n        // setLayout defined below\r\n        navbarContent = setLayout(imageSource, navbarContent, season, i);\r\n      }\r\n      navbarContent += `</div>`; // end first row of teams container\r\n      navbarContent += `<div>`; // container for second row of teams\r\n      // second row of teams\r\n      for (let i = teamsThisSeason / 2; i < teamsThisSeason; i++) {\r\n        let imageSource = eachTeamObjectMAP.get(\r\n          eachSeasonsTeamsMAP.get(season)[i]\r\n        )[`S0${season}HomeFilePath`];\r\n        // setLayout defined below\r\n        navbarContent = setLayout(imageSource, navbarContent, season, i);\r\n      }\r\n      navbarContent += `</div>`; // end second row of teams container\r\n    } else {\r\n      navbarContainer.style.flexDirection = \"row\";\r\n      // else less than 5 teams looks good on mobile\r\n      for (let i = 0; i < teamsThisSeason; i++) {\r\n        let imageSource = eachTeamObjectMAP.get(\r\n          eachSeasonsTeamsMAP.get(season)[i]\r\n        )[`S0${season}HomeFilePath`];\r\n        // setLayout defined below\r\n        navbarContent = setLayout(imageSource, navbarContent, season, i);\r\n      }\r\n    }\r\n  \r\n    navbarContainer.innerHTML = navbarContent;\r\n    setListenersMainNavbar();\r\n  }\r\n  \r\n  function setLayout(imageSource, element, season, id) {\r\n    let image = imageSource;\r\n    element += `<div class=\"w3-container w3-cell w3-cell-middle\">`; // begin first div\r\n    element += `<div class=\"w3-card-4 w3-blue w3-round-xlarge w3-padding-small w3-section\">`; // begin second div\r\n    element += `<div>`; // begin third div\r\n  \r\n    element += `<img \r\n        src=\"${image}\" \r\n        alt=\"${eachSeasonsTeamsMAP.get(season)[id]}\" \r\n        data-team-name=\"${eachSeasonsTeamsMAP.get(season)[id]}\" \r\n        data-season-num=\"${season}\"\r\n        class=\"w3-image navLogo\"\r\n        >`;\r\n  \r\n    element += `</div>`; // end third div\r\n    element += `</div>`; // end second div\r\n    element += `</div>`; // end first div\r\n    return element;\r\n  }","import currentSeason from \"../var_lib/season/currentSeason\";\r\nimport TeamStats from \"../classFiles/teamStats\"\r\nimport { homePageFieldsNoTies } from \"../../constants/consts/supportVars\";\r\nimport setTableListeners from \"../listeners/listenerHelpers/setTableListeners\";\r\nimport setMainNavbar from \"../layouts/setMainNavbar\";\r\nimport createTable from \"./createTable\";\r\nimport { DEFENDING_CHAMPS, DEFENDING_CHAMPS_LOGO } from \"../../constants/consts/vars\";\r\nimport setHeaderBanner from \"../layouts/setHeaderBanner\";\r\n\r\nexport default function setHomeTable() {\r\n  const key = `groupTeamsSeason${currentSeason}SeasonStats`\r\n    createTable(\r\n      currentSeason,\r\n      `Season ${currentSeason} Standings`,\r\n      `TeamStats.groupTeamsSeason${currentSeason}SeasonStats`,\r\n      TeamStats[key],\r\n      \"w3-yellow\",\r\n      \"Points\",\r\n      \"homePageFieldsNoTies\",\r\n      homePageFieldsNoTies\r\n    );\r\n    setTableListeners();\r\n    setMainNavbar(currentSeason);\r\n    // reset background color when navigating back home from a teams layout page\r\n    document.body.style.backgroundColor = \"#2196f3\";\r\n    setHeaderBanner(DEFENDING_CHAMPS_LOGO, DEFENDING_CHAMPS)\r\n  }","import sortTable from \"./sortTable\";\r\nimport setTeamsTableBgColor from \"./setTeamsTableBgColor\";\r\n\r\nexport default function screenResize() {\r\n  // insert fetch data function onto <TD> elements in mobile view\r\n  let screenSize = window.innerWidth;\r\n  let teamPlayersDataSource = document.getElementById(\"playerStatsBackButton\");\r\n  if (!teamPlayersDataSource) {\r\n    let regularScreen = document.querySelectorAll(\"#tablesDiv table th\");\r\n    let mobileTableData = document.querySelectorAll(\"#tablesDiv table td\");\r\n    if (screenSize < 993) {\r\n      mobileTableData.forEach((item) =>\r\n        item.addEventListener(\"click\", sortTable)\r\n      );\r\n      setTeamsTableBgColor();\r\n    } else {\r\n      regularScreen.forEach((item) =>\r\n        item.addEventListener(\"click\", sortTable)\r\n      );\r\n    }\r\n  }\r\n}\r\n","import setMainNavbar from \"../layouts/setMainNavbar\";\r\nimport screenResize from \"./screenResize\";\r\nimport getTeamsPlayersPerSeason from \"../layouts/teamPlayerList\";\r\n\r\nfunction resizeEventMethod() {\r\n  // screen size for navbar layout adapting to a screen resize event\r\n  const screenWidth = window.innerWidth;\r\n  const tableCaption = document.querySelector(\r\n    `#tablesDiv > table > caption > h1`\r\n  );\r\n    // 7 is season number position on home page table which is the current season\r\n    let getSeasonNumber;\r\n    if(tableCaption){\r\n      getSeasonNumber = +tableCaption.textContent[7]\r\n      if (isNaN(getSeasonNumber)) {\r\n        // 2 is season number position for tables not on the home page\r\n        getSeasonNumber = +tableCaption.textContent[2];\r\n      }\r\n    } \r\n    // season number can become lost resulting in undefined\r\n    if(tableCaption == undefined){\r\n      const getSeasonNumberFromNavbarDataAttribute = +document.querySelectorAll(\"img[data-team-name]\")[0].dataset.seasonNum;\r\n      getSeasonNumber = getSeasonNumberFromNavbarDataAttribute\r\n    }\r\n    if (screenWidth < 500) {\r\n      // this if checks for players all time stats as these table headers do not contain a number\r\n      if (isNaN(getSeasonNumber)) {\r\n        setMainNavbar();\r\n      } else {\r\n        // if mobile screen and more teams than 5 then add another row to navbar teams layout\r\n        setMainNavbar(getSeasonNumber);\r\n      }\r\n    } else if (screenWidth > 500) {\r\n      // this if checks for players all time stats as these table headers do not contain a number\r\n      if (isNaN(getSeasonNumber)) {\r\n        setMainNavbar();\r\n      } else {\r\n        // if mobile screen and more teams than 5 then add another row to navbar teams layout\r\n        setMainNavbar(getSeasonNumber);\r\n      }\r\n    }\r\n    // end navbar layout\r\n    // this is for on teams page players list and there respective stats tables\r\n    let getTeamPlayerSeasonTable = document.querySelectorAll(\r\n      \"#teamPlayerSeasonTable\"\r\n    );\r\n    let getTeamPlayerPlayoffTable = document.querySelectorAll(\r\n      \"#teamPlayerPlayoffTable\"\r\n    );\r\n    let getTeamPlayerCombinedTable = document.querySelectorAll(\r\n      \"#teamPlayerCombinedTable\"\r\n    );\r\n      if (getTeamPlayerSeasonTable.length == 0) {\r\n        screenResize();\r\n      } else {\r\n        let teamPlayerBackButton = document.getElementById(\"playerStatsBackButton\");\r\n        // e is undefined so given value of false\r\n        // 2nd, 3rd and 4th arguments\r\n        let team = teamPlayerBackButton.dataset.teamName;\r\n        let seasonNumber = teamPlayerBackButton.dataset.seasonNum;\r\n        let teamLogo = teamPlayerBackButton.dataset.teamLogo;\r\n        // 5th argument season table\r\n        let getSeasonTableData = document.querySelectorAll(\r\n          \"#teamPlayerSeasonTable td[class='w3-yellow']\"\r\n        );\r\n        let getSeasonSelectedField = getSeasonTableData[0].dataset.fieldName;\r\n        // 6th argument playoff table\r\n        let getPlayoffSelectedField;\r\n        if (getTeamPlayerPlayoffTable.length > 0) {\r\n          let getPlayoffTableData = document.querySelectorAll(\r\n            \"#teamPlayerPlayoffTable td[class='w3-yellow']\"\r\n          );\r\n          getPlayoffSelectedField = getPlayoffTableData[0].dataset.fieldName;\r\n        } else {\r\n          getPlayoffSelectedField = \"Points\";\r\n        }\r\n        // 7th argument\r\n        let getCombinedSelectedField;\r\n        if (getTeamPlayerCombinedTable.length > 0) {\r\n          let getCombinedTableData = document.querySelectorAll(\r\n            \"#teamPlayerCombinedTable td[class='w3-yellow']\"\r\n          );\r\n          getCombinedSelectedField = getCombinedTableData[0].dataset.fieldName;\r\n        } else {\r\n          getCombinedSelectedField = \"Points\";\r\n        }\r\n    \r\n        getTeamsPlayersPerSeason(\r\n          false,\r\n          team,\r\n          seasonNumber,\r\n          teamLogo,\r\n          getSeasonSelectedField,\r\n          getPlayoffSelectedField,\r\n          getCombinedSelectedField\r\n        );\r\n      }\r\n}\r\n\r\n  export default resizeEventMethod;","function openSidebar() {\r\n    document.getElementById(\"sidebar\").style.display = \"block\";\r\n  }\r\n\r\nexport default openSidebar;","const playersTables = document.querySelectorAll(\".playerTable\");\r\n\r\nexport default function hidePlayerSubMenu() {\r\n    playersTables.forEach((item) => item.classList.add(\"w3-hide\"));\r\n  }","const teamsTables = document.querySelectorAll(\".teamTable\");\r\n\r\nexport default function hideTeamSubMenu() {\r\n    teamsTables.forEach((item) => item.classList.add(\"w3-hide\"));\r\n  }","import hidePlayerSubMenu from \"./players/hidePlayerSubMenu\";\r\nimport hideTeamSubMenu from \"./teams/hideTeamSubMenu\"\r\n\r\nexport default function hideAllSubMenus() {\r\n    hideTeamSubMenu();\r\n    hidePlayerSubMenu();\r\n  }","const teamsTables = document.querySelectorAll(\".teamTable\");\r\n\r\nexport default function displayTeamSubMenu() {\r\n  teamsTables.forEach((item) => {\r\n    item.classList.toggle(\"w3-hide\");\r\n    item.classList.toggle(\"w3-yellow\", !item.classList.contains(\"w3-hide\"));\r\n  });\r\n}","const playersTables = document.querySelectorAll(\".playerTable\");\r\n\r\nexport default function displayPlayerSubMenu() {\r\n  playersTables.forEach((item) => {\r\n    item.classList.toggle(\"w3-hide\");\r\n    item.classList.toggle(\"w3-yellow\", !item.classList.contains(\"w3-hide\"));\r\n  });\r\n}","import openSidebar from \"../../sidebar/openSidebar\";\r\nimport closeSidebar from \"../../sidebar/closeSidebar\";\r\nimport hideAllSubMenus from \"../../sidebar/hideAllSubMenus\"\r\nimport hideTeamSubMenu from \"../../sidebar/teams/hideTeamSubMenu\";\r\nimport displayTeamSubMenu from \"../../sidebar/teams/displayTeamSubMenu\"\r\nimport hidePlayerSubMenu from \"../../sidebar/players/hidePlayerSubMenu\";\r\nimport displayPlayerSubMenu from \"../../sidebar/players/displayPlayerSubMenu\"\r\nimport setHomeTable from \"../../tables/setHomeTable\";\r\n  \r\n  // sidebar menu\r\n  document.getElementById(\"openSidebar\").addEventListener(\"click\", openSidebar);\r\n  document.getElementById(\"sidebar\").addEventListener(\"mouseleave\", closeSidebar);\r\n\r\n  // home option \r\n  const homeSidebar = document.querySelector(\"#home\");\r\n  homeSidebar.addEventListener(\"click\", setHomeTable);\r\n  \r\n  // teams sub menus\r\n  document\r\n    .getElementById(\"teamSidebar\")\r\n    .addEventListener(\"click\", () => {\r\n      displayTeamSubMenu();\r\n      hidePlayerSubMenu();\r\n    });\r\n  // players sub menus\r\n  document\r\n    .getElementById(\"playerSidebar\")\r\n    .addEventListener(\"click\", () => {\r\n      displayPlayerSubMenu();\r\n      hideTeamSubMenu();\r\n    });\r\n  // mobile open/close sidebar navbar\r\n  document.getElementById(\"openSidebar\").addEventListener(\"click\", openSidebar);\r\n  document\r\n    .getElementById(\"sidebar\")\r\n    .addEventListener(\"mouseleave\", () => {\r\n      hideAllSubMenus();\r\n      closeSidebar();\r\n    });","import createTable from \"./createTable\";\r\nimport { fullTableNoTies, fullTable } from \"../../constants/consts/supportVars\";\r\nimport { SEASONS_WITH_TIE_GAMES } from \"../../constants/consts/vars\";\r\nimport TeamStats from \"../setTables/createTeam\"\r\nimport setTableListeners from \"../listeners/listenerHelpers/setTableListeners\";\r\nimport setMainNavbar from \"../layouts/setMainNavbar\";\r\nimport currentSeason from \"../var_lib/season/currentSeason\";\r\n\r\n// modeDescriptor either 'Season', 'Playoff', or 'Combined' -- case sensitive!\r\n// tableDescriptor either 'Regular Season', 'Playoffs', or 'Combined' -- these are just table titles\r\n\r\nexport default function setSeasonsFullTable(seasonNumber = currentSeason, modeDescriptor = \"Season\", tableDescriptor = \"Regular Season\") {\r\n  // set the table headers for ties for seasons that played with tie games\r\n  let tableTypeString;\r\n  let tableTypeArray;\r\n  if(SEASONS_WITH_TIE_GAMES.includes(seasonNumber)){\r\n    tableTypeString = \"fullTable\";\r\n    tableTypeArray = fullTable\r\n  } else {\r\n    tableTypeString = \"fullTableNoTies\";\r\n    tableTypeArray = fullTableNoTies;\r\n  }\r\n  \r\n  const key = `groupTeamsSeason${seasonNumber}${modeDescriptor}Stats`\r\n  createTable(\r\n    seasonNumber,\r\n    `S0${seasonNumber} ${tableDescriptor}`,\r\n    `TeamStats.groupTeamsSeason${seasonNumber}${modeDescriptor}Stats`,\r\n    TeamStats[key],\r\n    \"w3-yellow\",\r\n    \"Points\",\r\n    tableTypeString,\r\n    tableTypeArray\r\n  );\r\n  setTableListeners();\r\n  setMainNavbar(seasonNumber);\r\n  }","import setSeasonsFullTable from \"../../tables/setSeasonsFullTable\";\r\n\r\n// teams tables\r\n// season 04 standings tables\r\ndocument\r\n  .getElementById(\"s04RegularSeason\")\r\n  .addEventListener(\"click\", () => {\r\n    setSeasonsFullTable()\r\n});\r\n// season 03 standings tables\r\ndocument\r\n  .getElementById(\"s03RegularSeason\")\r\n  .addEventListener(\"click\", () => {\r\n    setSeasonsFullTable(3)\r\n});\r\ndocument\r\n  .getElementById(\"s03PlayoffTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setSeasonsFullTable(3, \"Playoff\", \"Playoffs\")\r\n});\r\ndocument\r\n  .getElementById(\"s03CombinedTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setSeasonsFullTable(3, \"Combined\", \"Combined\")\r\n});\r\n// season 02 standings tables\r\ndocument\r\n  .getElementById(\"s02RegularSeason\")\r\n  .addEventListener(\"click\", () => {\r\n    setSeasonsFullTable(2)\r\n});\r\ndocument\r\n  .getElementById(\"s02PlayoffTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setSeasonsFullTable(2, \"Playoff\", \"Playoffs\")\r\n});\r\ndocument\r\n  .getElementById(\"s02CombinedTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setSeasonsFullTable(2, \"Combined\", \"Combined\")\r\n});\r\n// season 01 standings tables\r\ndocument\r\n  .getElementById(\"s01RegularSeason\")\r\n  .addEventListener(\"click\", () => {\r\n    setSeasonsFullTable(1)\r\n});\r\ndocument\r\n  .getElementById(\"s01PlayoffTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setSeasonsFullTable(1, \"Playoff\", \"Playoffs\")\r\n});\r\ndocument\r\n  .getElementById(\"s01CombinedTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setSeasonsFullTable(1, \"Combined\", \"Combined\")\r\n});\r\n","import createTable from \"./createTable\";\r\nimport IndividualPlayerStats from \"../setTables/createPlayer\";\r\nimport setTableListeners from \"../listeners/listenerHelpers/setTableListeners\";\r\nimport currentSeason from \"../var_lib/season/currentSeason\";\r\nimport { playersTable } from \"../../constants/consts/supportVars\";\r\nimport setMainNavbar from \"../layouts/setMainNavbar\";\r\n\r\n// modeDescriptor either 'Season', 'Playoff', or 'Combined' -- case sensitive!\r\n// tableDescriptor either 'Regular Season', 'Playoffs', or 'All Stats' -- these are just table titles\r\n\r\nexport default function setPlayersFullTable(seasonNumber = currentSeason, modeDescriptor = \"Season\", tableDescriptor = \"Regular Season\") {\r\n\r\n  const key = `groupPlayersSeason${seasonNumber}${modeDescriptor}Stats`\r\n  createTable(\r\n    seasonNumber,\r\n    `S0${seasonNumber} ${tableDescriptor}`,\r\n    `IndividualPlayerStats.groupPlayersSeason${seasonNumber}${modeDescriptor}Stats`,\r\n    IndividualPlayerStats[key],\r\n    \"w3-yellow\",\r\n    \"Points\",\r\n    \"playersTable\",\r\n    playersTable\r\n  );\r\n  setMainNavbar(seasonNumber)\r\n  setTableListeners();\r\n  }\r\n  ","import createTable from \"./createTable\";\r\nimport IndividualPlayerStats from \"../setTables/createPlayer\";\r\nimport setTableListeners from \"../listeners/listenerHelpers/setTableListeners\";\r\nimport currentSeason from \"../var_lib/season/currentSeason\";\r\nimport { playersTable } from \"../../constants/consts/supportVars\";\r\nimport setMainNavbar from \"../layouts/setMainNavbar\";\r\n\r\n// modeDescriptor either 'Season', 'Playoff', or 'Combined' -- case sensitive!\r\n// tableDescriptor either 'Regular Season', 'Playoffs', or 'All Stats' -- these are just table titles\r\n\r\nexport default function setPlayersAllTimeTable(seasonNumber, modeDescriptor = \"\", tableDescriptor) {\r\n  // all time player stats contains possible 0 as season number\r\n\r\n  const key = `groupPlayersAllTime${modeDescriptor}Stats`\r\n  createTable(\r\n    seasonNumber,\r\n    `All Time ${tableDescriptor}`,\r\n    `IndividualPlayerStats.groupPlayersAllTime${modeDescriptor}Stats`,\r\n    IndividualPlayerStats[key],\r\n    \"w3-yellow\",\r\n    \"Points\",\r\n    \"playersTable\",\r\n    playersTable\r\n  );\r\n  setMainNavbar(currentSeason)\r\n  setTableListeners();\r\n  }","import setPlayersFullTable from \"../../tables/setPlayersFullTable\";\r\nimport setPlayersAllTimeTable from \"../../tables/setPlayersAllTimeTable\";\r\n\r\n// Players tables\r\n// all time player stats\r\ndocument\r\n  .getElementById(\"allTimePlayerPointsTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setPlayersAllTimeTable(0, \"\", \"Stats\");\r\n});\r\ndocument\r\n  .getElementById(\"allTimePlayerSeasonTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setPlayersAllTimeTable(0, \"Season\", \"Season Stats\");\r\n});\r\ndocument\r\n  .getElementById(\"allTimePlayerPlayoffTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setPlayersAllTimeTable(0, \"Playoff\", \"Playoff Stats\");\r\n});\r\n// season 04 players tables\r\ndocument\r\n  .getElementById(\"s04PlayerSeasonTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setPlayersFullTable();\r\n});\r\n// season 03 player tables\r\ndocument\r\n  .getElementById(\"s03PlayerSeasonTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setPlayersFullTable(3);\r\n});\r\ndocument\r\n  .getElementById(\"s03PlayerPlayoffTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setPlayersFullTable(3, \"Playoff\", \"Playoffs\");\r\n});\r\ndocument\r\n  .getElementById(\"s03PlayerCombinedTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setPlayersFullTable(3, \"Combined\", \"Combined\");\r\n});\r\n// season 02 player tables\r\ndocument\r\n  .getElementById(\"s02PlayerSeasonTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setPlayersFullTable(2);\r\n});\r\ndocument\r\n  .getElementById(\"s02PlayerPlayoffTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setPlayersFullTable(2, \"Playoff\", \"Playoffs\");\r\n});\r\ndocument\r\n  .getElementById(\"s02PlayerCombinedTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setPlayersFullTable(2, \"Combined\", \"Combined\");\r\n});\r\n// season 03 player tables\r\ndocument\r\n  .getElementById(\"s01PlayerSeasonTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setPlayersFullTable(1);\r\n});\r\ndocument\r\n  .getElementById(\"s01PlayerPlayoffTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setPlayersFullTable(1, \"Playoff\", \"Playoffs\");\r\n});\r\ndocument\r\n  .getElementById(\"s01PlayerCombinedTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setPlayersFullTable(1, \"Combined\", \"Combined\");\r\n});","import closeSidebar from \"../sidebar/closeSidebar.js\";\r\nimport clearScoreboardDiv from \"../scoreboard/clearScoreboardDiv.js\";\r\n  \r\n  export default function announcements() {\r\n    clearScoreboardDiv();\r\n    let displayArea = document.getElementById(\"tablesDiv\");\r\n  \r\n    displayArea.innerHTML = `<div class=\"w3-content w3-margin w3-padding w3-round-large w3-display-container w3-margin-top w3-card-4 w3-text-black\">\r\n    <div style=\"margin: auto; width:90%; background-color: rgb(0,255,0);color: #000000;\"><h5><b>Season 4 has begun!</b></h5></div>\r\n    <p style=\"background-color: orange;\"><b>A tonne of stats yet to be created over time. A playoff page, list of Champions etc...</b></p>\r\n    <b>*</b> HaxBall main logo is a link back to home settings of the page. <b>*</b></p>\r\n    <p><b>**</b> Tables are sortable via clicking the field header. On mobile click on any row <b>**</b></p>\r\n    </div>`;\r\n    closeSidebar();\r\n  }","import announcements from \"../../layouts/announcements\";\r\n\r\n  // announcements page\r\n  document\r\n  .getElementById(\"announcements\")\r\n  .addEventListener(\"click\", announcements);","import { GameResults } from \"../../../../constants/masterHaxData\";\r\n\r\nexport default function filterGameResults(seasonMode) {\r\n  let filteredGameResults;\r\n\r\n  switch (seasonMode) {\r\n    case \"Season\":\r\n      filteredGameResults = GameResults.filter((games) => {\r\n        return games.GameTypeID == \"1\";\r\n      });\r\n      break;\r\n    case \"Playoff\":\r\n      filteredGameResults = GameResults.filter((games) => {\r\n        return games.GameTypeID == \"2\";\r\n      });\r\n      break;\r\n    default:\r\n      filteredGameResults = GameResults;\r\n  }\r\n\r\n  return filteredGameResults;\r\n}\r\n","import teamsMAP from \"../../../var_lib/maps/teams/teamsMAP.js\"\r\nimport eachTeamObjectMAP from \"../../../var_lib/maps/teams/eachTeamObjectMAP.js\"\r\n\r\nexport default function getTeamLogo(team, seasonNumber) {\r\n  let teamLogoFilePath;\r\n  const thisTeam = teamsMAP.get(team);\r\n  teamLogoFilePath =\r\n    eachTeamObjectMAP.get(thisTeam)[`S0${seasonNumber}HomeFilePath`];\r\n  return teamLogoFilePath;\r\n}\r\n","import { TeamPlayers } from \"../../../../constants/masterHaxData\";\r\n\r\nexport default function getTeamsPlayers(teamNumber, seasonNumber) {\r\n  // filter out to the correct season\r\n  const getSeasonNumbersGames = TeamPlayers.filter((games) => {\r\n    return games.SeasonNumber == seasonNumber;\r\n  });\r\n  // filter out the team from the correct season\r\n  const getPlayers = getSeasonNumbersGames.filter((players) => {\r\n    return players.TeamID == teamNumber.toString();\r\n  });\r\n  return getPlayers;\r\n}\r\n","import teamsMAP from \"../../../var_lib/maps/teams/teamsMAP.js\"\r\nimport eachTeamObjectMAP from \"../../../var_lib/maps/teams/eachTeamObjectMAP.js\"\r\n\r\nexport default function getTeamsBackgroundColor(team) {\r\n  const teamName = teamsMAP.get(team);\r\n  const teamColor = eachTeamObjectMAP.get(teamName).MainColor;\r\n  return teamColor;\r\n}\r\n","import getTeamsPlayers from \"../genericRecordFunctions/getTeamsPlayers.js\";\r\nimport playersMAP from \"../../../var_lib/maps/players/playersMAP.js\";\r\nimport getTeamsBackgroundColor from \"../genericRecordFunctions/getTeamsBackgroundColor.js\";\r\n\r\nexport default function createIndividualRecord(\r\n  teamLogo,\r\n  recordName,\r\n  recordStat,\r\n  seasonNumber,\r\n  team\r\n) {\r\n  // create containing div for this record. will contain 2 rows. first row is the title and second will be the data\r\n  let recordDivContainer = document.createElement(\"div\");\r\n  const teamsColor = getTeamsBackgroundColor(team);\r\n  recordDivContainer.style.backgroundColor = `#${teamsColor}`;\r\n  recordDivContainer.classList = \"singleRecordContainer w3-panel w3-round\";\r\n\r\n  // create teamLogo div\r\n  let logoDiv = document.createElement(\"div\");\r\n  logoDiv.classList = \"teamsLogo w3-panel w3-round w3-card\";\r\n  // create img element to display team logo\r\n  let imageElement = document.createElement(\"img\");\r\n  imageElement.src = teamLogo;\r\n  logoDiv.append(imageElement);\r\n  recordDivContainer.append(logoDiv);\r\n\r\n  //create div that will hold the records data (number)\r\n  let teamRecordStat = document.createElement(\"div\");\r\n  teamRecordStat.classList = \"teamRecordStat w3-panel w3-round w3-card\";\r\n  teamRecordStat.innerHTML = `${recordName}: ${recordStat}`;\r\n  recordDivContainer.append(teamRecordStat);\r\n\r\n  // create div that displays the season the record occured in\r\n  let seasonNum = document.createElement(\"div\");\r\n  seasonNum.classList = \"recordSeasonNumber w3-panel w3-round w3-card\";\r\n  seasonNum.innerHTML = `Season: ${seasonNumber}`;\r\n  recordDivContainer.append(seasonNum);\r\n\r\n  // get players from the record setting team\r\n  const thisTeamsPlayers = getTeamsPlayers(team, seasonNumber);\r\n  // create div which will display the players from that record setting team\r\n  let recordPlayers = document.createElement(\"div\");\r\n  recordPlayers.classList = \"recordPlayers w3-panel w3-round w3-card\";\r\n  thisTeamsPlayers.forEach((player) => {\r\n    // get players name\r\n    const playerName = playersMAP.get(+player.PlayerID);\r\n    // create p element that will hold the players name\r\n    const p = document.createElement(\"p\");\r\n    p.innerHTML = playerName;\r\n    recordPlayers.append(p);\r\n  });\r\n  recordDivContainer.append(recordPlayers);\r\n  return recordDivContainer;\r\n}\r\n","import clearScoreboardDiv from \"../../../../scoreboard/clearScoreboardDiv.js\";\r\nimport filterGameResults from \"../../genericRecordFunctions/filterGameResults.js\";\r\nimport getTeamLogo from \"../../genericRecordFunctions/getTeamLogo.js\";\r\nimport createIndividualRecord from \"../../recordViews/createIndividualRecord.js\";\r\n\r\nexport default function teamGoalsScored(e) {\r\n  clearScoreboardDiv();\r\n  // get the previously displayed records in order to remove them when another record is requested from the user\r\n  const getSingleRecordContainers =\r\n    document.querySelectorAll(\".recordTitleDiv\");\r\n  // remove records and display user requested different records\r\n  getSingleRecordContainers.forEach((record) => {\r\n    record.remove();\r\n  });\r\n  const seasonMode = e.target.dataset.seasonmode;\r\n  const gameResults = filterGameResults(seasonMode);\r\n  let title;\r\n  switch (seasonMode) {\r\n    case \"Season\":\r\n      title = \"Most goals scored by a team in a season game\";\r\n      break;\r\n    case \"Playoff\":\r\n      title = \"Most goals scored by a team in a playoff game\";\r\n      break;\r\n    default:\r\n      title = \"Most goals scored in a game all time\";\r\n  }\r\n\r\n  const goalsContainingArr = [];\r\n  gameResults.forEach((game) => {\r\n    const gameID = +game.GameID;\r\n    const homeGoals = +game.TeamOneScore;\r\n    const awayGoals = +game.TeamTwoScore;\r\n    const thisGamesData = {};\r\n    thisGamesData.gameID = gameID;\r\n\r\n    if (homeGoals > awayGoals) {\r\n      thisGamesData.whichSide = \"TeamOneScore\";\r\n      thisGamesData.goals = homeGoals;\r\n      goalsContainingArr.push(thisGamesData);\r\n    } else if (homeGoals < awayGoals) {\r\n      thisGamesData.whichSide = \"TeamTwoScore\";\r\n      thisGamesData.goals = awayGoals;\r\n      goalsContainingArr.push(thisGamesData);\r\n    } else {\r\n      thisGamesData.whichSide = \"TeamOneScore\";\r\n      thisGamesData.goals = homeGoals;\r\n      goalsContainingArr.push(thisGamesData);\r\n    }\r\n  });\r\n\r\n  const getEachUniqueGoalCount = new Set();\r\n  goalsContainingArr.forEach((getGoals) => {\r\n    getEachUniqueGoalCount.add(getGoals.goals);\r\n  });\r\n  const sortEachUniqueGoalCount = [...getEachUniqueGoalCount].sort((a, b) => {\r\n    return b - a;\r\n  });\r\n\r\n  const getTopThreeGoalsGameID = goalsContainingArr.filter((game) => {\r\n    return game.goals >= sortEachUniqueGoalCount[2];\r\n  });\r\n\r\n  const getTopThreeGoalsScoredGameResults = [];\r\n  getTopThreeGoalsGameID.forEach((getGame) => {\r\n    gameResults.forEach((findGameID) => {\r\n      if (findGameID.GameID == getGame.gameID) {\r\n        getTopThreeGoalsScoredGameResults.push(findGameID);\r\n      }\r\n    });\r\n  });\r\n\r\n  const most = getTopThreeGoalsScoredGameResults.filter((game) => {\r\n    if (+game.TeamTwoScore == sortEachUniqueGoalCount[0]) return game;\r\n    if (+game.TeamOneScore == sortEachUniqueGoalCount[0]) return game;\r\n  });\r\n\r\n  const secondMost = getTopThreeGoalsScoredGameResults.filter((game) => {\r\n    if (+game.TeamTwoScore == sortEachUniqueGoalCount[1]) return game;\r\n    if (+game.TeamOneScore == sortEachUniqueGoalCount[1]) return game;\r\n  });\r\n\r\n  const thirdMost = getTopThreeGoalsScoredGameResults.filter((game) => {\r\n    if (+game.TeamTwoScore == sortEachUniqueGoalCount[2]) return game;\r\n    if (+game.TeamOneScore == sortEachUniqueGoalCount[2]) return game;\r\n  });\r\n\r\n  // top 3 highest goal output in sorted order!\r\n\r\n  const sortedResult = [...most, ...secondMost, ...thirdMost];\r\n\r\n  // begin to display the records\r\n\r\n  // grab the element to append each new record to\r\n  const allRecordsContainingDiv = document.querySelector(\".recordsContainer\");\r\n  // create sub containing div that will hold all the individual records encased under one title\r\n  const titleContainingDiv = document.createElement(\"div\");\r\n  titleContainingDiv.classList = \"recordTitleDiv w3-panel w3-round\";\r\n  titleContainingDiv.innerHTML = `<h1>${title}</h1>`;\r\n\r\n  // for each record set the layout with the correct data for each record\r\n  sortedResult.forEach((game) => {\r\n    // title is set above\r\n    let teamLogo;\r\n    let recordGoals;\r\n    let seasonNumber = game.SeasonNumber;\r\n    let homeTeam = +game.TeamOne;\r\n    let awayTeam = +game.TeamTwo;\r\n    let team;\r\n    let homeTeamGoals = +game.TeamOneScore;\r\n    let awayTeamGoals = +game.TeamTwoScore;\r\n    if (homeTeamGoals > awayTeamGoals) {\r\n      teamLogo = getTeamLogo(homeTeam, game.SeasonNumber);\r\n      recordGoals = homeTeamGoals;\r\n      team = +game.TeamOne;\r\n    } else {\r\n      teamLogo = getTeamLogo(awayTeam, game.SeasonNumber);\r\n      recordGoals = awayTeamGoals;\r\n      team = +game.TeamTwo;\r\n    }\r\n    const thisRecordData = createIndividualRecord(\r\n      teamLogo,\r\n      \"Goals\",\r\n      recordGoals,\r\n      seasonNumber,\r\n      team\r\n    );\r\n    titleContainingDiv.append(thisRecordData);\r\n    allRecordsContainingDiv.append(titleContainingDiv);\r\n  });\r\n}\r\n","import teamGoalsScored from \"../teamRecords/teamGoalsScored/teamGoalsScored.js\";\r\n\r\nexport default function createRecordsLayout() {\r\n  // create records nav that will contain allTime/season/playoffs buttons\r\n  let recordsNav = document.createElement(\"div\");\r\n  recordsNav.classList = \"recordsNav w3-panel w3-round\";\r\n\r\n  // create season button\r\n  let recordsSeasonButton = document.createElement(\"div\");\r\n  recordsSeasonButton.classList = \"w3-round w3-card\";\r\n  recordsSeasonButton.setAttribute(\"data-seasonMode\", \"Season\");\r\n  recordsSeasonButton.innerHTML = \"Season\";\r\n  recordsNav.append(recordsSeasonButton);\r\n  recordsSeasonButton.addEventListener(\"click\", teamGoalsScored);\r\n  // create playoffs button\r\n  let recordsPlayoffsButton = document.createElement(\"div\");\r\n  recordsPlayoffsButton.classList = \"w3-round w3-card\";\r\n  recordsPlayoffsButton.setAttribute(\"data-seasonMode\", \"Playoff\");\r\n  recordsPlayoffsButton.innerHTML = \"Playoff\";\r\n  recordsNav.append(recordsPlayoffsButton);\r\n  recordsPlayoffsButton.addEventListener(\"click\", teamGoalsScored);\r\n  // create all time button\r\n  let recordsAllTimeButton = document.createElement(\"div\");\r\n  recordsAllTimeButton.classList = \"w3-round w3-card\";\r\n  recordsAllTimeButton.setAttribute(\"data-seasonMode\", \"AllTime\");\r\n  recordsAllTimeButton.innerHTML = \"All Time\";\r\n  recordsNav.append(recordsAllTimeButton);\r\n  recordsAllTimeButton.addEventListener(\"click\", teamGoalsScored);\r\n\r\n  return recordsNav;\r\n}\r\n","import getTablesDiv from \"../../../tables/getTablesDiv.js\"\r\nimport clearTablesDiv from \"../../../tables/clearTablesDiv.js\"\r\nimport clearScoreboardDiv from \"../../../scoreboard/clearScoreboardDiv.js\";\r\nimport createRecordsLayout from \"./createRecordsLayout.js\";\r\n\r\nexport default function setRecordsPage() {\r\n  clearTablesDiv();\r\n  clearScoreboardDiv();\r\n  getTablesDiv();\r\n\r\n  // create records containing div\r\n  let recordsContainer = document.createElement(\"div\");\r\n  recordsContainer.classList =\r\n    \"recordsContainer w3-panel w3-round w3-card w3-blue\";\r\n\r\n  // fetch the records nav buttons and append to the records container div\r\n  const recordsNav = createRecordsLayout();\r\n  recordsContainer.append(recordsNav);\r\n\r\n  // append all the records and navbar to the webpage\r\n  tablesDiv.append(recordsContainer);\r\n}\r\n","import teamGoalsScored from \"./teamGoalsScored/teamGoalsScored.js\";\r\nimport setRecordsPage from \"../recordViews/setRecordsPage.js\";\r\n\r\nconst leagueTeamRecords = {\r\n  // set records page nav\r\n  setRecordsPageNav: setRecordsPage,\r\n  // teamGoalsScord.js\r\n  teamGoals: teamGoalsScored,\r\n};\r\n\r\nexport default leagueTeamRecords;\r\n","import leagueTeamRecords from \"../../layouts/records/teamRecords/teamRecordsExports\"\r\n\r\n// league records\r\ndocument\r\n  .getElementById(\"leagueRecords\")\r\n  .addEventListener(\"click\", leagueTeamRecords.setRecordsPageNav);","import setHomeTable from \"../tables/setHomeTable\";\r\nimport resizeEventMethod from \"../misc/documentResize\";\r\n\r\n// menu bar listeners\r\nimport \"./menubarListeners/menubarListeners\"\r\n// set listeners on season standings in menu\r\nimport \"../listeners/seasonTableListeners/seasonTableListeners\"\r\n// set listeners on player tables in menu\r\nimport \"../listeners/playerTableListeners/playerTableListeners\"\r\n// announcements page listener\r\nimport \"./pageListeners/announcementsListener\"\r\n// records page listener\r\nimport \"./pageListeners/leagueRecordsListener\"\r\n\r\n  // add link to haxball logo \r\n  const headerLogo = document.querySelector(\"img[alt*='Haxball']\");\r\n  headerLogo.addEventListener(\"click\", setHomeTable);\r\n\r\n// keeps tables fields correctly highlighted on windows resize\r\n\r\n  window.addEventListener('resize', resizeEventMethod)","function importAll(r) {\r\n    let images = {};\r\n    r.keys().forEach((item) => {\r\n      images[item.replace('./', '')] = r(item);\r\n    });\r\n    return images;\r\n  }\r\n  \r\n  const images = importAll(require.context('/img', true, /\\.(png|jpe?g|svg)$/));\r\n  \r\n  export default images;\r\n  ","// css files\r\nimport \"./css/w3.css\"\r\nimport \"./css/general.css\"\r\nimport \"./css/large.css\"\r\nimport \"./css/medium.css\"\r\nimport \"./css/mobileLandscape.css\"\r\nimport \"./css/mobile.css\"\r\n// js files\r\nimport \"./scripts/listeners/listeners\"\r\nimport setHomeTable from \"./scripts/tables/setHomeTable\"\r\nimport setTableListeners from \"./scripts/listeners/listenerHelpers/setTableListeners\"\r\n\r\n// img files all imported using script\r\nimport images from \"./scripts/loadImages\";\r\n\r\n    // Set homepage standings table for current season\r\n    setHomeTable();\r\n    // Set listeners on table headers\r\n    setTableListeners();"],"names":[],"sourceRoot":""}
{"version":3,"file":"698004316d779fa7ff31.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvGA;AACA;AACA;AACA;AACA,iEAAe,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;ACJrB;AACA;AACO,mBAAmB,iFAAiC;AACpD,mCAAmC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACE,wBAAwB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACE,+BAA+B;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO,0BAA0B,qEAAqB;AACtD;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAS;AACT;AACA;AACA;AACA;AACA,EAAS,yBAAyB;AAClC;AACA;AACA;AACA,GAAG;AACH,EAAS;AACT,EAAS;AACT;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,EAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpKuG;AACvG;AACO;AACA;AACA;AACA;AACA;AACA;AACA;AACP;AACO,qBAAqB,2DAAK;AACjC;AACO;AACP;AACO,uBAAuB,6DAAO;AACrC;AACO,yBAAyB,8DAAQ;AACxC;AACO,4BAA4B,iEAAW;AAC9C;AACO,4BAA4B,iEAAW;AAC9C;AACO,iCAAiC,qEAAe;AACvD;AACO;AACP;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;AC9DA;AACA;AACA;AACO,QAAQ,4EAA4E;;;;;;;;;;;;;;;;;;;;;ACH3F;AACqB;AACK;AACF;AACC;AACS;AACT;AACK;AAC9B;AACsC;AACkB;AACW;AACG;AACe;AACvC;AAC9C;AACA;AAC0C;AACwB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAAW,CAAC,sFAAa;AACzB;AACA,0GAAiB;AACjB;AACA;AACA;AACA,yHAAyH,kBAAkB;AAC3I;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,iDAAiD;AAClG,cAAc;AACd;AACA,qDAAqD,iDAAiD;AACtG,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;AC3DmF;AACjB;AACG;AACrE;AACA,0BAA0B,2EAAW;AACrC;AACA;AACA;AACA;AACA;AACA,QAAQ,+EAAe;AACvB,gBAAgB,iFAAU;AAC1B;AACA;AACA,WAAW;AACX;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA,+BAA+B,2EAAW;AAC1C,gBAAgB,mFAAW,YAAY,2EAAW;AAClD;AACA;AACA;AACA,+BAA+B,2EAAW;AAC1C,gBAAgB,mFAAW,YAAY,2EAAW;AAClD;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,iEAAe,sBAAsB;;;;;;;;;;;;;;;;;;;ACjCqC;AAChB;AACY;AACtE;AACe;AACf;AACA;AACA;AACA,2BAA2B,uFAAgB;AAC3C;AACA,8BAA8B;AAC9B,oCAAoC;AACpC,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,iCAAiC;AACjC,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4EAAW;AACnB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,gFAAsB;AAC5B;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5DA,0BAA0B,0DAA0D;AACpF;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,YAAY;;;;;;;;;;;ACpB3B,8BAA8B,yBAAyB;AACvD;AACA;AACA,0CAA0C,aAAa;AACvD;AACA;AACA,uBAAuB,aAAa;AACpC;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA,YAAY;AACZ,0CAA0C,aAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,iEAAe,mBAAmB;;;;;;;;;;;AC/BlC,0BAA0B,yBAAyB;AACnD;AACA;AACA;AACA,0CAA0C,aAAa;AACvD;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA,YAAY;AACZ,0CAA0C,aAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,iEAAe,eAAe;;;;;;;;;;;ACpC9B,wBAAwB,yBAAyB;AACjD;AACA,iBAAiB,aAAa;AAC9B;AACA,wBAAwB,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,aAAa;;;;;;;;;;;ACX5B,mCAAmC,yBAAyB;AAC5D;AACA,0CAA0C,aAAa;AACvD;AACA,uBAAuB,aAAa;AACpC;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA,YAAY;AACZ,0CAA0C,aAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,iEAAe,wBAAwB;;;;;;;;;;;AC7BvC,+BAA+B,yBAAyB;AACxD;AACA,0CAA0C,aAAa;AACvD;AACA,uBAAuB,aAAa;AACpC;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA,YAAY;AACZ,0CAA0C,aAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,iEAAe,oBAAoB;;;;;;;;;;;AC7BnC,sBAAsB,yBAAyB;AAC/C,wCAAwC,aAAa;AACrD,8CAA8C,aAAa;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,WAAW;;;;;;;;;;;ACd1B,sBAAsB,0DAA0D;AAChF;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,QAAQ;;;;;;;;;;;ACnBvB,4BAA4B,0DAA0D;AACtF;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,cAAc;;;;;;;;;;;ACX7B,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,mBAAmB;;;;;;;;;;;ACRlC,0BAA0B,yBAAyB;AACnD;AACA;AACA;AACA,2CAA2C,aAAa;AACxD,6CAA6C,aAAa;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,eAAe;;;;;;;;;;;ACjB9B,iCAAiC,WAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,iEAAe,sBAAsB;;;;;;;;;;;ACjBrC,sBAAsB,yBAAyB;AAC/C;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD,6CAA6C,aAAa;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,WAAW;;;;;;;;;;;ACnB1B,6BAA6B,WAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,iEAAe,kBAAkB;;;;;;;;;;;ACjBjC,0BAA0B,0DAA0D;AACpF;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,YAAY;;;;;;;;;;;ACnB3B,8BAA8B,yBAAyB;AACvD;AACA;AACA,0CAA0C,aAAa;AACvD;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA,YAAY;AACZ,0CAA0C,aAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,iEAAe,mBAAmB;;;;;;;;;;;ACjClC,0BAA0B,yBAAyB;AACnD;AACA;AACA;AACA;AACA,sCAAsC,aAAa;AACnD;AACA;AACA,mBAAmB,aAAa;AAChC;AACA,0BAA0B,aAAa;AACvC;AACA;AACA;AACA,QAAQ;AACR,sCAAsC,aAAa;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,iEAAe,eAAe;;;;;;;;;;;ACnC9B,wBAAwB,yBAAyB;AACjD;AACA,iBAAiB,aAAa;AAC9B;AACA,wBAAwB,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,aAAa;;;;;;;;;;;ACX5B,mCAAmC,yBAAyB;AAC5D;AACA,0CAA0C,aAAa;AACvD;AACA,uBAAuB,aAAa;AACpC;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA,YAAY;AACZ,0CAA0C,aAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,iEAAe,wBAAwB;;;;;;;;;;;AC7BvC,+BAA+B,yBAAyB;AACxD;AACA,0CAA0C,aAAa;AACvD;AACA,uBAAuB,aAAa;AACpC;AACA,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA,YAAY;AACZ,0CAA0C,aAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,iEAAe,oBAAoB;;;;;;;;;;;AC7BnC,sBAAsB,yBAAyB;AAC/C,oCAAoC,aAAa;AACjD,0CAA0C,aAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,WAAW;;;;;;;;;;;ACd1B,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,SAAS;;;;;;;;;;;AC5BxB,4BAA4B,yBAAyB;AACrD;AACA;AACA;AACA,wBAAwB,aAAa;AACrC;AACA;AACA,0BAA0B,aAAa;AACvC;AACA;AACA;AACA;AACA,iEAAe,iBAAiB;;;;;;;;;;;ACZhC,0BAA0B,yBAAyB;AACnD;AACA;AACA;AACA,wBAAwB,aAAa;AACrC;AACA;AACA,0BAA0B,aAAa;AACvC;AACA;AACA;AACA;AACA,iEAAe,eAAe;;;;;;;;;;;ACZ9B,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,SAAS;;;;;;;;;;;AC1BxB,+BAA+B,yBAAyB;AACxD;AACA;AACA;AACA,2CAA2C,aAAa;AACxD,6CAA6C,aAAa;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,oBAAoB;;;;;;;;;;;ACjBnC,sCAAsC,WAAW;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,iEAAe,2BAA2B;;;;;;;;;;;ACjB1C,2BAA2B,yBAAyB;AACpD;AACA;AACA;AACA,2CAA2C,aAAa;AACxD,6CAA6C,aAAa;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,gBAAgB;;;;;;;;;;;ACjB/B,kCAAkC,WAAW;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,iEAAe,uBAAuB;;;;;;;;;;;ACjBtC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,iEAAe,iBAAiB;;;;;;;;;;;ACrChC,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,mBAAmB;;;;;;;;;;;ACRlC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,iEAAe,eAAe;;;;;;;;;;;AC3B9B,iCAAiC,WAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,iEAAe;;;;;;;;;;;ACjBf;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,iEAAe,WAAW;;;;;;;;;;;AC3B1B,6BAA6B,WAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,iEAAe;;;;;;;;;;;ACjBf,kBAAkB,yBAAyB;AAC3C;AACA;AACA;AACA,4BAA4B,aAAa;AACzC,4BAA4B,aAAa;AACzC,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO;;;;;;;;;;;;;;;;;;ACjB+C;AACM;AACZ;AACS;AACxE;AACA;AACA;AACA,EAAE,2EAAW;AACb;AACA,MAAM,6EAAQ;AACd,MAAM,6EAAQ;AACd;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,oBAAoB,IAAI,iFAAmB,EAAE;AAC7C;AA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AACA,QAAQ,mFAAwB;AAChC;AACA,QAAQ,mFAAwB;AAChC;AACA,QAAQ,2EAAgB;AACxB;AACA,QAAQ,+EAAoB;AAC5B;AACA,QAAQ,kFAAuB;AAC/B;AACA,QAAQ,sFAA2B;AACnC;AACA;AACA;AACA;AACA,iEAAe,kCAAkC;;;;;;;;;;;;;;;;;;;;;;;;ACvJO;AACc;AACR;AACJ;AACc;AACQ;AACoB;AACF;AAClG;AACA;AACA;AACA;AACA;AACA,2BAA2B,oFAAe,iBAAiB;AAC3D,iCAAiC,oFAAe;AAChD;AACA,8BAA8B;AAC9B,oCAAoC;AACpC,qCAAqC;AACrC,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,IAAI,qFAAgB,SAAS;AACnD,wBAAwB,KAAK,6EAAQ,OAAO;AAC5C,eAAe,4FAAuB;AACtC,mCAAmC,6EAAQ,SAAS,qFAAgB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,4EAAW;AACjB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oFAAoB;AAC5B;AACA;AACA;AACA;AACA;AACA,MAAM,wFAAwB;AAC9B;AACA;AACA;AACA;AACA;AACA,qBAAqB,8EAAa;AAClC;AACA;AACA,MAAM,kGAAkC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,iEAAe,SAAS;;;;;;;;;;;;;;;;;;ACzF+C;AAClB;AACvD;AACA;AACA;AACA;AACA;AACA,yBAAyB,6FAAgB;AACzC,yBAAyB,oFAAO;AAChC;AACA;AACA;AACA,iEAAe,uBAAuB;;;;;;;;;;;;;;ACZtC;AACA,iHAAiH,kBAAkB;AACnI;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAA6C;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,gBAAgB;;;;;;;;;;;;;AC1B/B;AACA;AACA,wOAAwO,YAAY;AACpP;AACA;AACA;AACA;AACA,iEAAe,OAAO;;;;;;;;;;;;;;;;;;ACPmC;AACe;AACjB;AACY;AACnE;AACA;AACA,EAAE,sFAAkB;AACpB;AACA;AACA,oBAAoB,4EAAY;AAChC;AACA;AACA;AACA;AACA,mBAAmB,gFAAuB;AAC1C;AACA;AACA,EAAE,8EAAY;AACd;AACA;AACA,iEAAe,gBAAgB,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpByB;AACA;AACR;AACQ;AACU;AACI;AAClC;AACwB;AACA;AACd;AACc;AACF;AACU;AACA;AAChB;AACyB;AACH;AAC3E;AACe;AACf;AACA;AACA,gDAAgD;AAChD;AACA;AACA,MAAM,4EAAS;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,UAAU,SAAS,UAAU;AAC/F;AACA;AACA;AACA;AACA,sCAAsC,qEAAU;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,WAAW,EAAE,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uFAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iCAAiC,MAAM,kBAAkB,gBAAgB,IAAI,iBAAiB;AAC9F,UAAU;AACV,iCAAiC,MAAM,kBAAkB,kBAAkB,IAAI,eAAe;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA,2CAA2C,IAAI;AAC/C;AACA;AACA;AACA;AACA,8BAA8B,6EAAQ,6BAA6B;AACnE,8BAA8B,6EAAQ,6BAA6B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uFAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iCAAiC,MAAM,+BAA+B,gBAAgB,IAAI,iBAAiB;AAC3G,UAAU;AACV,iCAAiC,MAAM,+BAA+B,kBAAkB,IAAI,eAAe;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4EAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2BAA2B;AAChD;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uFAAiB;AACzC;AACA;AACA;AACA;AACA;AACA,0BAA0B,MAAM,wBAAwB,gCAAgC;AACxF,UAAU;AACV,0BAA0B,MAAM,gBAAgB,gCAAgC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uFAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iCAAiC,MAAM,+BAA+B,gBAAgB,IAAI,iBAAiB;AAC3G,UAAU;AACV,iCAAiC,MAAM,+BAA+B,kBAAkB,IAAI,eAAe;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2FAA4B;AACpD,oCAAoC,uFAAiB,sBAAsB,uBAAuB;AAClG,gEAAgE,uBAAuB,GAAG,kBAAkB;AAC5G;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,8CAA8C,6EAAQ,6BAA6B;AACnF,gBAAgB,wEAAiB;AACjC,gBAAgB,wEAAiB,yBAAyB,6EAAQ,6BAA6B;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,kFAAa,gBAAgB,6EAAQ,6BAA6B,cAAc,6EAAQ,6BAA6B,GAAG;AACrK;AACA,kCAAkC,6EAAQ,6BAA6B;AACvE;AACA;AACA;AACA;AACA,2CAA2C,4JAA4J;AACvM,mCAAmC,2BAA2B;AAC9D;AACA;AACA;AACA;AACA;AACA,6CAA6C,kFAAa,gBAAgB,6EAAQ,6BAA6B,cAAc,6EAAQ,6BAA6B,GAAG;AACrK;AACA,kCAAkC,6EAAQ,6BAA6B;AACvE;AACA;AACA;AACA;AACA;AACA,wBAAwB,2FAA4B;AACpD,oCAAoC,uFAAiB,sBAAsB,uBAAuB;AAClG,gEAAgE,uBAAuB,GAAG,kBAAkB;AAC5G;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,8CAA8C,6EAAQ,6BAA6B;AACnF,gBAAgB,wEAAiB;AACjC,gBAAgB,wEAAiB,yBAAyB,6EAAQ,6BAA6B;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,4JAA4J;AACvM,mCAAmC,2BAA2B;AAC9D;AACA;AACA;AACA;AACA,qDAAqD,gFAAkB,sBAAsB;AAC7F,qCAAqC,gFAAiB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,qEAAI,0DAA0D;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,qEAAe;AACnB;AACA;AACA,8CAA8C,kFAAa,WAAW;AACtE;AACA;AACA,IAAI,4EAAc;AAClB,IAAI,oFAAkB;AACtB;AACA;AACA;AACA;AACA;AACA,wCAAwC,yFAAkB,mDAAmD;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0EAAY;AACtC;AACA;AACA;AACA,SAAS;AACT;AACA,QAAQ,kEAAO;AACf,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,iFAAY;AACjD;AACA;AACA;;;;;;;;;;;;;;;;;ACxc4D;AAC5D;AACA;AACA,mBAAmB,6EAAQ,oBAAoB;AAC/C;AACA,+BAA+B;AAC/B,UAAU;AACV,8BAA8B;AAC9B,UAAU;AACV,8BAA8B;AAC9B,UAAU;AACV,8BAA8B;AAC9B,UAAU;AACV,6BAA6B;AAC7B;AACA,MAAM,oBAAoB,6EAAQ,oBAAoB;AACtD;AACA,+BAA+B;AAC/B,UAAU;AACV,8BAA8B;AAC9B,UAAU;AACV,8BAA8B;AAC9B,UAAU;AACV,8BAA8B;AAC9B,UAAU;AACV,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iEAAe,kBAAkB;;;;;;;;;;;;;;;;;AC9B2B;AAC5D;AACA;AACA,mBAAmB,6EAAQ,oBAAoB;AAC/C;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA,MAAM,oBAAoB,6EAAQ,oBAAoB;AACtD;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,iEAAe,iBAAiB;;;;;;;;;;;;;;;;;;AC9BkB;AACc;AAChE;AACA,qBAAqB,6HAA6H;AAClJ;AACA;AACA;AACA;AACA,8BAA8B,qEAAU;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,wEAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,wEAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU;;;;;;;;;;;;;ACxDzB;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM;;;;;;;;;;;ACNrB,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA,oBAAoB,gCAAgC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gBAAgB,GAAG,MAAM;AACvD,MAAM;AACN,8BAA8B,gBAAgB,EAAE,MAAM;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,gBAAgB;;;;;;;;;;;ACpD/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,0BAA0B;AAC1B;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,0BAA0B;AAC1B;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,EAAE,iEAAe;;;;;;;;;;;;;;;;;;;;;;;;;ACnDjB,EAA0E;AAC1E,EAA8D;AAC9D,EAA0E;AAC1E,EAA8D;AAC9D,EAAsE;AACtE,EAA0D;AAC1D,EAAoF;AACpF,EAAoD;AACpD,EAAsD;AACtD,EAAiE;AACjE,EAA8C;AAC9C;AACA,EAAiB;AACjB,IAAI,sFAAkB;AACtB,IAAI,8EAAc;AAClB,sBAAsB,4EAAY;AAClC,0BAA0B,oFAAgB;AAC1C;AACA;AACA;AACA,4BAA4B,8EAAW;AACvC;AACA,8BAA8B,gFAAQ;AACtC;AACA,8BAA8B,gFAAQ;AACtC;AACA,gCAAgC,uEAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,8EAAU;AACtC;AACA;AACA;AACA;AACA,mCAAmC,8FAAmB;AACtD;AACA;AACA,gCAAgC,oFAAgB;AAChD;AACA;AACA,MAAM,4EAAW;AACjB;AACA,MAAM;AACN,gCAAgC,2EAAM;AACtC;AACA;;;;;;;;;;;;;;;;;;;ACpDkF;AAClB;AACD;AAC/D;AACA;AACA;AACA;AACA,mBAAmB,wFAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,2BAA2B,wEAAiB;AAC5C;AACA,uBAAuB,4EAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,cAAc;;;;;;;;;;;;;;;;;;;;ACjC7B;AAC8E;AACc;AAC7B;AACV;AACrD;AACA,EAAiB;AACjB;AACA;AACA;AACA,eAAe,8EAAa;AAC5B;AACA;AACA,4BAA4B,wFAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,yBAAyB;AAC/C;AACA,sCAAsC,4EAAc;AACpD;AACA;AACA,wCAAwC,qBAAqB;AAC7D,kCAAkC,4EAAc;AAChD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,sBAAsB,qBAAqB;AAC3C;AACA,6BAA6B,4EAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,IAAI,sGAAsB;AAC1B;;;;;;;;;;;;;;;;;;;;;;AC7DsE;AACJ;AACY;AACtB;AACM;AACmC;AACjG;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wEAAa;AAC7C;AACA,6BAA6B,wEAAa;AAC1C;AACA;AACA,mDAAmD,kFAAa;AAChE;AACA;AACA;AACA;AACA;AACA,qCAAqC,wEAAa;AAClD,+CAA+C,kBAAkB;AACjE;AACA;AACA,mCAAmC,0FAA4B;AAC/D;AACA,gFAAgF,aAAa,SAAS,aAAa;AACnH;AACA,0CAA0C,sFAAiB,0BAA0B,uBAAuB;AAC5G,mEAAmE,uBAAuB,GAAG,cAAc;AAC3G;AACA,4CAA4C,4EAAc;AAC1D,2CAA2C,4EAAc;AACzD;AACA;AACA;AACA;AACA;AACA,6CAA6C,wEAAa;AAC1D,qCAAqC,gFAAW;AAChD;AACA;AACA;AACA;AACA;AACA,0CAA0C,4EAAsB;AAChE;AACA;AACA;AACA;AACA,6CAA6C,wEAAa;AAC1D;AACA;AACA;AACA,0CAA0C,4EAAsB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,wEAAa;AAChE;AACA;AACA;AACA,gDAAgD,4EAAsB;AACtE;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,mDAAmD,wEAAa;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gFAAW,0CAA0C,gFAAW;AAC3F;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,4BAA4B,wEAAa;AACzC;AACA,yBAAyB,wEAAa;AACtC;AACA;AACA,+CAA+C,kFAAa;AAC5D;AACA,6BAA6B,wEAAa;AAC1C,uCAAuC,cAAc;AACrD;AACA,2BAA2B,0FAA4B;AACvD;AACA;AACA,wEAAwE,aAAa,SAAS,aAAa;AAC3G;AACA,kCAAkC,sFAAiB,0BAA0B,uBAAuB;AACpG,2DAA2D,uBAAuB,GAAG,cAAc;AACnG;AACA,oCAAoC,4EAAc;AAClD,mCAAmC,4EAAc;AACjD;AACA;AACA;AACA;AACA,iCAAiC,wEAAa;AAC9C,yBAAyB,gFAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4EAAsB;AACpD;AACA;AACA;AACA;AACA,iCAAiC,wEAAa;AAC9C;AACA;AACA;AACA,8BAA8B,4EAAsB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,wEAAa;AACpD;AACA;AACA;AACA,oCAAoC,4EAAsB;AAC1D;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,uCAAuC,wEAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,gCAAgC,wEAAa;AAC7C;AACA,6BAA6B,wEAAa;AAC1C;AACA;AACA,mDAAmD,kFAAa;AAChE;AACA,iCAAiC,wEAAa;AAC9C,2CAA2C,cAAc;AACzD;AACA;AACA;AACA;AACA;AACA,4EAA4E,aAAa,SAAS,aAAa;AAC/G;AACA;AACA,sCAAsC,sFAAiB,0BAA0B,uBAAuB;AACxG,+DAA+D,uBAAuB,GAAG,cAAc;AACvG;AACA,wCAAwC,4EAAc;AACtD,uCAAuC,4EAAc;AACrD;AACA;AACA;AACA,qCAAqC,wEAAa;AAClD;AACA;AACA,qCAAqC,wEAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,wEAAa;AACpD;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,iEAAe,YAAY;;;;;;;;;;;;;AChP3B;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iEAAe;;;;;;;;;;;;;;;;;;ACnCwC;AACc;AACQ;AACX;AAClE;AACA;AACA;AACA,yBAAyB,wEAAa;AACtC;AACA,8BAA8B,wEAAa;AAC3C;AACA,mBAAmB,wEAAa;AAChC;AACA,qBAAqB,wEAAa;AAClC,2CAA2C,kFAAa;AACxD;AACA;AACA;AACA;AACA;AACA,gEAAgE,aAAa,SAAS,aAAa;AACnG;AACA,0BAA0B,sFAAiB,0BAA0B,uBAAuB;AAC5F,mDAAmD,uBAAuB,GAAG,cAAc;AAC3F;AACA;AACA,4BAA4B,4EAAc;AAC1C,2BAA2B,4EAAc;AACzC;AACA;AACA,uBAAuB,wEAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe;;;;;;;;;;;;;;;;;;AClD2B;AACc;AACxD;AACA,0BAA0B,gFAAgF;AAC1G;AACA,6BAA6B,wEAAa,eAAe,UAAU;AACnE;AACA,+BAA+B,wEAAa,eAAe,UAAU;AACrE;AACA,mBAAmB,wEAAa;AAChC;AACA,+BAA+B,kEAAY;AAC3C;AACA,+BAA+B,kEAAY;AAC3C;AACA;AACA;AACA,kCAAkC,wEAAa;AAC/C;AACA,+CAA+C,cAAc,WAAW,iBAAiB;AACzF,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,eAAe;;;;;;;;;;;;;;;;;;;;;;ACtCgC;AACN;AACU;AACI;AACQ;AACX;AACnE;AACA,oCAAoC,gFAAgF;AACpH;AACA,6BAA6B,wEAAa,yBAAyB,UAAU;AAC7E;AACA,+BAA+B,wEAAa,eAAe,UAAU;AACrE;AACA,mBAAmB,wEAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wEAAa;AACzC;AACA,yBAAyB,wEAAa;AACtC;AACA;AACA,+CAA+C,kFAAa;AAC5D,mCAAmC,cAAc;AACjD;AACA;AACA,oEAAoE,aAAa,SAAS,aAAa;AACvG;AACA,8BAA8B,sFAAiB,0BAA0B,uBAAuB;AAChG,uDAAuD,uBAAuB,GAAG,cAAc;AAC/F;AACA,gCAAgC,4EAAc;AAC9C,+BAA+B,4EAAc;AAC7C;AACA;AACA;AACA,iCAAiC,wEAAa;AAC9C,yBAAyB,gFAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4EAAsB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,gCAAgC,wEAAa;AAC7C;AACA,6BAA6B,wEAAa;AAC1C,mDAAmD,kFAAa;AAChE,uCAAuC,cAAc;AACrD;AACA,qCAAqC,wEAAa;AAClD;AACA;AACA,qCAAqC,wEAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,iEAAe,yBAAyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/G4B;AACZ;AACH;AACU;AACZ;AACI;AACD;AACF;AACH;AACuE;AACnE;AACO;AACN;AACN;AACe;AACiB;AAChF;AACA;AACA,IAAI,4EAAc;AAClB,IAAI,qFAAkB;AACtB,0CAA0C,yEAAM;AAChD;AACA;AACA,uBAAuB,8EAAa;AACpC;AACA,WAAW,gFAAkB;AAC7B;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI,qEAAe,CAAC,4EAAc,wCAAwC,8EAAa,IAAI,gFAAkB;AAC7G,IAAI,2EAAa;AACjB;AACA,4BAA4B,2EAAW;AACvC,6BAA6B,2EAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,aAAa;AAChD,kCAAkC,sEAAS;AAC3C,iCAAiC,wEAAgB;AACjD;AACA,sBAAsB,0EAAY;AAClC;AACA,0BAA0B,yEAAa;AACvC,0CAA0C,yEAAa;AACvD,4DAA4D,cAAc;AAC1E;AACA;AACA;AACA,qCAAqC,yEAAa;AAClD,uCAAuC,yEAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,yEAAa;AACvD,4CAA4C,yEAAa;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yEAAa;AAClD,uCAAuC,yEAAa;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,EAAE,2EAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,EAAE,iFAAe;AAC3B;AACA;AACA,kCAAkC,2EAAW;AAC7C;AACA,gCAAgC,yEAAa;AAC7C,wCAAwC,yEAAa;AACrD,4BAA4B,yEAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,8EAAY;AACpD;AACA,wCAAwC,8EAAY;AACpD;AACA;AACA;AACA,0CAA0C,yEAAa;AACvD;AACA,uDAAuD,cAAc,WAAW,iBAAiB;AACjG,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,MAAM;AAC7C,qGAAqG,EAAE;AACvG,+CAA+C,MAAM;AACrD,qEAAqE,yEAAa;AAClF;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,EAAE,iFAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,EAAE,iFAAe;AAC3B;AACA;AACA,kCAAkC,2EAAW;AAC7C;AACA,gCAAgC,yEAAa;AAC7C,wCAAwC,yEAAa;AACrD,4BAA4B,yEAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,8EAAY;AACpD;AACA,wCAAwC,8EAAY;AACpD;AACA;AACA;AACA,0CAA0C,yEAAa;AACvD;AACA,uDAAuD,cAAc,WAAW,iBAAiB;AACjG,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,MAAM;AAC7C,qGAAqG,EAAE;AACvG,+CAA+C,MAAM;AACrD,qEAAqE,yEAAa;AAClF;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,2EAAW;AAClD;AACA;AACA;AACA;AACA,UAAU,EAAE,2EAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,EAAE,iFAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,EAAE,iFAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,EAAE,4FAAyB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,EAAE,4FAAyB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,EAAE,4FAAyB;AACrC;AACA;AACA,kCAAkC,2EAAW;AAC7C;AACA,gCAAgC,yEAAa;AAC7C,wCAAwC,yEAAa;AACrD,4BAA4B,yEAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,8EAAY;AACpD;AACA,wCAAwC,8EAAY;AACpD;AACA;AACA;AACA,0CAA0C,yEAAa;AACvD;AACA,uDAAuD,cAAc,WAAW,iBAAiB;AACjG,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,MAAM;AAC7C,qGAAqG,EAAE;AACvG,+CAA+C,MAAM;AACrD,qEAAqE,yEAAa;AAClF;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe;;;;;;;;;;;;;;;;;AC1ZmD;AAClE;AACe;AACf;AACA;AACA;AACA;AACA,4BAA4B,2EAAW;AACvC;AACA,OAAO;AACP;AACA;AACA,4BAA4B,2EAAW;AACvC;AACA,OAAO;AACP;AACA;AACA,4BAA4B,2EAAW;AACvC;AACA;AACA;AACA;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iEAAe;;;;;;;;;;;;;;;;ACT+C;AACkB;AAChF;AACe;AACf;AACA,mBAAmB,gFAAQ;AAC3B;AACA,IAAI,yFAAiB,oBAAoB,aAAa;AACtD;AACA;;;;;;;;;;;;;;;;;;;ACT8D;AACkB;AAChF;AACe;AACf,mBAAmB,gFAAQ;AAC3B,oBAAoB,yFAAiB;AACrC;AACA;;;;;;;;;;;;;;;;;;ACPkE;AAClE;AACe;AACf;AACA,gCAAgC,2EAAW;AAC3C;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;;;;;;;;;;;;;;;;;;;;;;ACZgD;AACwB;AACL;AAC6B;AAC9B;AAClE;AACA;AACA,IAAI,mFAAkB;AACtB,0BAA0B,iFAAgB;AAC1C,WAAW,yCAAyC,EAAE,qEAAe;AACrE;AACA,gCAAgC,wCAAwC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,iFAAU,sBAAsB;AACtE,sCAAsC,mFAAmF;AACzH;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wCAAwC;AAC1D;AACA,gCAAgC,kCAAkC;AAClE,MAAM;AACN,8BAA8B,kCAAkC;AAChE;AACA;AACA;AACA;AACA,0BAA0B,kCAAkC;AAC5D;AACA;AACA;AACA,2CAA2C,cAAc;AACzD;AACA;AACA;AACA;AACA;AACA,wBAAwB,kCAAkC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2EAAW;AACpC,MAAM;AACN,yBAAyB,2EAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C,wCAAwC,+EAAe;AACvD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,SAAS;AACxC;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe;;;;;;;;;;;;;;;;;;;AC3I4D;AACN;AACsB;AAC3F;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uGAAuB;AAC5C,iDAAiD,WAAW;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,WAAW,IAAI,WAAW;AAC1D;AACA;AACA;AACA;AACA;AACA,mCAAmC,aAAa;AAChD;AACA;AACA;AACA,2BAA2B,+FAAe;AAC1C;AACA;AACA;AACA;AACA;AACA,uBAAuB,oFAAU;AACjC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrDgF;AACP;AACE;AAC3E;AACe;AACf;AACA;AACA;AACA,sBAAsB,4FAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC/BA;AACA;AACA,wBAAwB,yBAAyB;AACjD,oCAAoC;AACpC,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;;;;;;;;;;;;;;;;;;ACvD0D;AACI;AACa;AAChB;AAC3D;AACe;AACf,EAAE,8EAAc;AAChB,EAAE,sFAAkB;AACpB,oBAAoB,4EAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,4EAAmB;AACxC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACrB8E;AACI;AACZ;AACW;AACjF;AACe;AACf,EAAE,sFAAkB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,sBAAsB,iGAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,MAAM;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2FAAW;AAC5B;AACA;AACA,MAAM;AACN,iBAAiB,2FAAW;AAC5B;AACA;AACA;AACA,2BAA2B,2FAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;;;;;;;;AClImE;AACL;AACqB;AACnF;AACA;AACA;AACA,qBAAqB,+EAAc;AACnC;AACA,aAAa,oFAAe;AAC5B;AACA;AACA;AACA,0CAA0C,+FAAmB;AAC7D,KAAK;AACL;AACA;AACA;AACA,iEAAe,iBAAiB,EAAC;;;;;;;;;;;;;;;;;;;;ACjB8B;AACF;AACW;AACY;AACpF;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sFAAiB;AACzC;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,yCAAyC,WAAW;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0FAA4B;AAC1D;AACA,2BAA2B,mFAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,qEAAO,iBAAiB;AACxE;AACA,MAAM;AACN;AACA,kEAAkE,aAAa,SAAS,aAAa;AACrG,4BAA4B,sFAAiB,kBAAkB,uBAAuB;AACtF,8CAA8C,uBAAuB,GAAG,cAAc;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8EAAgB;AACpC;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjFgG;AACpC;AACM;AACA;AACY;AACN;AACZ;AACQ;AACZ;AAC0B;AACU;AACH;AACN;AACnF,EAAiB;AACjB,IAAI,sFAAkB;AACtB,IAAI,8EAAc;AAClB,0BAA0B,qFAAgB;AAC1C,sBAAsB,6EAAY;AAClC;AACA;AACA;AACA,6BAA6B,8EAAW;AACxC;AACA;AACA,4BAA4B,8EAAW;AACvC;AACA,8BAA8B,gFAAQ;AACtC;AACA,MAAM,yFAAiB;AACvB,KAAK;AACL;AACA;AACA,4CAA4C,8EAAW;AACvD;AACA;AACA,8BAA8B,mFAAW;AACzC;AACA;AACA;AACA,wCAAwC,oFAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gFAAQ;AACtC;AACA,MAAM,yFAAiB;AACvB,KAAK;AACL;AACA,4CAA4C,8EAAW;AACvD;AACA;AACA,8BAA8B,mFAAW;AACzC;AACA;AACA;AACA,wCAAwC,oFAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wGAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sGAAkB;AAC3C;AACA;AACA;AACA;AACA,iCAAiC,8FAAmB;AACpD;AACA;AACA;AACA,iCAAiC,kFAAe;AAChD;AACA;AACA;AACA,oBAAoB,iCAAiC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,2GAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;AClKA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,2BAA2B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,uBAAuB;AAC3E,oDAAoD,uBAAuB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,kBAAkB;;;;;;;;;;;;;;;AC/DoC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,mCAAmC,iFAAU;AAC7C;AACA,iEAAiE,uBAAuB,OAAO,uBAAuB;AACtH;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iEAAe,gCAAgC;;;;;;;;;;;;;ACrC/C;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,mCAAmC;;;;;;;;;;;;;;;;;;;;ACpBQ;AACgF;AACyB;AAC/E;AACY;AACN;AAC1F;AACA,qCAAqC,sGAAsG;AAC3I;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,IAAI,uEAAgB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iGAAmC,CAAC,8FAAyB;AAC/E;AACA;AACA,eAAe,8FAAgC,0BAA0B,8FAAyB;AAClG;AACA;AACA;AACA;AACA;AACA,6IAA4B,GAAG,uGAAuG;AACtI;AACA;AACA,wJAAwC,EAAE,sGAAsG;AAChJ;AACA;AACA,iEAAe,uBAAuB;;;;;;;;;;;;;;;;;;;;ACxCY;AACc;AACiB;AACH;AAC9E;AACA,gCAAgC,2EAA2E;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qEAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0FAA4B;AACtD;AACA,6BAA6B,wEAAiB;AAC9C,6BAA6B,wEAAiB;AAC9C;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,oEAAoE,iBAAiB,SAAS,iBAAiB;AAC/G;AACA;AACA;AACA;AACA,sCAAsC,sFAAiB,2BAA2B,uBAAuB;AACzG,qDAAqD,uBAAuB,GAAG,sBAAsB;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,sFAAiB,2BAA2B,uBAAuB;AACzG,qDAAqD,uBAAuB,GAAG,sBAAsB;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,qBAAqB;;;;;;;;;;;;;AClEpC,kFAAkF,gKAAgK;AAClP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,IAAI,iEAAe,sBAAsB;;;;;;;;;;;AC3DzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iEAAe,WAAW;;;;;;;;;;;AChB1B;AACA;AACA,+BAA+B,UAAU;AACzC;AACA;AACA;AACA,iEAAe;;;;;;;;;;;;;;;ACNsD;AACrE;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA;AACA,yBAAyB,+EAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,iEAAe;;;;;;;;;;;;;;AC5B2C;AAC1D;AACA,2EAA2E,uCAAuC;AAClH;AACA;AACA;AACA,IAAI,uEAAgB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,iEAAe,qBAAqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3D8B;AACA;AACN;AACM;AACY;AACQ;AACd;AACZ;AACF;AACgB;AACxB;AACyB;AACF;AACF;AACY;AAC7B;AACY;AAClE;AACA,uBAAuB,qFAAa;AACpC;AACA,EAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,+EAAc;AAClB,IAAI,uFAAkB;AACtB;AACA;AACA,aAAa,mFAAW;AACxB,iBAAiB,gFAAQ;AACzB,sBAAsB,yFAAiB,KAAK,gFAAQ,sBAAsB;AAC1E;AACA,MAAM;AACN,aAAa,mFAAW;AACxB,iBAAiB,gFAAQ;AACzB,sBAAsB,yFAAiB,KAAK,gFAAQ,sBAAsB;AAC1E;AACA;AACA;AACA,4BAA4B,8EAAW;AACvC;AACA;AACA;AACA;AACA;AACA,wBAAwB,oFAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA,UAAU,6FAAqB;AAC/B,4BAA4B,UAAU,EAAE,aAAa;AACrD;AACA;AACA;AACA;AACA,IAAI,2EAAgB;AACpB,IAAI,2EAAgB;AACpB,IAAI,2EAAgB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wEAAU;AACxC;AACA;AACA,eAAe,sFAAiB;AAChC;AACA;AACA,iCAAiC,gFAAW;AAC5C;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2FAAsB;AACrD;AACA;AACA;AACA,kCAAkC,2FAAsB;AACxD;AACA,mCAAmC,2FAAsB;AACzD;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,wCAAwC,2FAAkB,mDAAmD;AAC7G;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,8CAA8C;AACxD,0BAA0B,uFAAqB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,4FAA2B;AAC7B;AACA;AACA;AACA;AACA,EAAE,4FAA2B;AAC7B;AACA,GAAG;AACH,CAAC;AACD;;;;;;;;;;;;;;;;;;;AClL+C;AACiB;AACG;AACnE;AACA;AACA;AACA;AACA;AACA,yBAAyB,qEAAU;AACnC,yBAAyB,qFAAe;AACxC,yBAAyB,uFAAgB;AACzC,yBAAyB,uFAAgB;AACzC;AACA;AACA;AACA;AACA,iEAAe,gBAAgB;;;;;;;;;;;;;;;;;AChBiC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,WAAW;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,YAAY;AAC9E;AACA;AACA;AACA,oEAAoE,YAAY;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wEAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe;;;;;;;;;;;;;AC3Cf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,eAAe;;;;;;;;;;;;;;;;;;;;ACZ2B;AACY;AAChB;AACsB;AACJ;AACrB;AAClD;AACe;AACf,IAAI,2EAAc;AAClB,IAAI,mFAAkB;AACtB,IAAI,yEAAY;AAChB;AACA;AACA,0BAA0B,sFAAiB,gBAAgB,UAAU;AACrE,0BAA0B,sFAAiB,gBAAgB,UAAU;AACrE;AACA,qBAAqB,sEAAgB;AACrC;AACA;AACA;AACA;AACA,wCAAwC,yFAAkB,kDAAkD;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAAe,QAAQ;;ACVvB;AACA;AACA;AACA;AACA;AACA,uCAAuC,aAAa;AACpD;AACA;AACA;AACA;AACA;AACA,mEAAe,YAAY;;;ACX3B;AACA;AACA;AACA;AACA;AACA,iCAAiC,MAAM,IAAI,QAAQ,IAAI,MAAM;AAC7D;AACA;AACA;AACA;AACA;AACA,iEAAe,UAAU;;;ACXzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAe,aAAa;;ACZ5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAAe,kBAAkB;;ACZjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAAe,mBAAmB;;ACZlC;AACA;AACA;AACA,8CAA8C,YAAY;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAe,gBAAgB;;ACXkB;AACS;AACL;AACK;AACiB;AACG;AACX;AACnE;AACA;AACA;AACA;AACA;AACA,yBAAyB,wBAAQ;AACjC,yBAAyB,4BAAY;AACrC,yBAAyB,0BAAU;AACnC,yBAAyB,2BAAa;AACtC,yBAAyB,mBAAkB;AAC3C,yBAAyB,oBAAmB;AAC5C,yBAAyB,iCAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,sEAAe,eAAe;;;;;;;;;;;;;;;;;;;;;;;;;;ACzB2B;AACJ;AACC;AACe;AACZ;AACR;AACiB;AACM;AACO;AACd;AACO;AACxB;AAChD;AACA;AACA,EAAE,2EAAc;AAChB,EAAE,mFAAkB;AACpB,EAAE,0EAAY;AACd,oBAAoB,0EAAY;AAChC;AACA;AACA;AACA,EAAE,4EAAS,kCAAkC,UAAU;AACvD,oBAAoB,kFAAa;AACjC;AACA;AACA;AACA,MAAM,oFAAsB;AAC5B;AACA,IAAI;AACJ;AACA;AACA;AACA,mBAAmB,sEAAe;AAClC;AACA,IAAI,sEAAe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AAmB;AACxC,sBAAsB,iFAAmB;AACzC,wBAAwB,qEAAO;AAC/B;AACA;AACA;AACA;AACA,eAAe,2EAAqB;AACpC,KAAK;AACL;AACA;AACA,iEAAe,iBAAiB;;;;;;;;;;;;;AClEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,QAAQ,EAAC;;;;;;;;;;;;;;;;;;ACRoC;AAClB;AACsC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kFAAa;AACrB,QAAQ;AACR;AACA,QAAQ,kFAAa;AACrB;AACA,MAAM;AACN;AACA;AACA,QAAQ,kFAAa;AACrB,QAAQ;AACR;AACA,QAAQ,kFAAa;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kEAAY;AACpB,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ,2FAAwB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,iEAAe,iBAAiB;;;;;;;;;;;;;AC/GlC;AACA;AACA;AACA;AACA;AACA,qCAAqC,cAAc;AACnD;AACA;AACA,+DAA+D,eAAe,QAAQ,eAAe;AACrG;AACA;AACA,+DAA+D,eAAe,QAAQ,eAAe,YAAY,eAAe;AAChI;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA,iEAAe,qBAAqB;;;;;;;;;;;AClBpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,gBAAgB;;;;;;;;;;;;;;;;;;;ACR6B;AACN;AACM;AACM;AACM;AACxE;AACA;AACA,EAAiB,+CAA+C,8EAAa;AAC7E;AACA;AACA,qCAAqC,2EAAW;AAChD;AACA;AACA;AACA;AACA,wBAAwB,oFAAa;AACrC;AACA;AACA;AACA;AACA,8BAA8B,6EAAQ;AACtC;AACA,UAAU,sFAAiB;AAC3B,SAAS;AACT;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA,wBAAwB,oFAAa;AACrC,2BAA2B,2EAAW;AACtC;AACA;AACA;AACA;AACA;AACA,+DAA+D,8EAAa;AAC5E;AACA,gCAAgC,6EAAQ;AACxC;AACA,YAAY,sFAAiB;AAC7B,WAAW;AACX;AACA;AACA,OAAO;AACP;AACA;;;;;;;;;;;;;;;;;;;AC9CoC;AACsB;AACM;AAChE;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+EAAiB;AACtC;AACA,uCAAuC,2DAAS;AAChD;AACA,MAAM,0EAAoB;AAC1B,MAAM;AACN;AACA,uCAAuC,2DAAS;AAChD;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC5BwE;AACxE;AACe;AACf;AACA;AACA;AACA,MAAM,sFAAiB;AACvB,KAAK;AACL;AACA,GAAG;AACH;;;;;;;;;;;;;;;;;;;;ACV+E;AACd;AACR;AACT;AAChD;AACe;AACf;AACA;AACA;AACA;AACA,eAAe,iFAAe;AAC9B;AACA;AACA;AACA,sBAAsB,6EAAW;AACjC,IAAI,wEAAW;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iGAAiB;AACrB;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,0DAAe,WAAW;;ACjC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAAe,aAAa;;AC5C5B;AACgD;AACI;AACpD;AACe;AACf;AACA;AACA,WAAW,mBAAW;AACtB;AACA;AACA;AACA;AACA,aAAa,qBAAa;AAC1B;AACA;;;;;;;;;;;;ACde;AACf;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACNe;AACf;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACHgF;AACpB;AACJ;AACI;AACE;AAC0G;AACxK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,2EAAW;AACrC,0BAA0B,4EAAW;AACrC;AACA;AACA,0FAAqB;AACrB,gBAAgB,KAAK,iFAAU,OAAO;AACtC,EAAE,0FAAqB,iBAAiB,iFAAU;AAClD,MAAM,0FAAqB,CAAC,iFAAU;AACtC;AACA,EAAE,0FAAqB;AACvB,IAAI,iFAAU;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAK,iFAAU,OAAO;AACtC,kBAAkB,IAAI,sFAAiB,SAAS;AAChD,oBAAoB,IAAI,sFAAiB,SAAS;AAClD,MAAM,0FAAqB,iBAAiB,iFAAU;AACtD,QAAQ,qFAAgB;AACxB;AACA,QAAQ,sFAAiB;AACzB,QAAQ,0FAAqB,iBAAiB,iFAAU;AACxD,UAAU,sFAAiB;AAC3B;AACA,qCAAqC,sFAAiB;AACtD;AACA;AACA;AACA,IAAI,0FAAqB,iBAAiB,iFAAU;AACpD,MAAM,qFAAgB;AACtB;AACA;AACA,MAAM,0FAAqB,iBAAiB,iFAAU;AACtD,QAAQ,sFAAiB;AACzB;AACA;AACA,IAAI,0FAAqB,iBAAiB,iFAAU;AACpD,MAAM,qFAAgB;AACtB;AACA;AACA,MAAM,0FAAqB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AACe;AACf,IAAI,2EAAe;AACnB,IAAI,+EAAiB;AACrB;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA,iEAAe,WAAW;;;;;;;;;;;ACJ1B;AACA;AACe;AACf;AACA;AACA;AACA,GAAG;AACH;;;;;;;;;;;ACPA;AACA;AACe;AACf;AACA;;;;;;;;;;;ACJA;AACA;AACe;AACf;AACA;AACA;AACA,GAAG;AACH;;;;;;;;;;;ACPA;AACA;AACe;AACf;AACA;;;;;;;;;;;ACJe;AACf;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACHoD;AACD;AACe;AACxB;AACsB;AACA;AACO;AACuB;AAC3B;AACF;AACL;AAC5D;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uEAAgB;AACpB;AACA,gDAAgD;AAChD,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,2BAA2B,0FAA4B;AACvD;AACA;AACA;AACA,sEAAsE,aAAa,SAAS,aAAa;AACzG;AACA;AACA;AACA;AACA,kCAAkC,sFAAiB,0BAA0B,uBAAuB;AACpG,qDAAqD,uBAAuB,GAAG,cAAc;AAC7F,wDAAwD,sFAAiB;AACzE;AACA;AACA;AACA;AACA,kCAAkC,2EAAW,sGAAsG,oFAAa;AAChK,oCAAoC,qEAAK;AACzC,kCAAkC,sFAAiB,yBAAyB,uBAAuB;AACnG;AACA,uDAAuD,uBAAuB,GAAG,cAAc;AAC/F,0D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CnC,sBAAsB,0DAAQ,aAAa,qEAAK;AAChD;AACA;AACA,iEAAe,aAAa;;;;;;;;;;;;;;;;;;ACV5B;AAC4D;AACK;AACjE;AACA;AACA;AACA,gBAAgB,IAAI,0EAAY,EAAE;AAClC;AACA,wBAAwB,qEAAK,aAAa,qEAAK;AAC/C;AACA;AACA,EAAE,iEAAe,QAAQ;;;;;;;;;;;;;;;;;;ACXzB;AAC4D;AACK;AACjE;AACA;AACA;AACA,gBAAgB,IAAI,0EAAY,EAAE;AAClC;AACA,oBAAoB,qEAAK,qBAAqB,qEAAK;AACnD;AACA;AACA,iEAAe,WAAW;;;;;;;;;;;;;;;;;;;ACX1B;AACiC;AACM;AAC0B;AACjE;AACA;AACA;AACA,gBAAgB,KAAK,0DAAQ,OAAO;AACpC;AACA,MAAM,0DAAQ;AACd;AACA;AACA,UAAU,2EAAW;AACrB,6CAA6C,6DAAW,KAAK,0DAAQ;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe;;;;;;;;;;;;;;;;;ACpBf;AACA;AAC4D;AAC5D;AACA;AACA,0BAA0B,2EAAW;AACrC;AACA;AACA,iEAAe;;;;;;;;;;;;;;;;;ACRf;AACA;AACA,EAA8D;AAC9D;AACA;AACA;AACA,YAAY,2EAAW;AACvB;AACA;AACA,EAAE,iEAAetBA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,IAAI;WACJ;WACA;WACA,IAAI;WACJ;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,CAAC;WACD;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;WACA,sGAAsG;WACtG;WACA;WACA;WACA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA,EAAE;WACF;WACA;;;;;WChEA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;UElBA;UACA;UACA;UACA","sources":["webpack://apple-jack/./img|C:/img|sync|/.(png%7Cjpe","webpack://apple-jack/./src/constants/consts/colors.js","webpack://apple-jack/./src/constants/consts/supportVars.js","webpack://apple-jack/./src/constants/consts/vars.js","webpack://apple-jack/./src/constants/masterHaxData.js","webpack://apple-jack/./src/index.js","webpack://apple-jack/./src/scripts/classFiles/players/helpers/setPlayersAllTimeStats.js","webpack://apple-jack/./src/scripts/classFiles/players/individualPlayerStats.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setAwayGames.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setAwayGoalsAgainst.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setAwayGoalsFor.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setAwayLosses.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setAwayPossessionAgainst.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setAwayPossessionFor.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setAwayWins.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setDraws.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setGamesPlayed.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setGoalDifferential.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setGoalsAgainst.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setGoalsAgainstAverage.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setGoalsFor.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setGoalsForAverage.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setHomeGames.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setHomeGoalsAgainst.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setHomeGoalsFor.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setHomeLosses.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setHomePossessionAgainst.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setHomePossessionFor.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setHomeWins.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setLosses.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setOvertimeLosses.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setOvertimeWins.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setPoints.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setPossessionAgainst.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setPossessionAgainstAverage.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setPossessionFor.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setPossessionForAverage.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setSavePercentage.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setShotDifferential.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setShotsAgainst.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setShotsAgainstAverage.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setShotsFor.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setShotsForAverage.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/helpers/setWins.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/setTeamsAllTimeStats.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/setTeamsAllTimeStatsMAPS.js","webpack://apple-jack/./src/scripts/classFiles/teams/helpers/teams/setTeamsIndividualSeasonsStatsMAPS.js","webpack://apple-jack/./src/scripts/classFiles/teams/teamStats.js","webpack://apple-jack/./src/scripts/layouts/announcements/AnnouncementsPageLayout.js","webpack://apple-jack/./src/scripts/layouts/announcements/announcementComponents/MainAnnouncement.js","webpack://apple-jack/./src/scripts/layouts/announcements/announcementComponents/Message.js","webpack://apple-jack/./src/scripts/layouts/announcements/setAnnouncements.js","webpack://apple-jack/./src/scripts/layouts/getTeamsGamesResults/getTeamsGamesResults.js","webpack://apple-jack/./src/scripts/layouts/getTeamsGamesResults/helpers/getGameResultClass.js","webpack://apple-jack/./src/scripts/layouts/getTeamsGamesResults/helpers/getGameResultText.js","webpack://apple-jack/./src/scripts/layouts/gifs/components/gifsHeader.js","webpack://apple-jack/./src/scripts/layouts/gifs/components/noGifs.js","webpack://apple-jack/./src/scripts/layouts/gifs/components/setGifContainers.js","webpack://apple-jack/./src/scripts/layouts/gifs/helpers/observeGifs.js","webpack://apple-jack/./src/scripts/layouts/gifs/setGifs.js","webpack://apple-jack/./src/scripts/layouts/navbar/helpers/setTeamLogoCss.js","webpack://apple-jack/./src/scripts/layouts/navbar/setMainNavbar.js","webpack://apple-jack/./src/scripts/layouts/playoffTree/componenets/bestOfSeries.js","webpack://apple-jack/./src/scripts/layouts/playoffTree/componenets/bestOfSeriesGameResult.js","webpack://apple-jack/./src/scripts/layouts/playoffTree/componenets/seriesBye.js","webpack://apple-jack/./src/scripts/layouts/playoffTree/componenets/seriesContainer.js","webpack://apple-jack/./src/scripts/layouts/playoffTree/componenets/singleGameSeriesContainer.js","webpack://apple-jack/./src/scripts/layouts/playoffTree/playoffTree.js","webpack://apple-jack/./src/scripts/layouts/records/genericRecordFunctions/filterGameResults.js","webpack://apple-jack/./src/scripts/layouts/records/genericRecordFunctions/getSelectValues.js","webpack://apple-jack/./src/scripts/layouts/records/genericRecordFunctions/getTeamLogo.js","webpack://apple-jack/./src/scripts/layouts/records/genericRecordFunctions/getTeamsBackgroundColor.js","webpack://apple-jack/./src/scripts/layouts/records/genericRecordFunctions/getTeamsPlayers.js","webpack://apple-jack/./src/scripts/layouts/records/genericRecordFunctions/showSelectedRecords.js","webpack://apple-jack/./src/scripts/layouts/records/recordViews/createIndividualRecord.js","webpack://apple-jack/./src/scripts/layouts/records/recordViews/createRecordsLayout.js","webpack://apple-jack/./src/scripts/layouts/records/recordViews/recordViewHtmlTemplates/recordsForm.js","webpack://apple-jack/./src/scripts/layouts/records/recordViews/setRecordsPage.js","webpack://apple-jack/./src/scripts/layouts/records/teamRecords/teamGoalsScored/teamGoalsScored.js","webpack://apple-jack/./src/scripts/layouts/records/teamRecords/teamRecordsExports.js","webpack://apple-jack/./src/scripts/layouts/setHeaderBanner.js","webpack://apple-jack/./src/scripts/layouts/singleGameStats/singleGameStats.js","webpack://apple-jack/./src/scripts/layouts/singleGameStats/singleGameStatsComponents/SingleGameBoxscore.js","webpack://apple-jack/./src/scripts/layouts/singleGameStats/singleGameStatsComponents/helpers/boxscorePlayersTableDataElements.js","webpack://apple-jack/./src/scripts/layouts/singleGameStats/singleGameStatsComponents/helpers/boxscorePlayersTableHeadersElements.js","webpack://apple-jack/./src/scripts/layouts/singleGameStats/singleGameStatsComponents/setPlayersBoxscoreTable.js","webpack://apple-jack/./src/scripts/layouts/singleGameStats/singleGameStatsComponents/singleGameStatsHeader.js","webpack://apple-jack/./src/scripts/layouts/teamPlayerList/components/createPlayerStatsTable.js","webpack://apple-jack/./src/scripts/layouts/teamPlayerList/components/playersList.js","webpack://apple-jack/./src/scripts/layouts/teamPlayerList/components/playersListHeader.js","webpack://apple-jack/./src/scripts/layouts/teamPlayerList/helpers/setTeamPlayerTableListeners.js","webpack://apple-jack/./src/scripts/layouts/teamPlayerList/helpers/sortTeamPlayersTables.js","webpack://apple-jack/./src/scripts/layouts/teamPlayerList/teamPlayerList.js","webpack://apple-jack/./src/scripts/layouts/teamsColorLayout/ColorsPageLayout.js","webpack://apple-jack/./src/scripts/layouts/teamsColorLayout/TeamsLogoElement/TeamsLogoElement.js","webpack://apple-jack/./src/scripts/layouts/teamsColorLayout/colorPageHeader/colorPageHeader.js","webpack://apple-jack/./src/scripts/layouts/teamsColorLayout/teamsColorsPage.js","webpack://apple-jack/./src/scripts/layouts/teamsPageLayout/teamsPageHeader/TeamName.js","webpack://apple-jack/./src/scripts/layouts/teamsPageLayout/teamsPageHeader/SeasonNumber.js","webpack://apple-jack/./src/scripts/layouts/teamsPageLayout/teamsPageHeader/TeamRecord.js","webpack://apple-jack/./src/scripts/layouts/teamsPageLayout/playersButton/PlayersButton.js","webpack://apple-jack/./src/scripts/layouts/teamsPageLayout/seasonResultsButton/SeasonResultsButton.js","webpack://apple-jack/./src/scripts/layouts/teamsPageLayout/playoffResultsButton/PlayoffResultsButton.js","webpack://apple-jack/./src/scripts/layouts/teamsPageLayout/teamColorsButton/TeamColorsButton.js","webpack://apple-jack/./src/scripts/layouts/teamsPageLayout/TeamsPageLayout.js","webpack://apple-jack/./src/scripts/layouts/teamsPageLayout/setTeamsPageLayout.js","webpack://apple-jack/./src/scripts/listeners/listenerHelpers/setListenersMainNavbar.js","webpack://apple-jack/./src/scripts/listeners/listenerHelpers/setTableListeners.js","webpack://apple-jack/./src/scripts/listeners/listeners.js","webpack://apple-jack/./src/scripts/listeners/menubarListeners/menubarListeners.js","webpack://apple-jack/./src/scripts/listeners/pageListeners/announcementsListener.js","webpack://apple-jack/./src/scripts/listeners/pageListeners/boxscorePage/boxscorePlayerTables/playerBoxscoreTableListeners.js","webpack://apple-jack/./src/scripts/listeners/pageListeners/boxscorePage/boxscorePlayerTables/updatePlayersBoxscoreTableResizeListener.js","webpack://apple-jack/./src/scripts/listeners/pageListeners/leagueRecordsListener.js","webpack://apple-jack/./src/scripts/listeners/playerTableListeners/playerTableListeners.js","webpack://apple-jack/./src/scripts/listeners/seasonTableListeners/seasonTableListeners.js","webpack://apple-jack/./src/scripts/listeners/tablesDivObserver.js","webpack://apple-jack/./src/scripts/loadImages.js","webpack://apple-jack/./src/scripts/misc/backButton.js","webpack://apple-jack/./src/scripts/misc/createCssLogoSkeleton.js","webpack://apple-jack/./src/scripts/misc/createElement.js","webpack://apple-jack/./src/scripts/misc/createTeamCssLogo.js","webpack://apple-jack/./src/scripts/misc/debounce.js","webpack://apple-jack/./src/scripts/misc/documentResize.js","webpack://apple-jack/./src/scripts/misc/getTeams3DColorScheme.js","webpack://apple-jack/./src/scripts/misc/parsedStringToDOM.js","webpack://apple-jack/./src/scripts/misc/playerTableBgColor.js","webpack://apple-jack/./src/scripts/misc/screenResize.js","webpack://apple-jack/./src/scripts/misc/setTeamsTableBgColor.js","webpack://apple-jack/./src/scripts/misc/sortTable.js","webpack://apple-jack/./src/scripts/misc/sorting/helpers/teamSorting.js","webpack://apple-jack/./src/scripts/misc/sorting/helpers/playerSorting.js","webpack://apple-jack/./src/scripts/misc/sorting/sort.js","webpack://apple-jack/./src/scripts/scoreboard/clearScoreboardDiv.js","webpack://apple-jack/./src/scripts/scoreboard/getScoreboardDiv.js","webpack://apple-jack/./src/scripts/setTables/createPlayer.js","webpack://apple-jack/./src/scripts/setTables/createTeam.js","webpack://apple-jack/./src/scripts/sidebar/closeSidebar.js","webpack://apple-jack/./src/scripts/sidebar/hideAllSubMenus.js","webpack://apple-jack/./src/scripts/sidebar/openSidebar.js","webpack://apple-jack/./src/scripts/sidebar/players/displayPlayerSubMenu.js","webpack://apple-jack/./src/scripts/sidebar/players/hidePlayerSubMenu.js","webpack://apple-jack/./src/scripts/sidebar/teams/displayTeamSubMenu.js","webpack://apple-jack/./src/scripts/sidebar/teams/hideTeamSubMenu.js","webpack://apple-jack/./src/scripts/tables/clearTablesDiv.js","webpack://apple-jack/./src/scripts/tables/createTable.js","webpack://apple-jack/./src/scripts/tables/getTablesDiv.js","webpack://apple-jack/./src/scripts/tables/setHomeTable.js","webpack://apple-jack/./src/scripts/tables/setPlayersAllTimeTable.js","webpack://apple-jack/./src/scripts/tables/setPlayersFullTable.js","webpack://apple-jack/./src/scripts/tables/setSeasonsFullTable.js","webpack://apple-jack/./src/scripts/var_lib/maps/gameType/gameTypeMAP.js","webpack://apple-jack/./src/scripts/var_lib/maps/players/playerSeasonsMAP.js","webpack://apple-jack/./src/scripts/var_lib/maps/players/playersMAP.js","webpack://apple-jack/./src/scripts/var_lib/maps/players/playersNumMAP.js","webpack://apple-jack/./src/scripts/var_lib/maps/tableDataSourceMAP.js","webpack://apple-jack/./src/scripts/var_lib/maps/tableFieldsMAP.js","webpack://apple-jack/./src/scripts/var_lib/maps/teams/eachSeasonsTeamsMAP.js","webpack://apple-jack/./src/scripts/var_lib/maps/teams/eachTeamObjectMAP.js","webpack://apple-jack/./src/scripts/var_lib/maps/teams/teamsColorMAP.js","webpack://apple-jack/./src/scripts/var_lib/maps/teams/teamsMAP.js","webpack://apple-jack/./src/scripts/var_lib/maps/teams/teamsNumMAP.js","webpack://apple-jack/./src/scripts/var_lib/maps/teams/teamsSeasonsMAP.js","webpack://apple-jack/./src/scripts/var_lib/season/currentSeason.js","webpack://apple-jack/./src/scripts/var_lib/season/seasonCount.js","webpack://apple-jack/webpack/bootstrap","webpack://apple-jack/webpack/runtime/async module","webpack://apple-jack/webpack/runtime/define property getters","webpack://apple-jack/webpack/runtime/global","webpack://apple-jack/webpack/runtime/hasOwnProperty shorthand","webpack://apple-jack/webpack/runtime/publicPath","webpack://apple-jack/webpack/before-startup","webpack://apple-jack/webpack/startup","webpack://apple-jack/webpack/after-startup"],"sourcesContent":["var map = {\n\t\"./championsBanner.png\": 7002,\n\t\"./favicon/haxFav.png\": 6375,\n\t\"./favicon/haxFav.svg\": 7576,\n\t\"./haxball-big-min.png\": 1058,\n\t\"./haxball-big-min.svg\": 5805,\n\t\"./nhl94.com.png\": 7564,\n\t\"./original-logo.svg\": 4636,\n\t\"./teamLogos/S01/CEGUnited.png\": 9829,\n\t\"./teamLogos/S01/HaxualChocolate.png\": 2804,\n\t\"./teamLogos/S01/Mooney.png\": 2486,\n\t\"./teamLogos/S01/Mooney3rdS01.svg\": 6740,\n\t\"./teamLogos/S01/MooneyAwayS01.svg\": 8711,\n\t\"./teamLogos/S01/MooneyHomeS01.svg\": 6970,\n\t\"./teamLogos/S01/SAD.png\": 8255,\n\t\"./teamLogos/S01/cegAlternate.png\": 7296,\n\t\"./teamLogos/S01/cegAwayS01.svg\": 9249,\n\t\"./teamLogos/S01/cegHomeS01.svg\": 4884,\n\t\"./teamLogos/S01/dotHax.png\": 7271,\n\t\"./teamLogos/S01/haxHomeS01.svg\": 9028,\n\t\"./teamLogos/S01/haxualChocolateAwayS01.svg\": 7709,\n\t\"./teamLogos/S01/haxualChocolateHomeS01.svg\": 976,\n\t\"./teamLogos/S01/sadAwayS01.svg\": 1920,\n\t\"./teamLogos/S01/sadHomeS01.svg\": 9373,\n\t\"./teamLogos/S02/CESPool.png\": 3985,\n\t\"./teamLogos/S02/HaxualChocolate.png\": 3591,\n\t\"./teamLogos/S02/Mooney.png\": 2923,\n\t\"./teamLogos/S02/MooneyAwayS02.svg\": 1839,\n\t\"./teamLogos/S02/MooneyHomeS02.svg\": 3914,\n\t\"./teamLogos/S02/S01/Mooney3rdS01.svg\": 2284,\n\t\"./teamLogos/S02/S01/MooneyAwayS01.svg\": 831,\n\t\"./teamLogos/S02/S01/MooneyHomeS01.svg\": 3826,\n\t\"./teamLogos/S02/S01/cegAlternate.png\": 4152,\n\t\"./teamLogos/S02/S01/cegAwayS01.svg\": 1081,\n\t\"./teamLogos/S02/S01/cegHomeS01.svg\": 2172,\n\t\"./teamLogos/S02/S01/haxHomeS01.svg\": 9612,\n\t\"./teamLogos/S02/S01/haxualChocolateAwayS01.svg\": 4901,\n\t\"./teamLogos/S02/S01/haxualChocolateHomeS01.svg\": 5000,\n\t\"./teamLogos/S02/S01/sadAwayS01.svg\": 5576,\n\t\"./teamLogos/S02/S01/sadHomeS01.svg\": 1669,\n\t\"./teamLogos/S02/cesPoolAwayS02.svg\": 6057,\n\t\"./teamLogos/S02/cesPoolHomeS02.svg\": 9676,\n\t\"./teamLogos/S02/haxelRose.png\": 8025,\n\t\"./teamLogos/S02/haxelRoseAwayS02.svg\": 1873,\n\t\"./teamLogos/S02/haxelRoseHomeS02.svg\": 9156,\n\t\"./teamLogos/S02/haxualChocolateAwayS02.svg\": 4539,\n\t\"./teamLogos/S02/haxualChocolateHomeS02.svg\": 870,\n\t\"./teamLogos/S03/Hacks.png\": 2391,\n\t\"./teamLogos/S03/HaxHogans.png\": 7916,\n\t\"./teamLogos/S03/HaxualChocolate.png\": 9558,\n\t\"./teamLogos/S03/hacksAwayS03.svg\": 7418,\n\t\"./teamLogos/S03/hacksHomeS03.svg\": 9031,\n\t\"./teamLogos/S03/haxHogansAwayS03.svg\": 3623,\n\t\"./teamLogos/S03/haxHogansHomeS03.svg\": 186,\n\t\"./teamLogos/S03/haxualChocolateAwayS03.svg\": 4261,\n\t\"./teamLogos/S03/haxualChocolateHomeS03.svg\": 4552,\n\t\"./teamLogos/S03/orangeRicky.png\": 3313,\n\t\"./teamLogos/S03/orangeRickyAwayS03.svg\": 2856,\n\t\"./teamLogos/S03/orangeRickyHomeS03.svg\": 1677,\n\t\"./teamLogos/S03/spaceballsTheHC.png\": 2971,\n\t\"./teamLogos/S03/spaceballsTheHcAwayS03.svg\": 6062,\n\t\"./teamLogos/S03/spaceballsTheHcHomeS03.svg\": 6363,\n\t\"./teamLogos/S03/ultraticklenipple.png\": 2159,\n\t\"./teamLogos/S03/ultraticklenippleAwayS03.svg\": 8786,\n\t\"./teamLogos/S03/ultraticklenippleHomeS03.svg\": 8511,\n\t\"./teamLogos/S04/Degeneration Hax.png\": 3668,\n\t\"./teamLogos/S04/Nighthax.png\": 9757,\n\t\"./teamLogos/S04/The Hax Foundation.png\": 3661,\n\t\"./teamLogos/S04/Trinity Nuclear Test.png\": 4373,\n\t\"./teamLogos/S04/degenerationHaxAwayS04.svg\": 6000,\n\t\"./teamLogos/S04/degenerationHaxHomeS04.svg\": 893,\n\t\"./teamLogos/S04/dotHax.png\": 9288,\n\t\"./teamLogos/S04/nighthaxAwayS04.svg\": 9899,\n\t\"./teamLogos/S04/nighthaxHomeS04.svg\": 7766,\n\t\"./teamLogos/S04/theHaxFoundationAwayS04.svg\": 501,\n\t\"./teamLogos/S04/theHaxFoundationHomeS04.svg\": 6056,\n\t\"./teamLogos/S04/trinityNuclearTestAwayS04.svg\": 9679,\n\t\"./teamLogos/S04/trinityNuclearTestHomeS04.svg\": 8282,\n\t\"./teamLogos/S05/Haxvetica.png\": 5362,\n\t\"./teamLogos/S05/Phoenhax Coyotes.png\": 80,\n\t\"./teamLogos/S05/Scribeathonenest.png\": 6596,\n\t\"./teamLogos/S05/TES-la (DOHE).png\": 804,\n\t\"./teamLogos/S05/USHAX.png\": 7128\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 5179;","const COLORS = {\r\n    \"w3-blue\" : \"#2196f3\",\r\n}\r\n\r\nexport default COLORS\r\n","// for teams class\r\n\r\nexport const seasonMode = [\"Combined\", \"Season\", \"Playoff\"];\r\nexport const teamStatsFieldsAbbreviated = [\r\n      \"GP\",\r\n      \"Win\",\r\n      \"Loss\",\r\n      \"Draw\",\r\n      \"Points\",\r\n      \"GF\",\r\n      \"GA\",\r\n      \"GD\",\r\n      \"GFA\",\r\n      \"GAA\",\r\n    ]\r\nexport const teamStatsFields = [\r\n      \"GamesPlayed\",\r\n      \"Win\",\r\n      \"Loss\",\r\n      \"Draw\",\r\n      \"Points\",\r\n      \"GoalsFor\",\r\n      \"GoalsAgainst\",\r\n      \"GoalDifferential\",\r\n      \"GoalsForAverage\",\r\n      \"GoalsAgainstAverage\",\r\n    ]\r\nexport const teamStatsFieldNamesMAP = [\r\n      \"allTimeGamesPlayed\",\r\n      \"allTimeWins\",\r\n      \"allTimeLosses\",\r\n      \"allTimeDrawsLength\",\r\n      \"allTimePoints\",\r\n      \"allTimeGoals\",\r\n      \"allTimeGoalsAgainst\",\r\n      \"allTimeGoalDifferential\",\r\n      \"allTimeGoalsForAverage\",\r\n      \"allTimeGoalsAgainstAverage\",\r\n    ]\r\n\r\nexport const groupedAllTimeTeamStats = [\r\n      \"groupTeamsAllTimeStats\",\r\n      \"groupTeamsAllTimeSeasonStats\",\r\n      \"groupTeamsAllTimePlayoffStats\",\r\n    ]\r\nexport const statsType = [\"CombinedStats\", \"SeasonStats\", \"PlayoffStats\"]\r\n\r\n// forplayer class\r\n\r\nexport const  playerSeasonMode = [\"Season\", \"Playoff\"];\r\n// these fields are for offscreen data and those used via reduce method. fields that can be simply added together\r\nexport const  playerStatsFields = [\r\n  \"Assists\",\r\n  \"Goals\",\r\n  \"Points\",\r\n  \"Kicks\",\r\n  \"Passes\",\r\n  \"ShotsOnGoal\",\r\n  \"OwnGoals\",\r\n];\r\n  export const  groupedAllTimePlayerStats = [\r\n    \"groupPlayersAllTimeStats\",\r\n    \"groupPlayersAllTimeSeasonStats\",\r\n    \"groupPlayersAllTimePlayoffStats\",\r\n  ];\r\n  export const  allTimeMapNames = [\r\n    \"groupPlayersAllTimeStatsMAP\",\r\n    \"groupPlayersAllTimeSeasonStatsMAP\",\r\n    \"groupPlayersAllTimePlayoffStatsMAP\",\r\n  ];\r\n  export const  perSeasonCats = [\"CombinedStats\", \"SeasonStats\", \"PlayoffStats\"];\r\n  export const  perSeasonCatMAPS = [\"CombinedStatsMAP\", \"SeasonStatsMAP\", \"PlayoffStatsMAP\"];\r\n  \r\n// for both team/players class'\r\n\r\nexport const allTimeStatsArray = [\r\n    \"allTimeStats\",\r\n    \"allTimeSeasonStats\",\r\n    \"allTimePlayoffStats\",\r\n  ];\r\n\r\n  export const allTimeStatsMAPS = [\r\n    \"allTimeStatsMAP\",\r\n    \"allTimeSeasonStatsMAP\",\r\n    \"allTimePlayoffStatsMAP\",\r\n  ];\r\n\r\n  // SET FIELDS FOR TEAMS TABLES WITH TIE GAMES\r\n\r\nexport const homePageFields = [\"Team\", \"GP\", \"Wins\", \"Losses\", \"Draws\", \"Points\"];\r\nexport const fullTable = [\r\n  \"Team\",\r\n  \"\",\r\n  \"GP\",\r\n  \"Wins\",\r\n  \"Losses\",\r\n  \"Draws\",\r\n  \"Points\",\r\n  \"GF\",\r\n  \"GA\",\r\n  \"GD\",\r\n  \"GFA\",\r\n  \"GAA\",\r\n  \"SOG\",\r\n  \"SA\",\r\n  \"SD\",\r\n  \"SFA\",\r\n  \"SAA\",\r\n  \"SV%\",\r\n  \"PFA\",\r\n  \"PAA\",\r\n];\r\n\r\n// SET FIELDS FOR TEAMS TABLES IN SEASONS THAT DON'T HAVE TIE GAMES\r\nexport const homePageFieldsNoTies = [\"Team\", \"GP\", \"Wins\", \"Losses\", \"OTL\", \"Points\"];\r\nexport const fullTableNoTies = [\r\n  \"Team\",\r\n  // the following blank is column for team logos\r\n  \"\",\r\n  \"GP\",\r\n  \"Wins\",\r\n  \"OTW\",\r\n  \"Losses\",\r\n  \"OTL\",\r\n  \"Points\",\r\n  \"GF\",\r\n  \"GA\",\r\n  \"GD\",\r\n  \"GFA\",\r\n  \"GAA\",\r\n  \"SOG\",\r\n  \"SA\",\r\n  \"SD\",\r\n  \"SFA\",\r\n  \"SAA\",\r\n  \"SV%\",\r\n  \"PFA\",\r\n  \"PAA\",\r\n];\r\n// set fields for players tables within side menu bar\r\nexport const PLAYERS_TABLE = [\r\n  \"Name\",\r\n  \"\",\r\n  \"GP\",\r\n  \"Goals\",\r\n  \"Assists\",\r\n  \"Points\",\r\n  \"Kicks\",\r\n  \"Passes\",\r\n  \"ShotsOnGoal\",\r\n  \"Shooting%\",\r\n  \"OwnGoals\",\r\n];\r\n// set fields for players table within the single game boxscore page\r\nexport const SINGLE_GAME_PLAYERS_TABLE = [\r\n  \"Name\",\r\n  \"Goals\",\r\n  \"Assists\",\r\n  \"Points\",\r\n  \"Kicks\",\r\n  \"Passes\",\r\n  \"ShotsOnGoal\",\r\n  \"Shooting%\",\r\n  \"OwnGoals\",\r\n];\r\n","import { Teams, Players, GameType, TeamPlayers, GameResults, GamePlayerStats } from \"../masterHaxData\";\r\n\r\nexport const DEFENDING_CHAMPS = \"Scribeathonenest\"\r\nexport const DEFENDING_CHAMPS_LOGO = \"img/teamLogos/S04/degenerationHaxHomeS04.svg\"\r\nexport const CHAMPIONS_LIST = [\"Haxual Chocolate\", \"Mooney\", \"Haxual Chocolate\", \"Degeneration Hax\", \"Scribeathonenest\"]\r\nexport const IS_PLAYOFFS = true\r\nexport const IN_BETWEEN_SEASONS = true;\r\nexport const SEASON_WITH_TEAM_LOGOS_START = 1\r\nexport const SEASONS_WITH_TIE_GAMES = [1];\r\n// count of how many teams there are\r\nexport const TEAMS_LENGTH = Teams.length;\r\n// array of length matching teams_length which gets populated\r\nexport const TEAM_NAMES_ARRAY = [TEAMS_LENGTH]\r\n// count of how many players there are\r\nexport const PLAYERS_LENGTH = Players.length;\r\n// 2 count modes of season/playoff\r\nexport const GAME_TYPE_LENGTH = GameType.length;\r\n// length of list of each player to which team for each season\r\nexport const TEAM_PLAYERS_LENGTH = TeamPlayers.length;\r\n// count of how many games played both playoff and season\r\nexport const GAME_RESULTS_LENGTH = GameResults.length;\r\n// length of every players stat recorded for all games\r\nexport const GAME_PLAYER_STATS_LENGTH = GamePlayerStats.length;\r\n// screen resizing break points\r\nexport const TABLE_BREAK_POINT = 992;\r\n// team logo size in playoff brackets\r\nexport const TEAM_LOGO_SIZE = '1.75rem'\r\n// HC font size on team logos via css\r\nexport const HC_FONT = {\r\n    \"getTeamsGamesResults\": '.5rem, 1rem, 1.75rem',\r\n    \"setGifs\": '1rem, 2.5rem, 2.75rem',\r\n    \"singleGameStats\": '1rem, 2.5rem, 2.75rem',\r\n    \"teamColors\": '1rem, 2.5rem, 2.75rem',\r\n    \"setHeaderBanner\": \"1rem, 2rem, 3rem\",\r\n    \"setTeamLogoCss\": \"1rem, 2vw, 3rem\",\r\n}\r\n// css logo width/heights\r\nexport const CSS_LOGO_DIMENSIONS = {\r\n    \"getTeamsGamesResults\": {\r\n        \"width\": \"85%\",\r\n        \"height\": \"85%\"\r\n    },\r\n    \"setGifs\": {\r\n        \"width\": \"7.5rem\",\r\n        \"height\": \"6rem\"\r\n    },\r\n    \"singleGameStats\": {\r\n        \"width\": \"8rem\",\r\n        \"height\": \"6rem\"\r\n    },\r\n    \"teamColors\": {\r\n        \"width\": \"55%\",\r\n        \"height\": \"55%\"\r\n    },\r\n    \"setHeaderBanner\": {\r\n        \"width\": \"55%\",\r\n        \"height\": \"55%\"\r\n    },\r\n    \"setTeamLogoCss\": {\r\n        \"width\": null,\r\n        \"height\": null \r\n    },\r\n}\r\n","const fetchHaxData = await fetch(\"https://hax94-league.s3.us-east-2.amazonaws.com/json/haxData.json\")\r\nconst haxBallData = await fetchHaxData.json();\r\n\r\nexport const { Teams, Players, GameType, TeamPlayers, GameResults, GamePlayerStats, Gifs } = haxBallData","// css files\r\nimport \"./css/w3.css\"\r\nimport \"./css/general.css\"\r\nimport \"./css/large.css\"\r\nimport \"./css/medium.css\"\r\nimport \"./css/mobileLandscape.css\"\r\nimport \"./css/mobile.css\"\r\nimport \"./css/playoffTree.css\"\r\n// js files\r\nimport \"./scripts/listeners/listeners\"\r\nimport setHomeTable from \"./scripts/tables/setHomeTable\"\r\nimport playoffTree from \"./scripts/layouts/playoffTree/playoffTree\"\r\nimport setSeasonsFullTable from \"./scripts/tables/setSeasonsFullTable\"\r\nimport setTableListeners from \"./scripts/listeners/listenerHelpers/setTableListeners\"\r\nimport \"./scripts/listeners/tablesDivObserver\"\r\n\r\n// img files all imported using script\r\nimport images from \"./scripts/loadImages\";\r\nimport currentSeason from \"./scripts/var_lib/season/currentSeason\"\r\n//////////////////////////////////////////////////\r\n// Set homepage standings table for current season\r\n//////////////////////////////////////////////////\r\n// setHomeTable();\r\n///////////////////\r\n// during playoffs\r\n///////////////////\r\n// setSeasonsFullTable(5, \"Playoff\", \"Playoffs\")\r\nplayoffTree(currentSeason)\r\n// Set listeners on table headers\r\nsetTableListeners();\r\n// service worker for caching begin checking local storage first\r\nconst useServiceWorker = true\r\nif(useServiceWorker){\r\n    const getLastModifedJson = await fetch(\"https://hax94-league.s3.us-east-2.amazonaws.com/json/haxLastModified.json\", {cache: 'no-store'})\r\n    const response = await getLastModifedJson.json()\r\n    const lastModified = response['lastModified']\r\n    let isHaxDataUpdated\r\n    let getLastModifiedHaxData = localStorage.getItem(\"haxDataLastModified\")\r\n    if(getLastModifiedHaxData == null){\r\n            localStorage.setItem(\"haxDataLastModified\", lastModified)\r\n            isHaxDataUpdated = false\r\n        } else {\r\n            isHaxDataUpdated = lastModified === getLastModifiedHaxData\r\n            if(!isHaxDataUpdated){\r\n                localStorage.setItem(\"haxDataLastModified\", lastModified)\r\n            }\r\n        }\r\n    \r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.register('./sw.js').then(registration => {\r\n            if(registration.active){\r\n                registration.active.postMessage({type: \"LAST_MODIFIED\", payload: isHaxDataUpdated})\r\n            } else {\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.active.postMessage({type: \"LAST_MODIFIED\", payload: isHaxDataUpdated})\r\n                })\r\n            }\r\n        })\r\n    }\r\n}","import { GameResults, GamePlayerStats } from \"../../../../constants/masterHaxData\";\r\nimport playersMAP from \"../../../var_lib/maps/players/playersMAP\";\r\nimport gameTypeMAP from \"../../../var_lib/maps/gameType/gameTypeMAP\";\r\n\r\nconst GameResultsLength = GameResults.length;\r\n\r\nfunction setPlayersAllTimeStats(\r\n    allTimeArray,\r\n    allTimeSeasonArray,\r\n    allTimePlayoffArray){\r\n        GamePlayerStats.forEach((item) => {\r\n            if (playersMAP.get(Number(item.PlayerID)) == this.name) {\r\n              this[allTimeArray].push(item);\r\n            }\r\n          });\r\n      \r\n          this[allTimeArray].forEach((item) => {\r\n            for (let i = 0; i < GameResultsLength; i++) {\r\n              // GameResultsLength\r\n              if (\r\n                item.GameID == GameResults[i].GameID &&\r\n                gameTypeMAP.get(Number(GameResults[i].GameTypeID)) == \"Season\"\r\n              )\r\n                this[allTimeSeasonArray].push(item);\r\n              if (\r\n                item.GameID == GameResults[i].GameID &&\r\n                gameTypeMAP.get(Number(GameResults[i].GameTypeID)) == \"Playoff\"\r\n              )\r\n                this[allTimePlayoffArray].push(item);\r\n            }\r\n          });\r\n}\r\n\r\nexport default setPlayersAllTimeStats;","import playerSeasonsMAP from \"../../var_lib/maps/players/playerSeasonsMAP\"\r\nimport seasonCount from \"../../var_lib/season/seasonCount\"\r\nimport setPlayersAllTimeStats from \"./helpers/setPlayersAllTimeStats\";\r\n\r\nexport default class IndividualPlayerStats {\r\n    constructor(name) {\r\n      // players name\r\n      this.name = name;\r\n      this.seasonsPlayed = playerSeasonsMAP.get(this.name);\r\n      // all time player stats per object (player)\r\n      this.allTimeStats = []; // collects from GamePlayerStats JSON\r\n      this.allTimeSeasonStats = []; // GameResults JSON filtered to seasonType is \"Season\"\r\n      this.allTimePlayoffStats = []; // GameResults JSON filtered to seasonType is \"Playoff\"\r\n      this.allTimeStatsMAP = new Map();\r\n      this.allTimeSeasonStatsMAP = new Map();\r\n      this.allTimePlayoffStatsMAP = new Map();\r\n      this.seasonsPlayed.forEach((item) => {\r\n        this[\"playersSeason\" + item + \"CombinedStats\"] = [];\r\n        this[\"playersSeason\" + item + \"SeasonStats\"] = [];\r\n        this[\"playersSeason\" + item + \"PlayoffStats\"] = [];\r\n        this[\"playersSeason\" + item + \"CombinedStatsMAP\"] = new Map();\r\n        this[\"playersSeason\" + item + \"SeasonStatsMAP\"] = new Map();\r\n        this[\"playersSeason\" + item + \"PlayoffStatsMAP\"] = new Map();\r\n      });\r\n    }\r\n  \r\n    // static properties and methods\r\n  \r\n    static allPlayersStats = {}; // individual players instances of this class placed here\r\n    static playerStatsProfile = []; // same as above but in array form\r\n  \r\n    // these arrays contain MAPS for each players all time totals ready for tabular display\r\n    static groupPlayersAllTimeStats = [];\r\n    static groupPlayersAllTimeSeasonStats = [];\r\n    static groupPlayersAllTimePlayoffStats = [];\r\n  \r\n    static setPerSeasonAllTimeContainers(seasonCountLength) {\r\n      if (seasonCountLength > 1) {\r\n        seasonCount.forEach((item) => {\r\n          this[\"groupPlayersSeason\" + item + \"CombinedStats\"] = [];\r\n          this[\"groupPlayersSeason\" + item + \"SeasonStats\"] = [];\r\n          this[\"groupPlayersSeason\" + item + \"PlayoffStats\"] = [];\r\n        });\r\n      }\r\n    }\r\n  \r\n    // set player all time stats arrays\r\n  \r\n    setPlayersAllTimeStats(\r\n      allTimeArray,\r\n      allTimeSeasonArray,\r\n      allTimePlayoffArray\r\n    ) {\r\n      // fills allTimeStats[]/seasonStats[]/playoff[]\r\n      setPlayersAllTimeStats.call(\r\n        this,       \r\n        allTimeArray,\r\n        allTimeSeasonArray,\r\n        allTimePlayoffArray)\r\n    }\r\n  }","function setAwayGames(i, {seasonNumber, writeToMAP, teamsMAP, TeamStats, inputArray}){\r\n  let value;\r\n  if(seasonNumber){\r\n    value = TeamStats.allTeamStats[teamsMAP.get(i)][inputArray][0].filter(\r\n      (item) => item.TeamTwo == i\r\n    )\r\n  } else {\r\n    value = TeamStats.allTeamStats[teamsMAP.get(i)][inputArray].filter(\r\n      (item) => item.TeamTwo == i\r\n    )\r\n  }\r\n\r\n    const key = seasonNumber ? `season${seasonNumber}AwayGames` : `allTimeAwayGames`;\r\n\r\n    this[writeToMAP].set(\r\n        key,\r\n        value\r\n      );\r\n}\r\n\r\nexport default setAwayGames;","function setAwayGoalsAgainst({seasonNumber, writeToMAP}){\r\n    if(seasonNumber){\r\n        if (\r\n            this[writeToMAP].get(`season${seasonNumber}AwayGames`).length != 0\r\n          ) {\r\n            this[writeToMAP].set(\r\n              `season${seasonNumber}AwayGoalsAgainst`,\r\n              this[writeToMAP]\r\n                .get(`season${seasonNumber}AwayGames`)\r\n                .map((item) => item.TeamOneScore) // TeamOne is opponent\r\n                .reduce((goalStart, goalAdd) => +goalStart + +goalAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(`season${seasonNumber}AwayGoalsAgainst`, 0);\r\n          }\r\n        return;\r\n    }\r\n\r\n    if (this[writeToMAP].get(\"allTimeAwayGames\").length != 0) {\r\n        this[writeToMAP].set(\r\n          \"allTimeAwayGoalsAgainst\",\r\n          this[writeToMAP]\r\n            .get(\"allTimeAwayGames\")\r\n            .map((item) => item.TeamOneScore) // TeamOne is opponent\r\n            .reduce((goalStart, goalAdd) => +goalStart + +goalAdd)\r\n        );\r\n      } else {\r\n        this[writeToMAP].set(\"allTimeAwayGoalsAgainst\", 0);\r\n      }\r\n}\r\n\r\nexport default setAwayGoalsAgainst;","function setAwayGoalsFor({seasonNumber, writeToMAP}){\r\n    // set for each season\r\n    if(seasonNumber){\r\n        if (\r\n            this[writeToMAP].get(`season${seasonNumber}AwayGames`).length != 0\r\n          ) {\r\n            //check if any away games were even played\r\n            this[writeToMAP].set(\r\n              `season${seasonNumber}AwayGoalsFor`,\r\n              this[writeToMAP]\r\n                .get(`season${seasonNumber}AwayGames`)\r\n                .map((item) => item.TeamTwoScore)\r\n                .reduce((goalStart, goalAdd) => +goalStart + +goalAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(`season${seasonNumber}AwayGoalsFor`, 0);\r\n          }\r\n        // exit the method to avoid all time stats\r\n        return;\r\n    }\r\n    // set all time stats\r\n    //check if any home games were even played\r\n    if (this[writeToMAP].get(\"allTimeAwayGames\").length != 0) {\r\n        //check if any away games were even played\r\n        this[writeToMAP].set(\r\n          \"allTimeAwayGoalsFor\",\r\n          this[writeToMAP]\r\n            .get(\"allTimeAwayGames\")\r\n            .map((item) => item.TeamTwoScore)\r\n            .reduce((goalStart, goalAdd) => +goalStart + +goalAdd)\r\n        );\r\n      } else {\r\n        this[writeToMAP].set(\"allTimeAwayGoalsFor\", 0);\r\n      }\r\n}\r\n\r\nexport default setAwayGoalsFor;","function setAwayLosses({seasonNumber, writeToMAP}){\r\n    this[writeToMAP].set(\r\n        `season${seasonNumber}AwayLosses`,\r\n        this[writeToMAP]\r\n          .get(`season${seasonNumber}AwayGames`)\r\n          .filter(\r\n            (item) => Number(item.TeamOneScore) > Number(item.TeamTwoScore)\r\n          )\r\n      );\r\n}\r\n\r\nexport default setAwayLosses;","function setAwayPossessionAgainst({seasonNumber, writeToMAP}){\r\n    if(seasonNumber){\r\n        if (this[writeToMAP].get(`season${seasonNumber}AwayGames`) != 0) {\r\n            this[writeToMAP].set(\r\n              `season${seasonNumber}awayPossessionAgainst`,\r\n              this[writeToMAP]\r\n                .get(`season${seasonNumber}AwayGames`)\r\n                .map((item) => item.TeamOnePossession) // TeamOne is opponent\r\n                .reduce((timeStart, timeAdd) => +timeStart + +timeAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(`season${seasonNumber}awayPossessionAgainst`, 0);\r\n          }\r\n        return;\r\n    }\r\n\r\n    if (this[writeToMAP].get(\"allTimeAwayGames\") != 0) {\r\n        this[writeToMAP].set(\r\n          \"awayPossessionAgainst\",\r\n          this[writeToMAP]\r\n            .get(\"allTimeAwayGames\")\r\n            .map((item) => item.TeamOnePossession) // TeamOne is opponent\r\n            .reduce((timeStart, timeAdd) => +timeStart + +timeAdd)\r\n        );\r\n      } else {\r\n        this[writeToMAP].set(\"awayPossessionAgainst\", 0);\r\n      }\r\n}\r\n\r\nexport default setAwayPossessionAgainst;","function setAwayPossessionFor({seasonNumber, writeToMAP}){\r\n    if(seasonNumber){\r\n        if (this[writeToMAP].get(`season${seasonNumber}AwayGames`) != 0) {\r\n            this[writeToMAP].set(\r\n              `season${seasonNumber}awayPossessionFor`,\r\n              this[writeToMAP]\r\n                .get(`season${seasonNumber}AwayGames`)\r\n                .map((item) => item.TeamTwoPossession)\r\n                .reduce((timeStart, timeAdd) => +timeStart + +timeAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(`season${seasonNumber}awayPossessionFor`, 0);\r\n          }\r\n        return;\r\n    }\r\n\r\n    if (this[writeToMAP].get(\"allTimeAwayGames\") != 0) {\r\n        this[writeToMAP].set(\r\n          \"awayPossessionFor\",\r\n          this[writeToMAP]\r\n            .get(\"allTimeAwayGames\")\r\n            .map((item) => item.TeamTwoPossession)\r\n            .reduce((timeStart, timeAdd) => +timeStart + +timeAdd)\r\n        );\r\n      } else {\r\n        this[writeToMAP].set(\"awayPossessionFor\", 0);\r\n      }\r\n}\r\n\r\nexport default setAwayPossessionFor;","function setAwayWins({seasonNumber, writeToMAP}){\r\n    const key = seasonNumber ? `season${seasonNumber}AwayWins` : `allTimeAwayWins`;\r\n    const getMapName= seasonNumber ? `season${seasonNumber}AwayGames` : `allTimeAwayGames`;\r\n    \r\n        this[writeToMAP].set(\r\n            key,\r\n            this[writeToMAP]\r\n            .get(getMapName)\r\n            .filter(\r\n              (item) => Number(item.TeamOneScore) < Number(item.TeamTwoScore)\r\n            )\r\n          );\r\n    }\r\n\r\nexport default setAwayWins;","function setDraws(i, {seasonNumber, writeToMAP, TeamStats, teamsMAP, inputArray}){\r\n    let value;\r\n    if(seasonNumber){\r\n      value = TeamStats.allTeamStats[teamsMAP.get(i)][inputArray][0].filter(\r\n        (item) => Number(item.TeamOneScore) == Number(item.TeamTwoScore)\r\n      )\r\n    } else {\r\n      value = TeamStats.allTeamStats[teamsMAP.get(i)][inputArray].filter(\r\n        (item) => Number(item.TeamOneScore) == Number(item.TeamTwoScore)\r\n      )\r\n    }\r\n    this[writeToMAP].set(\r\n        \"drawGames\",\r\n        value\r\n      );\r\n      // all time Draws Length\r\n      this[writeToMAP].set(\"Draws\", this[writeToMAP].get(\"drawGames\").length);\r\n}\r\n\r\nexport default setDraws;","function setGamesPlayed(i, {writeToMAP, teamsMAP, TeamStats, inputArray, seasonNumber}){\r\n    let value;\r\n    if(seasonNumber){\r\n      value = TeamStats.allTeamStats[teamsMAP.get(i)][inputArray][0].length\r\n    } else {\r\n      value = TeamStats.allTeamStats[teamsMAP.get(i)][inputArray].length;\r\n    }\r\n\r\n  this[writeToMAP].set(\"GP\", value);\r\n}\r\n\r\nexport default setGamesPlayed;","function setGoalDifferential({writeToMAP}){\r\n\r\n    this[writeToMAP].set(\r\n        \"GD\",\r\n        +this[writeToMAP].get(\"GF\") - +this[writeToMAP].get(\"GA\")\r\n      );\r\n}\r\n\r\nexport default setGoalDifferential;","function setGoalsAgainst({seasonNumber, writeToMAP}){\r\n    if(seasonNumber){\r\n        this[writeToMAP].set(\r\n            \"GA\",\r\n            +this[writeToMAP].get(`season${seasonNumber}HomeGoalsAgainst`) +\r\n              +this[writeToMAP].get(`season${seasonNumber}AwayGoalsAgainst`)\r\n          );\r\n        return;\r\n    }\r\n\r\n    this[writeToMAP].set(\r\n        \"GA\",\r\n        +this[writeToMAP].get(\"allTimeHomeGoalsAgainst\") +\r\n          +this[writeToMAP].get(\"allTimeAwayGoalsAgainst\")\r\n      );\r\n}\r\n\r\nexport default setGoalsAgainst;","function setGoalsAgainstAverage({writeToMAP}){\r\n  if (\r\n    //check for teams that did not make the playoffs to avoid \"NaN\" result\r\n    this[writeToMAP].get(\"GF\") != 0 &&\r\n    this[writeToMAP].get(\"GA\") != 0\r\n  ) {\r\n    this[writeToMAP].set(\r\n        \"GAA\",\r\n        (+this[writeToMAP].get(\"GA\") / +this[writeToMAP].get(\"GP\")).toFixed(\r\n          2\r\n        )\r\n      );\r\n  } else {\r\n    this[writeToMAP].set(\"GFA\", 0) && this[writeToMAP].set(\"GAA\", 0);\r\n  }\r\n}\r\n\r\nexport default setGoalsAgainstAverage;","function setGoalsFor({seasonNumber, writeToMAP}){\r\n    // check for data per season\r\n    if(seasonNumber){\r\n        this[writeToMAP].set(\r\n            \"GF\",\r\n            +this[writeToMAP].get(`season${seasonNumber}HomeGoalsFor`) +\r\n              +this[writeToMAP].get(`season${seasonNumber}AwayGoalsFor`)\r\n          );\r\n        return;\r\n    }\r\n\r\n    // this for all time goals for\r\n    this[writeToMAP].set(\r\n        \"GF\",\r\n        +this[writeToMAP].get(\"allTimeHomeGoalsFor\") +\r\n          +this[writeToMAP].get(\"allTimeAwayGoalsFor\")\r\n      );\r\n}\r\n\r\nexport default setGoalsFor;","function setGoalsForAverage({writeToMAP}){\r\n  if (\r\n    //check for teams that did not make the playoffs to avoid \"NaN\" result\r\n    this[writeToMAP].get(\"GF\") != 0 &&\r\n    this[writeToMAP].get(\"GA\") != 0\r\n  ){\r\n    this[writeToMAP].set(\r\n      \"GFA\",\r\n      (+this[writeToMAP].get(\"GF\") / +this[writeToMAP].get(\"GP\")).toFixed(\r\n        2\r\n      )\r\n    );\r\n  } else {\r\n    this[writeToMAP].set(\"GFA\", 0) && this[writeToMAP].set(\"GAA\", 0);\r\n  }\r\n}\r\n\r\nexport default setGoalsForAverage;","function setHomeGames(i, {seasonNumber, writeToMAP, teamsMAP, TeamStats, inputArray}){\r\n  let value;\r\n  if(seasonNumber){\r\n    value = TeamStats.allTeamStats[teamsMAP.get(i)][inputArray][0].filter(\r\n      (item) => item.TeamOne == i\r\n    )\r\n  } else {\r\n    value = TeamStats.allTeamStats[teamsMAP.get(i)][inputArray].filter(\r\n      (item) => item.TeamOne == i\r\n    )\r\n  }\r\n\r\n    const key = seasonNumber ? `season${seasonNumber}HomeGames` : `allTimeHomeGames`;\r\n    this[writeToMAP].set(\r\n        key,\r\n        value\r\n      );\r\n}\r\n\r\nexport default setHomeGames;","function setHomeGoalsAgainst({seasonNumber, writeToMAP}){\r\n    if(seasonNumber){\r\n        if (\r\n            this[writeToMAP].get(`season${seasonNumber}HomeGames`).length != 0\r\n          ) {\r\n            // check if any home games were even played\r\n            this[writeToMAP].set(\r\n              `season${seasonNumber}HomeGoalsAgainst`,\r\n              this[writeToMAP]\r\n                .get(`season${seasonNumber}HomeGames`)\r\n                .map((item) => item.TeamTwoScore) // TeamTwo is opponent\r\n                .reduce((goalStart, goalAdd) => +goalStart + +goalAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(`season${seasonNumber}HomeGoalsAgainst`, 0);\r\n          }\r\n        return;\r\n    }\r\n\r\n    if (this[writeToMAP].get(\"allTimeHomeGames\").length != 0) {\r\n        // check if any home games were even played\r\n        this[writeToMAP].set(\r\n          \"allTimeHomeGoalsAgainst\",\r\n          this[writeToMAP]\r\n            .get(\"allTimeHomeGames\")\r\n            .map((item) => item.TeamTwoScore) // TeamTwo is opponent\r\n            .reduce((goalStart, goalAdd) => +goalStart + +goalAdd)\r\n        );\r\n      } else {\r\n        this[writeToMAP].set(\"allTimeHomeGoalsAgainst\", 0);\r\n      }\r\n}\r\n\r\nexport default setHomeGoalsAgainst;","function setHomeGoalsFor({seasonNumber, writeToMAP}){\r\n    // set for each season\r\n    if(seasonNumber){\r\n      if (\r\n        //check if any home games were even played\r\n        this[writeToMAP].get(`season${seasonNumber}HomeGames`).length != 0\r\n      ) {\r\n        this[writeToMAP].set(\r\n          `season${seasonNumber}HomeGoalsFor`,\r\n          this[writeToMAP]\r\n            .get(`season${seasonNumber}HomeGames`)\r\n            .map((item) => item.TeamOneScore)\r\n            .reduce((goalStart, goalAdd) => +goalStart + +goalAdd)\r\n        );\r\n      } else {\r\n        this[writeToMAP].set(`season${seasonNumber}HomeGoalsFor`, 0);\r\n      }\r\n      // exit the method to avoid all time stats\r\n        return;\r\n    }\r\n    // set all time stats\r\n    //check if any home games were even played\r\n    if (this[writeToMAP].get(\"allTimeHomeGames\").length != 0) {\r\n        this[writeToMAP].set(\r\n          \"allTimeHomeGoalsFor\",\r\n          this[writeToMAP]\r\n            .get(\"allTimeHomeGames\")\r\n            .map((item) => item.TeamOneScore)\r\n            .reduce((goalStart, goalAdd) => +goalStart + +goalAdd)\r\n        );\r\n      } else {\r\n        this[writeToMAP].set(\"allTimeHomeGoalsFor\", 0);\r\n      }\r\n}\r\n\r\nexport default setHomeGoalsFor;","function setHomeLosses({seasonNumber, writeToMAP}){\r\n    this[writeToMAP].set(\r\n        `season${seasonNumber}HomeLosses`,\r\n        this[writeToMAP]\r\n          .get(`season${seasonNumber}HomeGames`)\r\n          .filter(\r\n            (item) => Number(item.TeamOneScore) < Number(item.TeamTwoScore)\r\n          )\r\n      );\r\n    }\r\n\r\nexport default setHomeLosses;","function setHomePossessionAgainst({seasonNumber, writeToMAP}){\r\n    if(seasonNumber){\r\n        if (this[writeToMAP].get(`season${seasonNumber}HomeGames`) != 0) {\r\n            this[writeToMAP].set(\r\n              `season${seasonNumber}homePossessionAgainst`,\r\n              this[writeToMAP]\r\n                .get(`season${seasonNumber}HomeGames`)\r\n                .map((item) => item.TeamTwoPossession) // TeamTwo is opponent\r\n                .reduce((timeStart, timeAdd) => +timeStart + +timeAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(`season${seasonNumber}homePossessionAgainst`, 0);\r\n          }\r\n        return;\r\n    }\r\n\r\n    if (this[writeToMAP].get(\"allTimeHomeGames\") != 0) {\r\n        this[writeToMAP].set(\r\n          \"homePossessionAgainst\",\r\n          this[writeToMAP]\r\n            .get(\"allTimeHomeGames\")\r\n            .map((item) => item.TeamTwoPossession) // TeamTwo is opponent\r\n            .reduce((timeStart, timeAdd) => +timeStart + +timeAdd)\r\n        );\r\n      } else {\r\n        this[writeToMAP].set(\"homePossessionAgainst\", 0);\r\n      }\r\n}\r\n\r\nexport default setHomePossessionAgainst;","function setHomePossessionFor({seasonNumber, writeToMAP}){\r\n    if(seasonNumber){\r\n        if (this[writeToMAP].get(`season${seasonNumber}HomeGames`) != 0) {\r\n            this[writeToMAP].set(\r\n              `season${seasonNumber}homePossessionFor`,\r\n              this[writeToMAP]\r\n                .get(`season${seasonNumber}HomeGames`)\r\n                .map((item) => item.TeamOnePossession)\r\n                .reduce((timeStart, timeAdd) => +timeStart + +timeAdd)\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(`season${seasonNumber}homePossessionFor`, 0);\r\n          }\r\n        return;\r\n    }\r\n\r\n    if (this[writeToMAP].get(\"allTimeHomeGames\") != 0) {\r\n        this[writeToMAP].set(\r\n          \"homePossessionFor\",\r\n          this[writeToMAP]\r\n            .get(\"allTimeHomeGames\")\r\n            .map((item) => item.TeamOnePossession)\r\n            .reduce((timeStart, timeAdd) => +timeStart + +timeAdd)\r\n        );\r\n      } else {\r\n        this[writeToMAP].set(\"homePossessionFor\", 0);\r\n      }\r\n}\r\n\r\nexport default setHomePossessionFor;","function setHomeWins({seasonNumber, writeToMAP}){\r\nconst key = seasonNumber ? `season${seasonNumber}HomeWins` : `allTimeHomeWins`;\r\nconst getMapName= seasonNumber ? `season${seasonNumber}HomeGames` : `allTimeHomeGames`;\r\n\r\n    this[writeToMAP].set(\r\n        key,\r\n        this[writeToMAP]\r\n        .get(getMapName)\r\n        .filter(\r\n          (item) => Number(item.TeamOneScore) > Number(item.TeamTwoScore)\r\n        )\r\n      );\r\n}\r\n\r\nexport default setHomeWins;","function setLosses({seasonNumber, writeToMAP}, doesSeasonHaveTieGames = false, ){\r\n  // first if check looks for season stats as opposed to all time stats\r\n  if(seasonNumber){\r\n    if(doesSeasonHaveTieGames){\r\n                // season WITH ties\r\n                this[writeToMAP].set(\r\n                  \"Losses\",\r\n                  this[writeToMAP].get(\"GP\") -\r\n                    (this[writeToMAP].get(\"Wins\") + this[writeToMAP].get(\"Draws\"))\r\n                );\r\n    } else {\r\n                // season with NO ties\r\n                this[writeToMAP].set(\r\n                  \"Losses\",\r\n                  this[writeToMAP].get(\"GP\") -\r\n                    (this[writeToMAP].get(\"Wins\") + this[writeToMAP].get(\"OTL\"))\r\n                );\r\n    }\r\n  } else {\r\n    // set all time losses for all time stats\r\n          this[writeToMAP].set(\r\n              \"Losses\",\r\n              this[writeToMAP].get(\"GP\") -\r\n                (this[writeToMAP].get(\"Wins\") + this[writeToMAP].get(\"Draws\"))\r\n            );\r\n  }\r\n}\r\n\r\nexport default setLosses;","function setOvertimeLosses({seasonNumber, writeToMAP}){\r\n    this[writeToMAP].set(\r\n        \"OTL\",\r\n        this[writeToMAP]\r\n          .get(`season${seasonNumber}HomeLosses`)\r\n          .filter((item) => item.ExtraTime == \"Yes\").length +\r\n          this[writeToMAP]\r\n            .get(`season${seasonNumber}AwayLosses`)\r\n            .filter((item) => item.ExtraTime == \"Yes\").length\r\n      );\r\n}\r\n\r\nexport default setOvertimeLosses;","function setOvertimeWins({seasonNumber, writeToMAP}){\r\n    this[writeToMAP].set(\r\n        \"OTW\",\r\n        this[writeToMAP]\r\n          .get(`season${seasonNumber}HomeWins`)\r\n          .filter((item) => item.ExtraTime == \"Yes\").length +\r\n          this[writeToMAP]\r\n            .get(`season${seasonNumber}AwayWins`)\r\n            .filter((item) => item.ExtraTime == \"Yes\").length\r\n      );\r\n}\r\n\r\nexport default setOvertimeWins;","function setPoints({seasonNumber, writeToMAP}, doesSeasonHaveTieGames = false){\r\n    // first if check looks for season stats as opposed to all time stats\r\n    if(seasonNumber){\r\n        if(doesSeasonHaveTieGames){\r\n            // with tie games\r\n            this[writeToMAP].set(\r\n                \"Points\",\r\n                this[writeToMAP].get(\"Wins\") * 3 + this[writeToMAP].get(\"Draws\")\r\n              );\r\n        } else {\r\n            // without tie games\r\n            this[writeToMAP].set(\r\n                \"Points\",\r\n                (this[writeToMAP].get(\"Wins\") - this[writeToMAP].get(\"OTW\")) * 3 +\r\n                  this[writeToMAP].get(\"OTW\") * 2 +\r\n                  this[writeToMAP].get(\"OTL\")\r\n              );\r\n        }\r\n    } else {\r\n        this[writeToMAP].set(\r\n            \"Points\",\r\n            this[writeToMAP].get(\"Wins\") * 3 + this[writeToMAP].get(\"Draws\")\r\n          );\r\n    }\r\n}\r\n\r\nexport default setPoints;","function setPossessionAgainst({seasonNumber, writeToMAP}){\r\n    if(seasonNumber){\r\n        this[writeToMAP].set(\r\n            \"PA\",\r\n            +this[writeToMAP].get(`season${seasonNumber}homePossessionAgainst`) +\r\n              +this[writeToMAP].get(`season${seasonNumber}awayPossessionAgainst`)\r\n          );\r\n        return;\r\n    }\r\n\r\n    this[writeToMAP].set(\r\n        \"PA\",\r\n        +this[writeToMAP].get(\"homePossessionAgainst\") +\r\n          +this[writeToMAP].get(\"awayPossessionAgainst\")\r\n      );\r\n}\r\n\r\nexport default setPossessionAgainst;","function setPossessionAgainstAverage({writeToMAP}){\r\n    if (\r\n        //check for teams that did not make the playoffs to avoid \"NaN\" result\r\n        this[writeToMAP].get(\"PF\") != 0 &&\r\n        this[writeToMAP].get(\"PA\") != 0\r\n      ) {\r\n        this[writeToMAP].set(\r\n          \"PAA\",\r\n          (+this[writeToMAP].get(\"PA\") / +this[writeToMAP].get(\"GP\")).toFixed(\r\n            2\r\n          )\r\n        );\r\n      } else {\r\n        this[writeToMAP].set(\"PAA\", 0);\r\n      }\r\n}\r\n\r\nexport default setPossessionAgainstAverage;","function setPossessionFor({seasonNumber, writeToMAP}){\r\n    if(seasonNumber){\r\n        this[writeToMAP].set(\r\n            \"PF\",\r\n            +this[writeToMAP].get(`season${seasonNumber}homePossessionFor`) +\r\n              +this[writeToMAP].get(`season${seasonNumber}awayPossessionFor`)\r\n          );\r\n        return;\r\n    }\r\n\r\n    this[writeToMAP].set(\r\n        \"PF\",\r\n        +this[writeToMAP].get(\"homePossessionFor\") +\r\n          +this[writeToMAP].get(\"awayPossessionFor\")\r\n      );\r\n}\r\n\r\nexport default setPossessionFor;","function setPossessionForAverage({writeToMAP}){\r\n    if (\r\n        //check for teams that did not make the playoffs to avoid \"NaN\" result\r\n        this[writeToMAP].get(\"PF\") != 0 &&\r\n        this[writeToMAP].get(\"PA\") != 0\r\n      ) {\r\n        this[writeToMAP].set(\r\n          \"PFA\",\r\n          (+this[writeToMAP].get(\"PF\") / +this[writeToMAP].get(\"GP\")).toFixed(\r\n            2\r\n          )\r\n        );\r\n      } else {\r\n        this[writeToMAP].set(\"PFA\", 0);\r\n      }\r\n}\r\n\r\nexport default setPossessionForAverage;","function setSavePercentage({\r\n    writeToMAP,\r\n    seasonNumber}){\r\n    // set for each season\r\n    if(seasonNumber){\r\n      //check if any away games were even played\r\n        if (\r\n            this[writeToMAP].get(`GP`) > 0\r\n          ) {\r\n            const shotsAgainst = this[writeToMAP]\r\n              .get(`SA`)\r\n            const goalsAgainst = this[writeToMAP]\r\n              .get(`GA`)\r\n            let savePercentage = (1 - (goalsAgainst/shotsAgainst)).toFixed(3)\r\n            // check for 1/0 scenarios and adjust\r\n            if(!isFinite(savePercentage)){\r\n              savePercentage = \"-\"\r\n            }\r\n            // adjust formatting as long as proper number is returned. example .999\r\n            if(savePercentage !== \"-\" && savePercentage !== 1){\r\n              savePercentage = savePercentage.slice(1)\r\n            }\r\n            // adjust formatting for 1.000 results\r\n            if(savePercentage === 1){\r\n              savePercentage = \"1.000\"\r\n            }\r\n            // set the result\r\n            this[writeToMAP].set(\r\n              `SV%`,\r\n              savePercentage\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(`SV%`, \"1.000\");\r\n          }\r\n    }\r\n}\r\n\r\nexport default setSavePercentage;","function setShotDifferential({writeToMAP}){\r\n\r\n    this[writeToMAP].set(\r\n        \"SD\",\r\n        +this[writeToMAP].get(\"SOG\") - +this[writeToMAP].get(\"SA\")\r\n      );\r\n}\r\n\r\nexport default setShotDifferential;","function setShotsAgainst({\r\n    writeToMAP,\r\n    seasonNumber}){\r\n    // set for each season\r\n    if(seasonNumber){\r\n      //check if any away games were even played\r\n        if (\r\n            this[writeToMAP].get(`GP`) > 0\r\n          ) {\r\n            const homeShotsAgainst = this[writeToMAP]\r\n              .get(`season${seasonNumber}HomeGames`)\r\n              .map(item => item.TeamTwoShotsOnGoal)\r\n              .reduce((shotStart, addShot) => +shotStart + +addShot, 0)\r\n            const awayShotsAgainst = this[writeToMAP]\r\n              .get(`season${seasonNumber}AwayGames`)\r\n              .map(item => item.TeamOneShotsOnGoal)\r\n              .reduce((shotStart, addShot) => +shotStart + +addShot, 0)\r\n            this[writeToMAP].set(\r\n              `SA`,\r\n              homeShotsAgainst + awayShotsAgainst\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(`SA`, 0);\r\n          }\r\n    }\r\n}\r\n\r\nexport default setShotsAgainst;","function setShotsAgainstAverage({writeToMAP}){\r\n    if (\r\n        //check for teams that did not make the playoffs to avoid \"NaN\" result\r\n        this[writeToMAP].get(\"GP\") > 0 &&\r\n        this[writeToMAP].get(\"SA\") > 0\r\n      ) {\r\n        this[writeToMAP].set(\r\n            \"SAA\",\r\n            (+this[writeToMAP].get(\"SA\") / +this[writeToMAP].get(\"GP\")).toFixed(\r\n              2\r\n            )\r\n          );\r\n      } else {\r\n        this[writeToMAP].set(\"SAA\", 0)\r\n      }\r\n}\r\n\r\nexport default setShotsAgainstAverage","function setShotsFor({\r\n    writeToMAP,\r\n    seasonNumber}){\r\n    // set for each season\r\n    if(seasonNumber){\r\n      //check if any away games were even played\r\n        if (\r\n            this[writeToMAP].get(`GP`) > 0\r\n          ) {\r\n            const homeShots = this[writeToMAP]\r\n              .get(`season${seasonNumber}HomeGames`)\r\n              .map(item => item.TeamOneShotsOnGoal)\r\n              .reduce((shotStart, addShot) => +shotStart + +addShot, 0)\r\n            const awayShots = this[writeToMAP]\r\n              .get(`season${seasonNumber}AwayGames`)\r\n              .map(item => item.TeamTwoShotsOnGoal)\r\n              .reduce((shotStart, addShot) => +shotStart + +addShot, 0)\r\n            this[writeToMAP].set(\r\n              `SOG`,\r\n              homeShots + awayShots\r\n            );\r\n          } else {\r\n            this[writeToMAP].set(`SOG`, 0);\r\n          }\r\n    }\r\n}\r\n\r\nexport default setShotsFor;","function setShotsForAverage({writeToMAP}){\r\n    if (\r\n        //check for teams that did not make the playoffs to avoid \"NaN\" result\r\n        this[writeToMAP].get(\"GP\") > 0 &&\r\n        this[writeToMAP].get(\"SOG\") > 0\r\n      ) {\r\n        this[writeToMAP].set(\r\n            \"SFA\",\r\n            (+this[writeToMAP].get(\"SOG\") / +this[writeToMAP].get(\"GP\")).toFixed(\r\n              2\r\n            )\r\n          );\r\n      } else {\r\n        this[writeToMAP].set(\"SFA\", 0)\r\n      }\r\n}\r\n\r\nexport default setShotsForAverage","function setWins({seasonNumber, writeToMAP}){\r\n    let homeWins;\r\n    let awayWins\r\n    if(seasonNumber){\r\n        homeWins = `season${seasonNumber}HomeWins`;\r\n        awayWins = `season${seasonNumber}AwayWins`;\r\n    } else {\r\n        homeWins = \"allTimeHomeWins\";\r\n        awayWins = \"allTimeAwayWins\";\r\n    }\r\n    this[writeToMAP].set(\r\n        \"Wins\",\r\n        this[writeToMAP].get(homeWins).length +\r\n          this[writeToMAP].get(awayWins).length\r\n      );\r\n}\r\n\r\nexport default setWins;","import { GameResults } from \"../../../../../constants/masterHaxData\";\r\nimport { GAME_RESULTS_LENGTH } from \"../../../../../constants/consts/vars\";\r\nimport teamsMAP from \"../../../../var_lib/maps/teams/teamsMAP\";\r\nimport gameTypeMAP from \"../../../../var_lib/maps/gameType/gameTypeMAP\";\r\n\r\n\r\nfunction setTeamsAllTimeStats(allTimeArray, allTimeSeasonArray, allTimePlayoffArray) {\r\n  GameResults.forEach((item) => {\r\n    if (\r\n      teamsMAP.get(Number(item.TeamOne)) == this.name ||\r\n      teamsMAP.get(Number(item.TeamTwo)) == this.name\r\n    ) {\r\n      this[allTimeArray].push(item);\r\n    }\r\n  });\r\n\r\n  this[allTimeArray].forEach((item) => {\r\n    for (let i = 0; i < GAME_RESULTS_LENGTH; i++) {\r\n      if (\r\n        item.GameID == GameResults[i].GameID &&\r\n        gameTypeMAP.get(Number(GameResults[i].GameTypeID)) == \"Season\"\r\n      )\r\n        this[allTimeSeasonArray].push(item);\r\n      if (\r\n        item.GameID == GameResults[i].GameID &&\r\n        gameTypeMAP.get(Number(GameResults[i].GameTypeID)) == \"Playoff\"\r\n      )\r\n        this[allTimePlayoffArray].push(item);\r\n    }\r\n  });\r\n}\r\n\r\nexport default setTeamsAllTimeStats;\r\n","import TeamStats from \"../../teamStats\";\r\nimport teamsMAP from \"../../../../var_lib/maps/teams/teamsMAP\";\r\nimport setGamesPlayed from \"./helpers/setGamesPlayed\";\r\nimport setHomeGames from \"./helpers/setHomeGames\";\r\nimport setAwayGames from \"./helpers/setAwayGames\";\r\nimport setHomeWins from \"./helpers/setHomeWins\";\r\nimport setAwayWins from \"./helpers/setAwayWins\";\r\nimport setWins from \"./helpers/setWins\";\r\nimport setDraws from \"./helpers/setDraws\";\r\nimport setLosses from \"./helpers/setLosses\";\r\nimport setPoints from \"./helpers/setPoints\";\r\nimport setHomeGoalsFor from \"./helpers/setHomeGoalsFor\";\r\nimport setAwayGoalsFor from \"./helpers/setAwayGoalsFor\";\r\nimport setGoalsFor from \"./helpers/setGoalsFor\";\r\nimport setHomeGoalsAgainst from \"./helpers/setHomeGoalsAgainst\";\r\nimport setAwayGoalsAgainst from \"./helpers/setAwayGoalsAgainst\";\r\nimport setGoalsAgainst from \"./helpers/setGoalsAgainst\";\r\nimport setGoalDifferential from \"./helpers/setGoalDifferential\";\r\nimport setGoalsForAverage from \"./helpers/setGoalsForAverage\";\r\nimport setGoalsAgainstAverage from \"./helpers/setGoalsAgainstAverage\";\r\nimport setHomePossessionFor from \"./helpers/setHomePossessionFor\";\r\nimport setAwayPossessionFor from \"./helpers/setAwayPossessionFor\";\r\nimport setHomePossessionAgainst from \"./helpers/setHomePossessionAgainst\";\r\nimport setAwayPossessionAgainst from \"./helpers/setAwayPossessionAgainst\";\r\nimport setPossessionFor from \"./helpers/setPossessionFor\";\r\nimport setPossessionAgainst from \"./helpers/setPossessionAgainst\";\r\nimport setPossessionForAverage from \"./helpers/setPossessionForAverage\";\r\nimport setPossessionAgainstAverage from \"./helpers/setPossessionAgainstAverage\";\r\n\r\nfunction setTeamsAllTimeStatsMAPS(inputArray, writeToMAP) {\r\n  const argsForStatMethods = {\r\n    writeToMAP,\r\n    teamsMAP,\r\n    TeamStats,\r\n    inputArray,\r\n    seasonNumber: undefined\r\n  }\r\n  // below are fields for tables. example games played, goals for, possession for etc...\r\n    for (let i = 1; i <= teamsMAP.size; i++) {\r\n      if (this.name == teamsMAP.get(i)) {\r\n        // list team name to be associated with this MAP\r\n        this[writeToMAP].set(\"Team\", teamsMAP.get(i));\r\n        // all Time Games Played\r\n        setGamesPlayed.call(this, i, argsForStatMethods)\r\n        // all Time Home Games\r\n        setHomeGames.call(this, i, argsForStatMethods)\r\n        // all Time Away Games\r\n        setAwayGames.call(this, i, argsForStatMethods)\r\n        // all Time Home Wins\r\n        setHomeWins.call(this, argsForStatMethods)\r\n        // all Time Away Wins\r\n        setAwayWins.call(this, argsForStatMethods)\r\n        // all Time Wins\r\n        setWins.call(this, argsForStatMethods)\r\n        // all Time Draws\r\n        setDraws.call(this, i, argsForStatMethods)\r\n        // all Time Losses\r\n        setLosses.call(this, argsForStatMethods)\r\n        // all Time Points\r\n        setPoints.call(this, argsForStatMethods)\r\n        // all Time Home Goals For\r\n        setHomeGoalsFor.call(this, argsForStatMethods)\r\n        // all Time Away Goals For\r\n        setAwayGoalsFor.call(this, argsForStatMethods)\r\n        // all Time Goals For\r\n        setGoalsFor.call(this, argsForStatMethods)\r\n        // all Time Home Goals Against\r\n        setHomeGoalsAgainst.call(this, argsForStatMethods)\r\n        // all Time Away Goals Against\r\n        setAwayGoalsAgainst.call(this, argsForStatMethods)\r\n        // all Time Goals Against\r\n        setGoalsAgainst.call(this, argsForStatMethods)\r\n        // all Time Goal Differential\r\n        setGoalDifferential.call(this, argsForStatMethods)\r\n        // all Time Goals For Average\r\n        setGoalsForAverage.call(this, argsForStatMethods)\r\n          // all Time Goals Against Average\r\n        setGoalsAgainstAverage.call(this, argsForStatMethods)\r\n        // all Time Home Possession For\r\n        setHomePossessionFor.call(this, argsForStatMethods)\r\n        // all Time Away Possession For\r\n        setAwayPossessionFor.call(this, argsForStatMethods)\r\n        // all Time Home Possession Against\r\n        setHomePossessionAgainst.call(this, argsForStatMethods)\r\n        // all Time Away Possession Against\r\n        setAwayPossessionAgainst.call(this, argsForStatMethods)\r\n        // total Possession For\r\n        setPossessionFor.call(this, argsForStatMethods)\r\n        // total Possession Against\r\n        setPossessionAgainst.call(this, argsForStatMethods)\r\n        // possession For Average\r\n        setPossessionForAverage.call(this, argsForStatMethods)\r\n        // possession Against Average\r\n        setPossessionAgainstAverage.call(this, argsForStatMethods)\r\n      }\r\n    }\r\n  }\r\n\r\n  export default setTeamsAllTimeStatsMAPS;","import TeamStats from \"../../teamStats\";\r\nimport teamsMAP from \"../../../../var_lib/maps/teams/teamsMAP\";\r\nimport setGamesPlayed from \"./helpers/setGamesPlayed\";\r\nimport setHomeGames from \"./helpers/setHomeGames\";\r\nimport { SEASONS_WITH_TIE_GAMES} from \"../../../../../constants/consts/vars\";\r\nimport setAwayGames from \"./helpers/setAwayGames\";\r\nimport setHomeWins from \"./helpers/setHomeWins\";\r\nimport setAwayWins from \"./helpers/setAwayWins\";\r\nimport setDraws from \"./helpers/setDraws\";\r\nimport setWins from \"./helpers/setWins\";\r\nimport setOvertimeWins from \"./helpers/setOvertimeWins\";\r\nimport setHomeLosses from \"./helpers/setHomeLosses\";\r\nimport setAwayLosses from \"./helpers/setAwayLosses\";\r\nimport setOvertimeLosses from \"./helpers/setOvertimeLosses\";\r\nimport setLosses from \"./helpers/setLosses\";\r\nimport setPoints from \"./helpers/setPoints\";\r\nimport setHomeGoalsFor from \"./helpers/setHomeGoalsFor\";\r\nimport setAwayGoalsFor from \"./helpers/setAwayGoalsFor\";\r\nimport setGoalsFor from \"./helpers/setGoalsFor\";\r\nimport setHomeGoalsAgainst from \"./helpers/setHomeGoalsAgainst\";\r\nimport setAwayGoalsAgainst from \"./helpers/setAwayGoalsAgainst\";\r\nimport setGoalsAgainst from \"./helpers/setGoalsAgainst\";\r\nimport setGoalDifferential from \"./helpers/setGoalDifferential\";\r\nimport setGoalsForAverage from \"./helpers/setGoalsForAverage\";\r\nimport setGoalsAgainstAverage from \"./helpers/setGoalsAgainstAverage\";\r\nimport setHomePossessionFor from \"./helpers/setHomePossessionFor\";\r\nimport setAwayPossessionFor from \"./helpers/setAwayPossessionFor\";\r\nimport setHomePossessionAgainst from \"./helpers/setHomePossessionAgainst\";\r\nimport setAwayPossessionAgainst from \"./helpers/setAwayPossessionAgainst\";\r\nimport setPossessionFor from \"./helpers/setPossessionFor\";\r\nimport setPossessionAgainst from \"./helpers/setPossessionAgainst\";\r\nimport setPossessionForAverage from \"./helpers/setPossessionForAverage\";\r\nimport setPossessionAgainstAverage from \"./helpers/setPossessionAgainstAverage\";\r\nimport setShotsFor from \"./helpers/setShotsFor\";\r\nimport setShotsAgainst from \"./helpers/setShotsAgainst\";\r\nimport setSavePercentage from \"./helpers/setSavePercentage\";\r\nimport setShotDifferential from \"./helpers/setShotDifferential\";\r\nimport setShotsForAverage from \"./helpers/setShotsForAverage\";\r\nimport setShotsAgainstAverage from \"./helpers/setShotsAgainstAverage\";\r\n\r\nfunction setTeamsIndividualSeasonsStatsMAPS(\r\n    inputArray,\r\n    writeToMAP,\r\n    seasonNumber = currentSeason\r\n  ) {\r\n    const argsForStatMethods = {\r\n      writeToMAP,\r\n      teamsMAP,\r\n      TeamStats,\r\n      inputArray,\r\n      seasonNumber\r\n    }\r\n    // mode argument is either \"combined season and playoffs\", \"season\", \"playoff\"\r\n    for (let i = 1; i <= teamsMAP.size; i++) {\r\n      if (this.name == teamsMAP.get(i)) {\r\n        // list team name to be associated with this MAP\r\n        this[writeToMAP].set(\"Team\", teamsMAP.get(i));\r\n        // this seasons Games Played\r\n        setGamesPlayed.call(this, i, argsForStatMethods)\r\n        // this seasons Home Games\r\n        setHomeGames.call(this, i, argsForStatMethods)\r\n        // this seasons Away Games\r\n        setAwayGames.call(this, i, argsForStatMethods)\r\n        // this seasons Home Wins\r\n        setHomeWins.call(this, argsForStatMethods)\r\n        // this seasons Away Wins\r\n        setAwayWins.call(this, argsForStatMethods)\r\n        // this seasons OT wins\r\n        if (!SEASONS_WITH_TIE_GAMES.includes(seasonNumber)) {\r\n          //season withOUT ties\r\n          setOvertimeWins.call(this, argsForStatMethods)\r\n        }\r\n        // this seasons Wins\r\n        setWins.call(this, argsForStatMethods)\r\n        // this seasons Draw games\r\n        setDraws.call(this, i, argsForStatMethods)\r\n        // this seasons home Losses\r\n        setHomeLosses.call(this, argsForStatMethods)\r\n        // this seasons away Losses\r\n        setAwayLosses.call(this, argsForStatMethods)\r\n        // this seasons OT Losses\r\n        if (!SEASONS_WITH_TIE_GAMES.includes(seasonNumber)) {\r\n          // season withOUT ties\r\n          setOvertimeLosses.call(this, argsForStatMethods)\r\n        }\r\n        // this seasons Losses\r\n        if (!SEASONS_WITH_TIE_GAMES.includes(seasonNumber)) {\r\n          // season with NO ties\r\n          setLosses.call(this, {seasonNumber, writeToMAP}, false)\r\n        } else {\r\n          // season WITH ties\r\n          setLosses.call(this, {seasonNumber, writeToMAP}, true)\r\n        }\r\n        // this seasons Points\r\n        if (!SEASONS_WITH_TIE_GAMES.includes(seasonNumber)) {\r\n          // season withOUT ties\r\n          setPoints.call(this, argsForStatMethods, false)\r\n        } else {\r\n          // season WITH ties\r\n          setPoints.call(this, argsForStatMethods, true)\r\n        }\r\n        // this seasons Home Goals For\r\n        setHomeGoalsFor.call(this, argsForStatMethods)\r\n        // this seasons Away Goals For\r\n        setAwayGoalsFor.call(this, argsForStatMethods)\r\n        // this seasons Goals For\r\n        setGoalsFor.call(this, argsForStatMethods)\r\n        // this seasons Home Goals Against\r\n        setHomeGoalsAgainst.call(this, argsForStatMethods)\r\n        // this seasons Away Goals Against\r\n        setAwayGoalsAgainst.call(this, argsForStatMethods)\r\n        // this seasons Goals Against\r\n        setGoalsAgainst.call(this, argsForStatMethods)\r\n        // this seasons Goal Differential\r\n        setGoalDifferential.call(this, argsForStatMethods)\r\n        // this seasons Goals For Average\r\n        setGoalsForAverage.call(this, argsForStatMethods)\r\n        // this seasons Goals Against Average\r\n        setGoalsAgainstAverage.call(this, argsForStatMethods)\r\n        // this seasons shots on goal\r\n        setShotsFor.call(this, argsForStatMethods)\r\n        // this seasons shots against\r\n        setShotsAgainst.call(this, argsForStatMethods)\r\n        // this seasons shots differential\r\n        setShotDifferential.call(this, argsForStatMethods)\r\n        // this seasons shots for average\r\n        setShotsForAverage.call(this, argsForStatMethods)\r\n        // this seasons shots for average\r\n        setShotsAgainstAverage.call(this, argsForStatMethods)\r\n        // this season save percentage\r\n        setSavePercentage.call(this, argsForStatMethods)\r\n        // this seasons Home Possession For\r\n        setHomePossessionFor.call(this, argsForStatMethods)\r\n        // this seasons Away Possession For\r\n        setAwayPossessionFor.call(this, argsForStatMethods)\r\n        // this seasons Home Possession Against\r\n        setHomePossessionAgainst.call(this, argsForStatMethods)\r\n        // this seasons Away Possession Against\r\n        setAwayPossessionAgainst.call(this, argsForStatMethods)\r\n        // this seasons Possession For\r\n        setPossessionFor.call(this, argsForStatMethods)\r\n        // this seasons Possession Against\r\n        setPossessionAgainst.call(this, argsForStatMethods)\r\n        // this seasons possession For Average\r\n        setPossessionForAverage.call(this, argsForStatMethods)\r\n        // this seasons possession Against Average\r\n        setPossessionAgainstAverage.call(this, argsForStatMethods)\r\n      }\r\n    }\r\n}\r\n\r\nexport default setTeamsIndividualSeasonsStatsMAPS;","import teamsMAP from \"../../var_lib/maps/teams/teamsMAP\"\r\nimport teamsSeasonsMAP from \"../../var_lib/maps/teams/teamsSeasonsMAP\"\r\nimport currentSeason from \"../../var_lib/season/currentSeason\"\r\nimport seasonCount from \"../../var_lib/season/seasonCount\"\r\nimport setTeamsAllTimeStats from \"./helpers/teams/setTeamsAllTimeStats\";\r\nimport setTeamsAllTimeStatsMAPS from \"./helpers/teams/setTeamsAllTimeStatsMAPS\";\r\nimport setTeamsIndividualSeasonsStatsMAPS from \"./helpers/teams/setTeamsIndividualSeasonsStatsMAPS\";\r\nimport { allTimeStatsMAPS, groupedAllTimeTeamStats } from \"../../../constants/consts/supportVars\";\r\n\r\nclass TeamStats {\r\n    constructor(name) {\r\n      // players name\r\n      this.name = name;\r\n      this.seasonsPlayed = teamsSeasonsMAP.get(this.name); // this MAP is key by team name with array value listing seasonNums\r\n      this.seasonsPlayedLength = teamsSeasonsMAP.get(this.name).length;\r\n      // all time team stats per object (team)\r\n      this.allTimeStats = []; // collects from GameResults JSON\r\n      this.allTimeSeasonStats = []; // GameResults JSON filtered to seasonType is \"Season\"\r\n      this.allTimePlayoffStats = []; // GameResults JSON filtered to seasonType is \"Playoff\"\r\n      this.teamsSeasonsPlayed = []; // unique list of which seasons this team played in\r\n      this.allTimeStatsMAP = new Map();\r\n      this.allTimeSeasonStatsMAP = new Map();\r\n      this.allTimePlayoffStatsMAP = new Map();\r\n  \r\n      this.seasonsPlayed.forEach((item) => {\r\n        this[\"teamsSeason\" + item + \"CombinedStats\"] = [];\r\n        this[\"teamsSeason\" + item + \"SeasonStats\"] = [];\r\n        this[\"teamsSeason\" + item + \"PlayoffStats\"] = [];\r\n        this[\"teamsSeason\" + item + \"CombinedStatsMAP\"] = new Map();\r\n        this[\"teamsSeason\" + item + \"SeasonStatsMAP\"] = new Map();\r\n        this[\"teamsSeason\" + item + \"PlayoffStatsMAP\"] = new Map();\r\n      });\r\n    }\r\n  \r\n    // static properties and methods\r\n  \r\n    static allTeamStats = {}; // individual teams' instances of this class placed here\r\n  \r\n    // these arrays contain MAPS for each teams' all time totals ready for tabular display\r\n    static groupTeamsAllTimeStats = [];\r\n    static groupTeamsAllTimeSeasonStats = [];\r\n    static groupTeamsAllTimePlayoffStats = [];\r\n  \r\n    // function for populating the class' group all time arrays\r\n    static setGroupedAllTimeArrays() {\r\n      for (let i = 0; i < allTimeStatsMAPS.length; i++) {\r\n        for (let j = 1; j <= teamsMAP.size; j++) {\r\n          this[groupedAllTimeTeamStats[i]].push(\r\n            TeamStats.allTeamStats[teamsMAP.get(j)][allTimeStatsMAPS[i]]\r\n          );\r\n        }\r\n      }\r\n    }\r\n  \r\n    static setPerSeasonAllTimeContainers() {\r\n      seasonCount.forEach((seasonNumber) => {\r\n        this[\"groupTeamsSeason\" + seasonNumber + \"CombinedStats\"] = [];\r\n        this[\"groupTeamsSeason\" + seasonNumber + \"SeasonStats\"] = [];\r\n        this[\"groupTeamsSeason\" + seasonNumber + \"PlayoffStats\"] = [];\r\n      });\r\n    }\r\n  \r\n    // set teams all time stats arrays\r\n  \r\n    setTeamsAllTimeStats(allTimeArray, allTimeSeasonArray, allTimePlayoffArray) {\r\n      // fills allTimeStats[]/seasonStats[]/playoff[]\r\n        setTeamsAllTimeStats.call(this, allTimeArray, allTimeSeasonArray, allTimePlayoffArray);\r\n    }\r\n  \r\n    // set teams all time stats MAPS\r\n  \r\n    setTeamsAllTimeStatsMAPS(inputArray, writeToMAP) {\r\n      setTeamsAllTimeStatsMAPS.call(this, inputArray, writeToMAP)\r\n    }\r\n  \r\n    setTeamsIndividualSeasonsStatsMAPS(\r\n      inputArray,\r\n      writeToMAP,\r\n      seasonNumber = currentSeason\r\n    ) {\r\n      // mode argument is either \"combined season and playoffs\", \"season\", \"playoff\"\r\n      setTeamsIndividualSeasonsStatsMAPS.call(\r\n        this, \r\n        inputArray,\r\n        writeToMAP,\r\n        seasonNumber)\r\n    }\r\n  }\r\n\r\n  export default TeamStats;","import MainAnnouncement from \"./announcementComponents/MainAnnouncement\";\r\nimport Message from \"./announcementComponents/Message\";\r\n\r\nfunction AnnouncementsPageLayout(){\r\n    const containerElem = document.createElement('div');\r\n    containerElem.classList.add(\"w3-content\", \"w3-margin\", \"w3-padding\", \"w3-round-large\", \"w3-display-container\", \"w3-margin-top\", \"w3-card-4\", \"w3-text-black\")\r\n\r\n    containerElem.append(MainAnnouncement())\r\n    containerElem.append(Message())\r\n    return containerElem;\r\n}\r\n\r\nexport default AnnouncementsPageLayout;","async function getMessageData(){\r\n  const getMainContent = await fetch(\"https://hax94-league.s3.us-east-2.amazonaws.com/json/announcements.json\", {cache: \"no-store\"})\r\n  const mainContent = await getMainContent.json()\r\n  const flattenedMainContent = mainContent.mainContent\r\n  return flattenedMainContent\r\n}\r\n\r\nconst { message, messageBackgroundColor, fontColor } = await getMessageData()\r\n\r\nfunction MainAnnouncement(){\r\n      // Create the first inner div\r\n  const containerElem = document.createElement('div');\r\n  containerElem.style.margin = 'auto';\r\n  containerElem.style.width = '90%';\r\n  containerElem.style.backgroundColor = messageBackgroundColor\r\n  containerElem.style.color = fontColor;\r\n\r\n  const headingElem = document.createElement('h5');\r\n  const bold = document.createElement('b')\r\n  bold.textContent = message;\r\n  headingElem.append(bold)\r\n\r\n  containerElem.append(headingElem);\r\n  return containerElem\r\n}\r\n\r\nexport default MainAnnouncement;","function Message(){\r\n    const message = document.createElement('p');\r\n    message.innerHTML = `Hax94 is a league that began as a tournament between players from the classic title EA NHL 94. <br> The NHL 94 community website can be found at <br><a href=\"http://www.nhl94.com\"><img style=\"max-width:100%;height:auto;\" src=\"../../../../../img/nhl94.com.png\" alt=\"NHL94.com\"/> </a> <br><br> There are also a few players from the NHL 95 community as well.  \r\n    `\r\n    return message;\r\n}\r\n\r\nexport default Message;","import closeSidebar from \"../../sidebar/closeSidebar.js\";\r\nimport clearScoreboardDiv from \"../../scoreboard/clearScoreboardDiv.js\";\r\nimport getTablesDiv from \"../../tables/getTablesDiv.js\"\r\nimport AnnouncementsPageLayout from \"./AnnouncementsPageLayout.js\";\r\n\r\nfunction setAnnouncements() {\r\n  clearScoreboardDiv();\r\n  \r\n  // Get the display area where you want to add content\r\n  let displayArea = getTablesDiv();\r\n\r\n  // Clear any existing content in the display area\r\n  displayArea.innerHTML = '';\r\n\r\ndisplayArea.append(AnnouncementsPageLayout())\r\n\r\n  // Close the sidebar\r\n  closeSidebar();\r\n}\r\n\r\nexport default setAnnouncements;\r\n","import TeamStats from \"../../classFiles/teams/teamStats\";\r\nimport teamsMAP from \"../../var_lib/maps/teams/teamsMAP\";\r\nimport setHeaderBanner from \"../setHeaderBanner\";\r\nimport clearTablesDiv from \"../../tables/clearTablesDiv\";\r\nimport teamsColorMAP from \"../../var_lib/maps/teams/teamsColorMAP\";\r\nimport setTeamsPageLayout from \"../teamsPageLayout/setTeamsPageLayout\";\r\nimport setGifs from \"../gifs/setGifs\"\r\nimport setGamesData from \"../singleGameStats/singleGameStats\"\r\nimport createTeamCssLogo from \"../../misc/createTeamCssLogo\";\r\nimport backButton from \"../../misc/backButton\";\r\nimport getGameResultClass from \"./helpers/getGameResultClass\"\r\nimport getGameResultText from \"./helpers/getGameResultText\"\r\nimport { Gifs, GameResults } from \"../../../constants/masterHaxData\";\r\nimport clearScoreboardDiv from \"../../scoreboard/clearScoreboardDiv\";\r\nimport getTablesDiv from \"../../tables/getTablesDiv\";\r\nimport { SEASON_WITH_TEAM_LOGOS_START } from \"../../../constants/consts/vars\";\r\nimport eachTeamObjectMAP from \"../../var_lib/maps/teams/eachTeamObjectMAP\";\r\n\r\nexport default function getTeamsGameResults(e) {\r\n    const team = e.target.dataset.teamName;\r\n    const seasonNum = e.target.dataset.seasonNum;\r\n    const gameType = e.target.dataset.gameType; // 1=\"Season\" 2=\"Playoff\"\r\n    let teamsGames;\r\n    teamsGames =\r\n      TeamStats.allTeamStats[team][\r\n        \"teamsSeason\" + seasonNum + gameType + \"Stats\"\r\n      ][0];\r\n\r\n      let firstRoundGamesCount = 0\r\n      let secondRoundGamesCount = 0\r\n      let thirdRoundGamesCount = 0\r\n      if(gameType === \"Playoff\"){\r\n        firstRoundGamesCount = teamsGames.filter(game => game.Round === 1).length\r\n        secondRoundGamesCount = teamsGames.filter(game => game.Round === 2).length\r\n        thirdRoundGamesCount = teamsGames.filter(game => game.Round === 3).length\r\n      }\r\n      \r\n      const gamesLength = teamsGames.length;\r\n      // seasons where teams now have ai generated team logos\r\n      const seasonNumberAsNumber = parseInt(seasonNum)\r\n      const seasonNumberFolderName = seasonNumberAsNumber>9 ? `S${seasonNum}` : `S0${seasonNum}`\r\n\r\n      const gameResultsFrag = document.createDocumentFragment();\r\n\r\n      const backButtonContainer = document.createElement('div');\r\n      backButtonContainer.innerHTML = backButton(\"gameResultsBackButton\", team, seasonNum, gameType).outerHTML\r\n      const backButtonElement = backButtonContainer.firstElementChild;\r\n      gameResultsFrag.append(backButtonElement)\r\n\r\n      const teamName = document.createElement('h1');\r\n      teamName.textContent = team;\r\n      gameResultsFrag.append(teamName)\r\n\r\n      const scoresSeasonInfo = document.createElement('h4');\r\n      scoresSeasonInfo.textContent = `S0${seasonNum} ${gameType}`;\r\n      gameResultsFrag.append(scoresSeasonInfo)\r\n\r\n      // hr line for first round of playoffs\r\n      if(gameType === 'Playoff' && gamesLength > 0 && firstRoundGamesCount > 0){\r\n\r\n        // add round line hr\r\n        const roundOneLine = document.createElement('hr')\r\n        roundOneLine.style.border = \"none\"\r\n        roundOneLine.style.height = \"1px\"\r\n        roundOneLine.style.backgroundColor = \"black\"\r\n        gameResultsFrag.append(roundOneLine)\r\n\r\n        // add first round text\r\n        const firstRoundText = document.createElement(\"h5\")\r\n        firstRoundText.innerText = \"First Round\"\r\n        gameResultsFrag.append(firstRoundText)\r\n\r\n        // add series winner message\r\n        const firstRoundGames = teamsGames.filter(game => game.Round === 1)\r\n        // get this teams ID\r\n        const teamsID = eachTeamObjectMAP.get(team).TeamID\r\n        // variables that will collect wins/losses for this team\r\n        let winsThisSeries = 0\r\n        let lossesThisSeries = 0\r\n        firstRoundGames.forEach(game => {\r\n          if(game.TeamOne === teamsID){\r\n            if(game.TeamOneScore > game.TeamTwoScore){\r\n              winsThisSeries++\r\n            } else {\r\n              lossesThisSeries++\r\n            }\r\n          }\r\n          if(game.TeamTwo === teamsID){\r\n            if(game.TeamTwoScore > game.TeamOneScore){\r\n              winsThisSeries++\r\n            } else {\r\n              lossesThisSeries++\r\n            }\r\n          }\r\n        })\r\n\r\n        let seriesResultsText\r\n        if(winsThisSeries > lossesThisSeries){\r\n          seriesResultsText = `${team} wins the series ${winsThisSeries} - ${lossesThisSeries}`\r\n        } else {\r\n          seriesResultsText = `${team} lose the series ${lossesThisSeries} - ${winsThisSeries}`\r\n        }\r\n\r\n        const firstRoundResultsText = document.createElement(\"h6\")\r\n        firstRoundResultsText.innerText = seriesResultsText\r\n        gameResultsFrag.append(firstRoundResultsText)\r\n\r\n      }\r\n\r\n      // add hr for teams who've had a first round bye\r\n      if(gameType === 'Playoff' && gamesLength > 0 && firstRoundGamesCount === 0 && secondRoundGamesCount > 0){\r\n        // add round line hr\r\n        const roundOneByeLine = document.createElement('hr')\r\n        roundOneByeLine.style.border = \"none\"\r\n        roundOneByeLine.style.height = \"1px\"\r\n        roundOneByeLine.style.backgroundColor = \"black\"\r\n        gameResultsFrag.append(roundOneByeLine)\r\n\r\n        // add first round text\r\n        const firstRoundByeText = document.createElement(\"h5\")\r\n        firstRoundByeText.innerText = \"First Round Bye\"\r\n        gameResultsFrag.append(firstRoundByeText)\r\n      }\r\n\r\n      if(gamesLength > 0){\r\n\r\n        \r\n        for (let i = 0; i < gamesLength; i++) {\r\n          \r\n        if(gameType === \"Season\"){\r\n          const gameNumber = document.createElement('h6');\r\n          gameNumber.textContent = `Game ${i+1}`;\r\n          gameResultsFrag.append(gameNumber)\r\n        }\r\n\r\n              // get home and away team names\r\n        let homeTeamName = `${teamsMAP.get(+teamsGames[i].TeamOne)}`\r\n        let awayTeamName = `${teamsMAP.get(+teamsGames[i].TeamTwo)}`\r\n        const gameContainer = document.createElement('div');\r\n        gameContainer.style.display = 'flex';\r\n        gameContainer.style.justifyContent = 'center';\r\n\r\n        const gameResultsDiv = document.createElement('div');\r\n        gameResultsDiv.className = 'w3-container w3-margin gameResults';\r\n        gameContainer.appendChild(gameResultsDiv);\r\n\r\n        // add hr between first and second round\r\n        if(i === firstRoundGamesCount && secondRoundGamesCount > 0){\r\n\r\n        // add round line hr\r\n        const secondLine = document.createElement('hr')\r\n        secondLine.style.border = \"none\"\r\n        secondLine.style.height = \"1px\"\r\n        secondLine.style.backgroundColor = \"black\"\r\n        gameResultsFrag.append(secondLine)\r\n\r\n        // add first round text\r\n        const secondRoundText = document.createElement(\"h5\")\r\n        if(thirdRoundGamesCount === 0 && +seasonNum !== 3){\r\n          secondRoundText.innerText = \"Championship Round\"\r\n        // add series winner message\r\n        const championshipRoundGames = teamsGames.filter(game => game.Round === 2)\r\n        // get this teams ID\r\n        const teamsID = eachTeamObjectMAP.get(team).TeamID\r\n        // variables that will collect wins/losses for this team\r\n        let winsThisSeries = 0\r\n        let lossesThisSeries = 0\r\n        championshipRoundGames.forEach(game => {\r\n          if(game.TeamOne === teamsID){\r\n            if(game.TeamOneScore > game.TeamTwoScore){\r\n              winsThisSeries++\r\n            } else {\r\n              lossesThisSeries++\r\n            }\r\n          }\r\n          if(game.TeamTwo === teamsID){\r\n            if(game.TeamTwoScore > game.TeamOneScore){\r\n              winsThisSeries++\r\n            } else {\r\n              lossesThisSeries++\r\n            }\r\n          }\r\n        })\r\n\r\n        let seriesResultsText\r\n        if(winsThisSeries > lossesThisSeries){\r\n          seriesResultsText = `${team} wins the championship series ${winsThisSeries} - ${lossesThisSeries}`\r\n        } else {\r\n          seriesResultsText = `${team} lose the championship series ${lossesThisSeries} - ${winsThisSeries}`\r\n        }\r\n\r\n        let championshipRoundResultsText = document.createElement(\"h6\")\r\n        championshipRoundResultsText.innerText = seriesResultsText\r\n        gameResultsFrag.append(secondRoundText)\r\n        gameResultsFrag.append(championshipRoundResultsText)\r\n      } else {\r\n        // for round robin style plyaoff round\r\n        secondRoundText.innerText = \"2nd Round Robin\"\r\n        gameResultsFrag.append(secondRoundText)\r\n\r\n        // determine which teams advance after the round robin\r\n        // add series winner message\r\n        const roundRobinGames = GameResults.filter(game => game.SeasonNumber === 3).filter(game => game.Round === 2)\r\n        const setListOfTeams = new Set()\r\n        roundRobinGames.forEach(game => setListOfTeams.add(game.TeamOne))\r\n        roundRobinGames.forEach(game => setListOfTeams.add(game.TeamTwo))\r\n        const arrayListOfTeams = Array.from(setListOfTeams)\r\n\r\n        const teamsObjectCollection = {}\r\n\r\n        arrayListOfTeams.forEach(teamId => teamsObjectCollection[teamId] = 0)\r\n        // loop through each team in the round robin\r\n        for(let i=0; i<arrayListOfTeams.length; i++){\r\n          // for round robin game check for current team\r\n          for(let j=0; j<roundRobinGames.length; j++){\r\n            let points = 0\r\n            const teamId = arrayListOfTeams[i]\r\n            // wins checks\r\n            if(roundRobinGames[j].TeamOne === teamId && roundRobinGames[j].TeamOneScore > roundRobinGames[j].TeamTwoScore){\r\n              if(roundRobinGames[j].ExtraTime !== \"Yes\"){\r\n                points += 3\r\n              } else {\r\n                points += 2\r\n              }\r\n            }\r\n            if(roundRobinGames[j].TeamTwo === teamId && roundRobinGames[j].TeamTwoScore > roundRobinGames[j].TeamOneScore){\r\n              if(roundRobinGames[j].ExtraTime !== \"Yes\"){\r\n                points += 3\r\n              } else {\r\n                points += 2\r\n              }\r\n            }\r\n            // ot loss checks\r\n            if(roundRobinGames[j].TeamOne === teamId && roundRobinGames[j].TeamOneScore < roundRobinGames[j].TeamTwoScore){\r\n              if(roundRobinGames[j].ExtraTime === \"Yes\"){\r\n                points += 1\r\n              }\r\n            }\r\n            if(roundRobinGames[j].TeamTwo === teamId && roundRobinGames[j].TeamTwoScore < roundRobinGames[j].TeamOneScore){\r\n              if(roundRobinGames[j].ExtraTime === \"Yes\"){\r\n                points += 1\r\n              }\r\n            }\r\n            teamsObjectCollection[teamId] = teamsObjectCollection[teamId] + points\r\n          }\r\n        }\r\n\r\n        const [bottomTeam] = Object.entries(teamsObjectCollection).sort((a,b) => a[1]-b[1])\r\n\r\n        // get this teams ID\r\n        const teamsID = eachTeamObjectMAP.get(team).TeamID\r\n        \r\n        let roundsText\r\n        const roundRobinResultsText = document.createElement(\"h6\")\r\n        roundRobinResultsText.innerText = roundRobinResultsText\r\n        if(teamsID === +bottomTeam[0]){\r\n          roundsText = `${team} fails to advance with ${teamsObjectCollection[teamsID]} pts`\r\n        } else {\r\n          roundsText = `${team} advances with ${teamsObjectCollection[teamsID]} pts`\r\n        }\r\n        gameResultsFrag.append(roundsText)\r\n      }\r\n    }\r\n\r\n        // hr line for playoffs that have 3 rounds\r\n        const firstTwoRoundsGamesTotal = firstRoundGamesCount + secondRoundGamesCount\r\n        if(i === firstTwoRoundsGamesTotal && thirdRoundGamesCount > 0){\r\n          // add round line hr\r\n          const thirdLine = document.createElement('hr')\r\n          thirdLine.style.border = \"none\"\r\n          thirdLine.style.height = \"1px\"\r\n          thirdLine.style.backgroundColor = \"black\"\r\n          gameResultsFrag.append(thirdLine)\r\n\r\n          const thirdRoundText = document.createElement(\"h5\")\r\n          thirdRoundText.textContent = \"Championship Round\"\r\n          gameResultsFrag.append(thirdRoundText)\r\n\r\n                  // add series winner message\r\n        const championshipRoundGames = teamsGames.filter(game => game.Round === 3)\r\n        // get this teams ID\r\n        const teamsID = eachTeamObjectMAP.get(team).TeamID\r\n        // variables that will collect wins/losses for this team\r\n        let winsThisSeries = 0\r\n        let lossesThisSeries = 0\r\n        championshipRoundGames.forEach(game => {\r\n          if(game.TeamOne === teamsID){\r\n            if(game.TeamOneScore > game.TeamTwoScore){\r\n              winsThisSeries++\r\n            } else {\r\n              lossesThisSeries++\r\n            }\r\n          }\r\n          if(game.TeamTwo === teamsID){\r\n            if(game.TeamTwoScore > game.TeamOneScore){\r\n              winsThisSeries++\r\n            } else {\r\n              lossesThisSeries++\r\n            }\r\n          }\r\n        })\r\n\r\n        let seriesResultsText\r\n        if(winsThisSeries > lossesThisSeries){\r\n          seriesResultsText = `${team} wins the championship series ${winsThisSeries} - ${lossesThisSeries}`\r\n        } else {\r\n          seriesResultsText = `${team} lose the championship series ${lossesThisSeries} - ${winsThisSeries}`\r\n        }\r\n\r\n        const championshipRoundResultsText = document.createElement(\"h6\")\r\n        championshipRoundResultsText.innerText = seriesResultsText\r\n        gameResultsFrag.append(championshipRoundResultsText)\r\n        }\r\n\r\n        // Home Team Logo    \r\n        const homeTeamLogo = document.createElement('div');\r\n        homeTeamLogo.className = 'homeTeamLogo w3-card w3-blue';\r\n        if(seasonNum >= SEASON_WITH_TEAM_LOGOS_START){\r\n          const homeTeamsLogoName = eachTeamObjectMAP.get(homeTeamName)[`${seasonNumberFolderName}HomeFilePath`]\r\n          const homeTeamLogoPath = `../../../../img/teamLogos/${seasonNumberFolderName}/${homeTeamsLogoName}.png`\r\n          const homeTeamLogoImg = document.createElement('img');\r\n          homeTeamLogoImg.src = homeTeamLogoPath\r\n          homeTeamLogoImg.style.height = \"3.25rem\"\r\n          homeTeamLogoImg.style.width = \"3.25rem\"\r\n          homeTeamLogo.append(homeTeamLogoImg)\r\n        } else {\r\n          const homeTeamLogoHTML = team == `${teamsMAP.get(+teamsGames[i].TeamOne)}`\r\n              ? createTeamCssLogo.getTeamsGamesResults(team, seasonNum, \"Home\")\r\n              : createTeamCssLogo.getTeamsGamesResults(`${teamsMAP.get(+teamsGames[i].TeamOne)}`, seasonNum, \"Home\");\r\n              homeTeamLogo.innerHTML = homeTeamLogoHTML;\r\n        }\r\n        gameResultsDiv.appendChild(homeTeamLogo);\r\n\r\n        // Home Team Name\r\n        const homeTeam = document.createElement('div');\r\n        homeTeam.className = 'homeTeam';\r\n        homeTeam.style.backgroundColor = `#${teamsColorMAP.get(team == `${teamsMAP.get(+teamsGames[i].TeamOne)}` ? team : `${teamsMAP.get(+teamsGames[i].TeamOne)}`)}`;\r\n        homeTeam.style.color = '#ffffff';\r\n        homeTeam.textContent = `${teamsMAP.get(+teamsGames[i].TeamOne)}`;\r\n        gameResultsDiv.appendChild(homeTeam);\r\n\r\n        // Home Team Score\r\n        const homeScore = document.createElement('div');\r\n        homeScore.className = `homeScore ${teamsGames[i].TeamOneScore > teamsGames[i].TeamTwoScore ? 'w3-green' : teamsGames[i].TeamOneScore == teamsGames[i].TeamTwoScore ? 'w3-dark-gray' : 'w3-red'}`;\r\n        homeScore.textContent = `${teamsGames[i].TeamOneScore}`;\r\n        gameResultsDiv.appendChild(homeScore);\r\n\r\n        // Away Team Name\r\n        const awayTeam = document.createElement('div');\r\n        awayTeam.className = 'awayTeam';\r\n        awayTeam.style.backgroundColor = `#${teamsColorMAP.get(team == `${teamsMAP.get(+teamsGames[i].TeamTwo)}` ? team : `${teamsMAP.get(+teamsGames[i].TeamTwo)}`)}`;\r\n        awayTeam.style.color = '#ffffff';\r\n        awayTeam.textContent = `${teamsMAP.get(+teamsGames[i].TeamTwo)}`;\r\n        gameResultsDiv.appendChild(awayTeam);\r\n\r\n        // Away Team Logo\r\n        const awayTeamLogo = document.createElement('div');\r\n        awayTeamLogo.className = 'awayTeamLogo w3-card w3-blue';\r\n        if(seasonNum >= SEASON_WITH_TEAM_LOGOS_START) {\r\n          const awayTeamsLogoName = eachTeamObjectMAP.get(awayTeamName)[`${seasonNumberFolderName}HomeFilePath`]\r\n          const awayTeamLogoPath = `../../../../img/teamLogos/${seasonNumberFolderName}/${awayTeamsLogoName}.png`\r\n          const awayTeamLogoImg = document.createElement('img');\r\n          awayTeamLogoImg.src = awayTeamLogoPath\r\n          awayTeamLogoImg.style.height = \"3.25rem\"\r\n          awayTeamLogoImg.style.width = \"3.25rem\"\r\n          awayTeamLogo.append(awayTeamLogoImg)\r\n        } else {\r\n          const awayTeamLogoHTML = team == `${teamsMAP.get(+teamsGames[i].TeamTwo)}`\r\n              ? createTeamCssLogo.getTeamsGamesResults(team, seasonNum, \"Away\")\r\n              : createTeamCssLogo.getTeamsGamesResults(`${teamsMAP.get(+teamsGames[i].TeamTwo)}`, seasonNum, \"Away\");\r\n          awayTeamLogo.innerHTML = awayTeamLogoHTML;\r\n        }\r\n        gameResultsDiv.appendChild(awayTeamLogo);\r\n\r\n        // Away Team Score\r\n        const awayScore = document.createElement('div');\r\n        awayScore.className = `awayScore ${teamsGames[i].TeamOneScore < teamsGames[i].TeamTwoScore ? 'w3-green' : teamsGames[i].TeamTwoScore == teamsGames[i].TeamOneScore ? 'w3-dark-gray' : 'w3-red'}`;\r\n        awayScore.textContent = `${teamsGames[i].TeamTwoScore}`;\r\n        gameResultsDiv.appendChild(awayScore);\r\n\r\n        // Game Result Box\r\n        const gameResultsBox = document.createElement('div');\r\n        gameResultsBox.className = `gameResultsBox ${getGameResultClass(teamsGames[i], team)}`;\r\n        gameResultsBox.textContent = getGameResultText(teamsGames[i], team);\r\n        gameResultsDiv.appendChild(gameResultsBox);\r\n\r\n        // Game Highlights\r\n        const gameHighlights = document.createElement('div');\r\n        gameHighlights.className = 'gameHighlights';\r\n        gameHighlights.dataset.gameHighlights = \"\";\r\n        gameHighlights.dataset.teamName = team;\r\n        gameHighlights.dataset.gameId = teamsGames[i].GameID;\r\n        gameHighlights.dataset.gameType = gameType;\r\n        gameHighlights.textContent = `Game Highlights (${Gifs.filter(gif => gif.GameID == teamsGames[i].GameID).length})`;\r\n        gameResultsDiv.appendChild(gameHighlights);\r\n\r\n        // Game Stats\r\n        const gameStats = document.createElement('div');\r\n        gameStats.className = 'gameStats';\r\n        gameStats.dataset.gameStats = \"\";\r\n        gameStats.dataset.teamName = team;\r\n        gameStats.dataset.gameId = teamsGames[i].GameID;\r\n        gameStats.dataset.seasonNumber = seasonNum;\r\n        gameStats.dataset.gameType = gameType;\r\n        gameStats.textContent = 'Stats';\r\n        gameResultsDiv.appendChild(gameStats);\r\n\r\n        gameResultsFrag.appendChild(gameContainer);\r\n        }\r\n      } else {\r\n        const scoreResults = document.createElement('h4');\r\n        scoreResults.textContent = \"No games played\"\r\n        gameResultsFrag.append(scoreResults)\r\n      }\r\n  \r\n    // change header banner when team is selected from navbar\r\n    setHeaderBanner(team, seasonNum);\r\n  \r\n    // change bodies background color to that of team selected\r\n    document.body.style.backgroundColor = `#${teamsColorMAP.get(team)}`;\r\n  \r\n    // display data in correct div and clear previous data\r\n    clearTablesDiv();\r\n    clearScoreboardDiv()\r\n    const scores = document.getElementById(\"scoreboardDiv\");\r\n    scores.append(gameResultsFrag)\r\n    // listener for the back button back to teams layout Page\r\n    document\r\n      .getElementById(\"gameResultsBackButton\")\r\n      .addEventListener(\"click\", () => {setTeamsPageLayout(document.getElementById('gameResultsBackButton'))});\r\n    // end back button\r\n    // highlight divs\r\n    const gameHighlightDivs = Array.from(\r\n      document.querySelectorAll(\"div[data-game-highlights]\")\r\n    );\r\n  \r\n    gameHighlightDivs.forEach((item) => item.addEventListener(\"click\", (e) => {\r\n      // scroll window back up before loading gifs\r\n        const tablesDiv = getTablesDiv();\r\n        tablesDiv.scrollIntoView({\r\n          behavior: 'smooth',\r\n          block: \"center\"\r\n        });\r\n      setTimeout(() => {\r\n        setGifs(e)\r\n      }, 750)\r\n    }));\r\n    //end highlights div\r\n    // single games result div\r\n    const gameResultsDataDiv = Array.from(\r\n      document.querySelectorAll(\"div[data-game-stats]\")\r\n    );\r\n    gameResultsDataDiv.forEach((item) =>\r\n      item.addEventListener(\"click\", setGamesData)\r\n    );\r\n    //end single games results div\r\n  }","import teamsMAP from \"../../../var_lib/maps/teams/teamsMAP\";\r\n\r\nfunction getGameResultClass(game, team) {\r\n    if (team == `${teamsMAP.get(+game.TeamOne)}`) {\r\n        if (game.TeamOneScore > game.TeamTwoScore && game.ExtraTime == \"No\") {\r\n            return 'w3-green'; // Win\r\n        } else if (game.TeamOneScore > game.TeamTwoScore && game.ExtraTime == \"Yes\") {\r\n            return 'w3-blue'; // Overtime Win\r\n        } else if (game.TeamOneScore == game.TeamTwoScore) {\r\n            return 'w3-grey'; // Draw\r\n        } else if (game.TeamOneScore < game.TeamTwoScore && game.ExtraTime == \"Yes\") {\r\n            return 'w3-grey'; // Overtime Loss\r\n        } else {\r\n            return 'w3-red'; // Loss\r\n        }\r\n    } else if (team == `${teamsMAP.get(+game.TeamTwo)}`) {\r\n        if (game.TeamTwoScore > game.TeamOneScore && game.ExtraTime == \"No\") {\r\n            return 'w3-green'; // Win\r\n        } else if (game.TeamTwoScore > game.TeamOneScore && game.ExtraTime == \"Yes\") {\r\n            return 'w3-blue'; // Overtime Win\r\n        } else if (game.TeamTwoScore == game.TeamOneScore) {\r\n            return 'w3-grey'; // Draw\r\n        } else if (game.TeamTwoScore < game.TeamOneScore && game.ExtraTime == \"Yes\") {\r\n            return 'w3-grey'; // Overtime Loss\r\n        } else {\r\n            return 'w3-red'; // Loss\r\n        }\r\n    }\r\n}\r\n\r\nexport default getGameResultClass;","import teamsMAP from \"../../../var_lib/maps/teams/teamsMAP\";\r\n\r\nfunction getGameResultText(game, team) {\r\n    if (team == `${teamsMAP.get(+game.TeamOne)}`) {\r\n        if (game.TeamOneScore > game.TeamTwoScore && game.ExtraTime == \"No\") {\r\n            return 'Win';\r\n        } else if (game.TeamOneScore > game.TeamTwoScore && game.ExtraTime == \"Yes\") {\r\n            return 'OTW';\r\n        } else if (game.TeamOneScore == game.TeamTwoScore) {\r\n            return 'Draw';\r\n        } else if (game.TeamOneScore < game.TeamTwoScore && game.ExtraTime == \"Yes\") {\r\n            return 'OTL';\r\n        } else {\r\n            return 'Loss';\r\n        }\r\n    } else if (team == `${teamsMAP.get(+game.TeamTwo)}`) {\r\n        if (game.TeamTwoScore > game.TeamOneScore && game.ExtraTime == \"No\") {\r\n            return 'Win';\r\n        } else if (game.TeamTwoScore > game.TeamOneScore && game.ExtraTime == \"Yes\") {\r\n            return 'OTW';\r\n        } else if (game.TeamTwoScore == game.TeamOneScore) {\r\n            return 'Draw';\r\n        } else if (game.TeamTwoScore < game.TeamOneScore && game.ExtraTime == \"Yes\") {\r\n            return 'OTL';\r\n        } else {\r\n            return 'Loss';\r\n        }\r\n    }\r\n  }\r\n\r\nexport default getGameResultText;","import backButton from \"../../../misc/backButton\";\r\nimport createTeamCssLogo from \"../../../misc/createTeamCssLogo\";\r\n\r\nfunction gifsHeader({teamName, thisGifsSeasonNum,  thisGamesHomeTeam, thisGamesAwayTeam ,thisGamesHomeTeamScore, thisGamesAwayTeamScore, gameType}){\r\n    const gifsHeaderContainer = document.createElement(\"div\");\r\n    gifsHeaderContainer.classList.add(\"gifsHeaderContainer\");\r\n\r\n    // Back button\r\n    const backButtonElement = backButton(\r\n      \"gamesGifsBackButton\",\r\n      teamName,\r\n      thisGifsSeasonNum,\r\n      gameType,\r\n      \"gifsBackButton\"\r\n    );\r\n    gifsHeaderContainer.appendChild(backButtonElement);\r\n\r\n    // Home team section\r\n    const gifsHomeTeam = document.createElement(\"div\");\r\n    gifsHomeTeam.classList.add(\"gifsHomeTeam\");\r\n    gifsHomeTeam.innerHTML = createTeamCssLogo.setGifs(\r\n      thisGamesHomeTeam,\r\n      thisGifsSeasonNum,\r\n      \"Home\"\r\n    );\r\n    gifsHeaderContainer.appendChild(gifsHomeTeam);\r\n\r\n    const gifsHomeTeamScore = document.createElement(\"div\");\r\n    gifsHomeTeamScore.classList.add(\"gifsHomeTeamScore\");\r\n    gifsHomeTeamScore.textContent = thisGamesHomeTeamScore;\r\n    gifsHeaderContainer.appendChild(gifsHomeTeamScore);\r\n\r\n    // \"vs\" section\r\n    const gifsVsHeader = document.createElement(\"div\");\r\n    gifsVsHeader.classList.add(\"gifsVsHeader\");\r\n    gifsVsHeader.textContent = \" vs \";\r\n    gifsHeaderContainer.appendChild(gifsVsHeader);\r\n\r\n    // Away team section\r\n    const gifsAwayTeam = document.createElement(\"div\");\r\n    gifsAwayTeam.classList.add(\"gifsAwayTeam\");\r\n    gifsAwayTeam.innerHTML = createTeamCssLogo.setGifs(\r\n      thisGamesAwayTeam,\r\n      thisGifsSeasonNum,\r\n      \"Away\"\r\n    );\r\n    gifsHeaderContainer.appendChild(gifsAwayTeam);\r\n\r\n    const gifsAwayTeamScore = document.createElement(\"div\");\r\n    gifsAwayTeamScore.classList.add(\"gifsAwayTeamScore\");\r\n    gifsAwayTeamScore.textContent = thisGamesAwayTeamScore;\r\n    gifsHeaderContainer.appendChild(gifsAwayTeamScore);\r\n\r\n    return gifsHeaderContainer;\r\n}\r\n\r\nexport default gifsHeader;","function noGifs(){\r\n    const noGifsElement = document.createElement(\"h3\");\r\n    noGifsElement.textContent = \"No highlights for this game\";\r\n    return noGifsElement;\r\n}\r\n\r\nexport default noGifs;","function setGifContainers({thisGamesHighlights}){\r\n    const fragment = document.createDocumentFragment();\r\n\r\n    // loops through all gifs for this game and only loads img src for the first gif\r\n    // while others have containers created to be observed for intersection\r\n    for (let i = 0; i < thisGamesHighlights.length; i++) {\r\n    let thisGamesFinalPath;\r\n    const theseGifsSubSet = thisGamesHighlights[0].Filepath;\r\n    const thisGifsSubPath = theseGifsSubSet.slice(\r\n      0,\r\n      theseGifsSubSet.length - 6\r\n    );\r\n    // deals with file names 09 or 10 and above\r\n    if (i < 9) {\r\n      thisGamesFinalPath = `${thisGifsSubPath}0${i + 1}.gif`;\r\n    } else {\r\n      thisGamesFinalPath = `${thisGifsSubPath}${i + 1}.gif`;\r\n    }\r\n    const thisGif = thisGamesHighlights.find(\r\n      (item) => item.Filepath == thisGamesFinalPath\r\n    );\r\n          // Create a container for each GIF and comment\r\n    const gifContainer = document.createElement(\"div\");\r\n    gifContainer.style.minHeight = \"100px\";\r\n    i == 0 ? gifContainer.classList.add(\"gifContainer\", \"firstGif\") : gifContainer.classList.add(\"gifContainer\", \"observedGif\")\r\n\r\n    gifContainer.setAttribute('data-imgSrc', thisGamesFinalPath)\r\n    gifContainer.setAttribute('data-gifComment', thisGif.Comment)\r\n\r\n    // Add the comment to the first gif\r\n    if(i == 0){\r\n    const gifComment = document.createElement(\"h5\");\r\n    gifComment.textContent = thisGif.Comment;\r\n    gifContainer.appendChild(gifComment);\r\n\r\n    // Add the GIF image to the first img\r\n    const gifImage = document.createElement(\"img\");\r\n    gifImage.src = thisGamesFinalPath;\r\n    gifContainer.appendChild(gifImage);\r\n    } else {\r\n    // create empty container\r\n    const gifComment = document.createElement(\"h5\");\r\n    gifContainer.append(gifComment)\r\n    // create empty img element\r\n    const gifImage = document.createElement(\"img\");\r\n    gifContainer.append(gifImage)\r\n    }\r\n    fragment.append(gifContainer)\r\n    }\r\n    return fragment\r\n}\r\n\r\nexport default setGifContainers;","function observeGifs(){\r\n    const firstGifContainer = document.querySelectorAll(\".firstGif\");\r\n\r\n    const firstGifObserver = new IntersectionObserver(entries => {\r\n      entries.forEach(entry => {\r\n        const gifsComment = entry.target.querySelector(\"h5\");\r\n        const gif = entry.target.querySelector(\"img\");\r\n\r\n        if(entry.isIntersecting){\r\n          gifsComment.textContent = entry.target.dataset.gifcomment;\r\n          gif.src = entry.target.dataset.imgsrc;\r\n        } else {\r\n            // Remove the GIF image source when the element is out of view\r\n            gif.src = ''; // Clear the image src\r\n            gifsComment.textContent = ''; \r\n        }\r\n      })\r\n    },\r\n  {\r\n    rootMargin: \"50px\"\r\n  })\r\n\r\n  firstGifContainer.forEach(gif => {\r\n    firstGifObserver.observe(gif)\r\n  })\r\n    const gifContainers = document.querySelectorAll(\".observedGif\");\r\n\r\n    const followingGifsObserver = new IntersectionObserver(entries => {\r\n      entries.forEach(entry => {\r\n        const gifsComment = entry.target.querySelector(\"h5\");\r\n        const gif = entry.target.querySelector(\"img\");\r\n\r\n        if(entry.isIntersecting){\r\n          gifsComment.textContent = entry.target.dataset.gifcomment;\r\n          gif.src = entry.target.dataset.imgsrc;\r\n        } else {\r\n            // Remove the GIF image source when the element is out of view\r\n            gif.src = ''; // Clear the image src\r\n            gifsComment.textContent = ''; \r\n        }\r\n      })\r\n    },\r\n  {\r\n    rootMargin: \"50px\"\r\n  })\r\n\r\n  gifContainers.forEach(gif => {\r\n    followingGifsObserver.observe(gif)\r\n  })\r\n  }\r\n\r\n  export default observeGifs","  import { GameResults, Gifs } from \"../../../constants/masterHaxData.js\";\r\n  import teamsMAP from \"../../var_lib/maps/teams/teamsMAP.js\";\r\n  import clearScoreboardDiv from \"../../scoreboard/clearScoreboardDiv.js\";\r\n  import clearTablesDiv from \"../../tables/clearTablesDiv.js\";\r\n  import getScoreboardDiv from \"../../scoreboard/getScoreboardDiv.js\";\r\n  import getTablesDiv from \"../../tables/getTablesDiv.js\";\r\n  import getTeamsGameResults from \"../getTeamsGamesResults/getTeamsGamesResults.js\";\r\n  import observeGifs from \"./helpers/observeGifs.js\"\r\n  import gifsHeader from \"./components/gifsHeader.js\";\r\n  import setGifContainers from \"./components/setGifContainers.js\"\r\n  import noGifs from \"./components/noGifs.js\";\r\n  \r\n  export default function setGifs(e) {\r\n    clearScoreboardDiv();\r\n    clearTablesDiv();\r\n    const tablesDiv = getTablesDiv();\r\n    const scoreboardDiv = getScoreboardDiv();\r\n    const gameNumber = e.target.dataset.gameId;\r\n    const teamName = e.target.dataset.teamName;\r\n    const gameType = e.target.dataset.gameType;\r\n    const thisGamesResult = GameResults.filter((item) => item.GameID == gameNumber);\r\n    const thisGifsSeasonNum = thisGamesResult[0].SeasonNumber;\r\n    const thisGamesHomeTeam = teamsMAP.get(+thisGamesResult[0].TeamOne);\r\n    const thisGamesHomeTeamScore = thisGamesResult[0].TeamOneScore;\r\n    const thisGamesAwayTeam = teamsMAP.get(+thisGamesResult[0].TeamTwo);\r\n    const thisGamesAwayTeamScore = thisGamesResult[0].TeamTwoScore;\r\n    const thisGamesHighlights = Gifs.filter((item) => item.GameID == gameNumber);\r\n    // arguments for methods used below\r\n    const argsObject = {\r\n      teamName, thisGifsSeasonNum,  thisGamesHomeTeam, thisGamesAwayTeam ,thisGamesHomeTeamScore, thisGamesAwayTeamScore, thisGamesHighlights, gameType\r\n    }\r\n\r\n    if (thisGamesHighlights.length > 0) {\r\n  \r\n      // Set the gifs header\r\n      tablesDiv.innerHTML = \"\";\r\n      tablesDiv.appendChild(gifsHeader(argsObject));\r\n  \r\n      // listener for the back button back to teams layout Page\r\n      document\r\n        .getElementById(\"gamesGifsBackButton\")\r\n        .addEventListener(\"click\", getTeamsGameResults);\r\n      // end back button\r\n      // Append the gifs to the scoreboardDiv\r\n      scoreboardDiv.appendChild(setGifContainers(argsObject));\r\n\r\n      // watch gif containers for lazy loading\r\n      observeGifs()\r\n\r\n    } else {\r\n      scoreboardDiv.appendChild(noGifs());\r\n    }\r\n  }","import eachSeasonsTeamsMAP from \"../../../var_lib/maps/teams/eachSeasonsTeamsMAP\";\r\nimport createTeamCssLogo from \"../../../misc/createTeamCssLogo\";\r\nimport parseStringToDOM from \"../../../misc/parsedStringToDOM\";\r\n\r\nfunction setTeamLogoCss(element, season, id = undefined, teamNameParam = undefined) {\r\n    let teamName;\r\n    if(id != undefined){\r\n        teamName = eachSeasonsTeamsMAP.get(season)[id];\r\n    } \r\n\r\n    if(teamNameParam != undefined){\r\n        teamName = teamNameParam;  \r\n    }\r\n\r\n    const containerElem = document.createElement('div');\r\n    containerElem.classList.add(\"w3-container\", \"w3-cell\", \"w3-cell-middle\");\r\n\r\n    const innerDiv = document.createElement('div');\r\n    const innerDivClass = id != undefined ? \"w3-card-4 w3-blue w3-round-xlarge navLogoContainer\" : \"w3-padding-small w3-section navLogoContainer\";\r\n    const splitClasses = innerDivClass.split(\" \");\r\n    splitClasses.forEach(className => {\r\n        innerDiv.classList.add(className)\r\n    })\r\n    const cssLogoElement = createTeamCssLogo.setTeamLogoCss(teamName, season, \"Home\")\r\n\r\n    const parsedLogo = parseStringToDOM(cssLogoElement)\r\n\r\n    innerDiv.append(parsedLogo);\r\n\r\n    containerElem.append(innerDiv);\r\n    return containerElem;\r\n}\r\n\r\nexport default setTeamLogoCss;","// this function is run in listeners.js\r\nimport eachSeasonsTeamsMAP from \"../../var_lib/maps/teams/eachSeasonsTeamsMAP\"\r\nimport setListenersMainNavbar from \"../../listeners/listenerHelpers/setListenersMainNavbar\";\r\nimport currentSeason from \"../../var_lib/season/currentSeason\";\r\nimport setTeamLogoCss from \"./helpers/setTeamLogoCss\"\r\n  \r\n  export default function setMainNavbar(season) {\r\n    // season can be 0 when choosing all time player stats from menu\r\n    // season can become undefined when resizing the screen when all time player stats are showing\r\n    if(season === 0 || season == undefined){\r\n      season = currentSeason\r\n    }\r\n    const screenWidth = window.innerWidth;\r\n    const teamsThisSeason = eachSeasonsTeamsMAP.get(season).length;\r\n    const navbarContainer = document.querySelector(\"#teamsNavbar > section\");\r\n    const navbarContent = document.createDocumentFragment()\r\n    // if statement to prevent to many team logos which appear too small on one navbar\r\n    if (teamsThisSeason > 5 && screenWidth < 600) {\r\n      // this is for more teams than 5 which on mobile becomes to crowded\r\n      navbarContainer.style.flexDirection = \"column\";\r\n      const navbarContentContainer = document.createElement('div');\r\n      navbarContentContainer.style.width = \"100%\";\r\n      navbarContentContainer.style.display = \"flex\";\r\n      navbarContentContainer.style.justifyContent = \"space-around\";\r\n\r\n      // create second row of teams\r\n      const secondRowContainer = navbarContentContainer.cloneNode();\r\n      \r\n      for (let i = 0; i < teamsThisSeason / 2; i++) {\r\n        // first row of teams\r\n        navbarContentContainer.append(setTeamLogoCss(navbarContent, season, i));\r\n      }\r\n      // second row of teams\r\n      for (let i = teamsThisSeason / 2; i < teamsThisSeason; i++) {\r\n        secondRowContainer.append(setTeamLogoCss(navbarContent, season, i))\r\n      }\r\n      navbarContent.append(navbarContentContainer)\r\n      navbarContent.append(secondRowContainer)\r\n      \r\n    } else {\r\n      navbarContainer.style.flexDirection = \"row\";\r\n      // else less than 5 teams looks good on mobile\r\n      for (let i = 0; i < teamsThisSeason; i++) {\r\n        // navbarContent = setLayout(imageSource, navbarContent, season, i);\r\n        navbarContent.append(setTeamLogoCss(navbarContent, season, i))\r\n      }\r\n    }\r\n    navbarContainer.innerHTML = \"\";\r\n    navbarContainer.append(navbarContent);\r\n\r\n    // increase css logo sizes on seasons team counts that require multiple navbar rows\r\n    if (teamsThisSeason > 5 && screenWidth < 600) {\r\n      const mobileNavlogoContainers = document.querySelectorAll(\".navLogoContainer\");\r\n      mobileNavlogoContainers.forEach(row => {\r\n          const eachCssLogo = row.firstElementChild;\r\n          eachCssLogo.style.width = \"3.25rem\";\r\n          eachCssLogo.style.height = \"3.25rem\";\r\n      });\r\n    }\r\n\r\n    setListenersMainNavbar();\r\n  }","import teamsColorMAP from \"../../../var_lib/maps/teams/teamsColorMAP\";\r\nimport teamsNumMAP from \"../../../var_lib/maps/teams/teamsNumMAP\";\r\nimport eachTeamObjectMAP from \"../../../var_lib/maps/teams/eachTeamObjectMAP\";\r\nimport createElement from \"../../../misc/createElement\";\r\nimport bestOfSeriesGameResult from \"./bestOfSeriesGameResult\";\r\nimport { TEAM_LOGO_SIZE, SEASON_WITH_TEAM_LOGOS_START } from \"../../../../constants/consts/vars\";\r\n\r\nfunction bestOfSeries(seasonNumber, team, playoffGamesArray, teamOneOrTwo, teamsStanding, isFinals = false){\r\n    // check if is finals series\r\n    if(isFinals){\r\n            const seriesFrag = document.createDocumentFragment()\r\n\r\n            const teamGameOne = createElement(\"div\", teamOneOrTwo)\r\n            // team one name\r\n            const teamName = createElement(\"div\", \"teamData\")\r\n            teamName.style.display = 'flex'\r\n            teamName.style.justifyContent = 'space-between'\r\n            teamName.style.backgroundColor = \"#\" + teamsColorMAP.get(team.get(\"Team\"))\r\n            let seriesWinner;\r\n            let wins = 0;\r\n            // checks if finals are set either no teams or one team\r\n            if(team){\r\n                // create team name text/rank div\r\n                const teamNameText = createElement('div')\r\n                teamNameText.textContent = `(${teamsStanding + 1}) ` + team.get(\"Team\")\r\n                teamName.append(teamNameText)\r\n                // create teams logo if logo exists\r\n                if(seasonNumber >= SEASON_WITH_TEAM_LOGOS_START){\r\n                    const seasonNumberAsNumber = parseInt(seasonNumber)\r\n                    const seasonNumberFolderName = seasonNumberAsNumber>9 ? `S${seasonNumber}` : `S0${seasonNumber}`\r\n                    const teamLogo = document.createElement('img')\r\n                    const teamsLogoName = eachTeamObjectMAP.get(team.get(\"Team\"))[`${seasonNumberFolderName}HomeFilePath`]\r\n                    teamLogo.src = `../../../../../img/teamLogos/${seasonNumberFolderName}/${teamsLogoName}.png`\r\n                    teamLogo.alt = 'img'\r\n                    teamLogo.style.height = TEAM_LOGO_SIZE\r\n                    teamLogo.style.width = TEAM_LOGO_SIZE\r\n                    teamName.append(teamLogo)\r\n                }\r\n                teamGameOne.append(teamName)\r\n                if(playoffGamesArray.length > 0){                    \r\n                    // team one game one score\r\n                    const teamGameOneScore = createElement(\"div\", \"teamData\")\r\n                    const teamsNum = teamsNumMAP.get(team.get(\"Team\"))\r\n                    const gameOneScore = playoffGamesArray[0].TeamOne == teamsNum ? playoffGamesArray[0].TeamOneScore : playoffGamesArray[0].TeamTwoScore\r\n                    teamGameOneScore.textContent = gameOneScore;\r\n                    let isTeamOneInGameResult = playoffGamesArray[0].TeamOne == teamsNum ? true : false;\r\n                    // wins counts to determine if this team wins the series\r\n                    let resultBgColor;\r\n                    const gameOneResult = bestOfSeriesGameResult(isTeamOneInGameResult, playoffGamesArray, 0, resultBgColor, wins)\r\n                    wins = gameOneResult.wins;\r\n                    resultBgColor = gameOneResult.resultBgColor\r\n                    teamGameOneScore.style.backgroundColor = resultBgColor;\r\n                    // team one game two score\r\n                    const teamGameTwoScore = createElement(\"div\", \"teamData\")\r\n                    const gameTwoScore = (playoffGamesArray[1].TeamOne == teamsNum) ? playoffGamesArray[1].TeamOneScore : playoffGamesArray[1].TeamTwoScore\r\n                    teamGameTwoScore.textContent = gameTwoScore\r\n                    isTeamOneInGameResult = playoffGamesArray[1].TeamOne == teamsNum ? true : false;\r\n                    const gameTwoResult = bestOfSeriesGameResult(isTeamOneInGameResult, playoffGamesArray, 1, resultBgColor, wins)\r\n                    wins = gameTwoResult.wins;\r\n                    resultBgColor = gameTwoResult.resultBgColor\r\n                    teamGameTwoScore.style.backgroundColor = resultBgColor;\r\n                    \r\n                    teamGameOne.append(teamGameOneScore)\r\n                    teamGameOne.append(teamGameTwoScore)\r\n                    const wasThirdGamePlayed = playoffGamesArray.length;\r\n                    if(wasThirdGamePlayed > 2){\r\n                        // team one game three score\r\n                        const teamGameThreeScore = createElement(\"div\", \"teamData\")\r\n                        const gameThreeScore = (playoffGamesArray[2].TeamOne == teamsNum) ? playoffGamesArray[2].TeamOneScore : playoffGamesArray[2].TeamTwoScore\r\n                        teamGameThreeScore.textContent = gameThreeScore\r\n                        isTeamOneInGameResult = playoffGamesArray[2].TeamOne == teamsNum ? true : false;\r\n                        const gameThreeResult = bestOfSeriesGameResult(isTeamOneInGameResult, playoffGamesArray, 2, resultBgColor, wins)\r\n                        wins = gameThreeResult.wins;\r\n                        resultBgColor = gameThreeResult.resultBgColor\r\n                        teamGameThreeScore.style.backgroundColor = resultBgColor;\r\n                        teamGameOne.append(teamGameThreeScore)\r\n                    } else {\r\n                        // team one game three score\r\n                        const teamGameThreeScore = createElement(\"div\", \"teamData\")\r\n                        teamGameThreeScore.textContent = \"-\"\r\n                        teamGameOne.append(teamGameThreeScore)\r\n                    }\r\n                }\r\n                // pass back which team won the series to be used in next round information\r\n            if(wins == 2){\r\n                seriesWinner = team.get(\"Team\")\r\n            } else {\r\n                    seriesWinner = null\r\n                }\r\n            } else {\r\n                teamName.innerHTML = \"TBD <br> <br> vs\";\r\n                teamGameOne.append(teamName)\r\n            }\r\n            seriesFrag.append(teamGameOne)\r\n            return {\r\n                seriesFrag,\r\n                seriesWinner,\r\n                wins\r\n            }\r\n    }\r\n    // these are not final series\r\n    // filter out games that only have this team\r\n    const filteredPlayoffGamesArray = playoffGamesArray.filter(game => {\r\n        if(game.TeamOne == teamsNumMAP.get(team.get(\"Team\")) || game.TeamTwo == teamsNumMAP.get(team.get(\"Team\"))) {\r\n            return game;\r\n        }\r\n    });\r\n    // if the series has been played\r\n    if(filteredPlayoffGamesArray.length > 0){\r\n        const seriesFrag = document.createDocumentFragment()\r\n        \r\n        const teamGameOne = createElement(\"div\", teamOneOrTwo)\r\n        // team one name container\r\n        const teamName = createElement(\"div\", \"teamData\")\r\n        teamName.style.display = 'flex'\r\n        teamName.style.justifyContent = 'space-between'\r\n        teamName.style.backgroundColor = \"#\" + teamsColorMAP.get(team.get(\"Team\"))\r\n        // team one name and rank\r\n        const teamNameText = createElement('div')\r\n        teamNameText.textContent = `(${teamsStanding}) ` + team.get(\"Team\")\r\n        teamName.append(teamNameText)\r\n        if(seasonNumber >= SEASON_WITH_TEAM_LOGOS_START){\r\n            // team one team logo\r\n            const seasonNumberAsNumber = parseInt(seasonNumber)\r\n            const seasonNumberFolderName = seasonNumberAsNumber>9 ? `S${seasonNumber}` : `S0${seasonNumber}`\r\n            const teamLogo = document.createElement('img')\r\n            const teamsLogoName = eachTeamObjectMAP.get(team.get(\"Team\"))[`${seasonNumberFolderName}HomeFilePath`]\r\n            teamLogo.src = `../../../../../img/teamLogos/${seasonNumberFolderName}/${teamsLogoName}.png`\r\n            teamLogo.alt = 'img'\r\n            teamLogo.style.height = TEAM_LOGO_SIZE\r\n            teamLogo.style.width = TEAM_LOGO_SIZE\r\n            teamName.append(teamLogo)\r\n        }\r\n\r\n        // team one game one score\r\n        const teamGameOneScore = createElement(\"div\", \"teamData\")\r\n        const teamsNum = teamsNumMAP.get(team.get(\"Team\"))\r\n        const gameOneScore = filteredPlayoffGamesArray[0].TeamOne == teamsNum ? filteredPlayoffGamesArray[0].TeamOneScore : filteredPlayoffGamesArray[0].TeamTwoScore\r\n        teamGameOneScore.textContent = gameOneScore;\r\n        let isTeamOneInGameResult = filteredPlayoffGamesArray[0].TeamOne == teamsNum ? true : false;\r\n        // wins counts to determine if this team wins the series\r\n        let wins = 0;\r\n        let resultBgColor;\r\n        const gameOneResult = bestOfSeriesGameResult(isTeamOneInGameResult, filteredPlayoffGamesArray, 0, resultBgColor, wins)\r\n        wins = gameOneResult.wins;\r\n        resultBgColor = gameOneResult.resultBgColor\r\n        teamGameOneScore.style.backgroundColor = resultBgColor;\r\n        // team one game two score\r\n        const teamGameTwoScore = createElement(\"div\", \"teamData\")\r\n        const gameTwoScore = (filteredPlayoffGamesArray[1].TeamOne == teamsNum) ? filteredPlayoffGamesArray[1].TeamOneScore : filteredPlayoffGamesArray[1].TeamTwoScore\r\n        teamGameTwoScore.textContent = gameTwoScore\r\n        isTeamOneInGameResult = filteredPlayoffGamesArray[1].TeamOne == teamsNum ? true : false;\r\n        const gameTwoResult = bestOfSeriesGameResult(isTeamOneInGameResult, filteredPlayoffGamesArray, 1, resultBgColor, wins)\r\n        wins = gameTwoResult.wins;\r\n        resultBgColor = gameTwoResult.resultBgColor\r\n        teamGameTwoScore.style.backgroundColor = resultBgColor;\r\n        \r\n        teamGameOne.append(teamName)\r\n        teamGameOne.append(teamGameOneScore)\r\n        teamGameOne.append(teamGameTwoScore)\r\n        \r\n        const wasThirdGamePlayed = filteredPlayoffGamesArray.length;\r\n        if(wasThirdGamePlayed > 2){\r\n            // team one game three score\r\n            const teamGameThreeScore = createElement(\"div\", \"teamData\")\r\n            const gameThreeScore = (filteredPlayoffGamesArray[2].TeamOne == teamsNum) ? filteredPlayoffGamesArray[2].TeamOneScore : filteredPlayoffGamesArray[2].TeamTwoScore\r\n            teamGameThreeScore.textContent = gameThreeScore\r\n            isTeamOneInGameResult = filteredPlayoffGamesArray[2].TeamOne == teamsNum ? true : false;\r\n            const gameThreeResult = bestOfSeriesGameResult(isTeamOneInGameResult, filteredPlayoffGamesArray, 2, resultBgColor, wins)\r\n            wins = gameThreeResult.wins;\r\n            resultBgColor = gameThreeResult.resultBgColor\r\n            teamGameThreeScore.style.backgroundColor = resultBgColor;\r\n            teamGameOne.append(teamGameThreeScore)\r\n        } else {\r\n            // team one game three score\r\n            const teamGameThreeScore = createElement(\"div\", \"teamData\")\r\n            teamGameThreeScore.textContent = \"-\"\r\n            teamGameOne.append(teamGameThreeScore)\r\n        }\r\n        seriesFrag.append(teamGameOne)\r\n        // pass back which team won the series to be used in next round information\r\n        let seriesWinner;\r\n        if(wins == 2){\r\n            seriesWinner = team.get(\"Team\")\r\n        } else {\r\n            seriesWinner = null\r\n        }\r\n    return {\r\n        seriesFrag,\r\n        seriesWinner,\r\n        wins\r\n    }\r\n    // else return team names with score symbols for yet to be played games\r\n    } else {\r\n            const seriesFrag = document.createDocumentFragment()\r\n        \r\n            const teamGameOne = createElement(\"div\", teamOneOrTwo)\r\n            // team one name container\r\n            const teamName = createElement(\"div\", \"teamData\")\r\n            teamName.style.display = 'flex'\r\n            teamName.style.justifyContent = 'space-between'\r\n            teamName.style.backgroundColor = \"#\" + teamsColorMAP.get(team.get(\"Team\"))\r\n            // team name text div\r\n            const teamNameText = createElement('div')\r\n            teamNameText.textContent = `(${teamsStanding}) ` + team.get(\"Team\")\r\n            teamName.append(teamNameText)\r\n            // append team logo if logo exists\r\n            if(seasonNumber >= 5){\r\n                // team one team logo\r\n                const seasonNumberAsNumber = parseInt(seasonNumber)\r\n                const seasonNumberFolderName = seasonNumberAsNumber>9 ? `S${seasonNumber}` : `S0${seasonNumber}`\r\n                const teamLogo = document.createElement('img')\r\n                let teamsName = team.get(\"Team\") \r\n                const teamsLogoName = eachTeamObjectMAP.get(team.get(\"Team\"))[`${seasonNumberFolderName}HomeFilePath`]\r\n                teamLogo.src = `../../../../../img/teamLogos/${seasonNumberFolderName}/${teamsLogoName}.png`\r\n                teamLogo.alt = 'img'\r\n                teamLogo.style.height = TEAM_LOGO_SIZE\r\n                teamLogo.style.width = TEAM_LOGO_SIZE\r\n                teamName.append(teamLogo)\r\n            }\r\n            // team one game one score\r\n            const teamGameOneScore = createElement(\"div\", \"teamData\")\r\n            teamGameOneScore.textContent = \"-\";\r\n            // team one game two score\r\n            const teamGameTwoScore = createElement(\"div\", \"teamData\")\r\n            teamGameTwoScore.textContent = \"-\"\r\n            \r\n            teamGameOne.append(teamName)\r\n            teamGameOne.append(teamGameOneScore)\r\n            teamGameOne.append(teamGameTwoScore)\r\n            // team one game three score\r\n            const teamGameThreeScore = createElement(\"div\", \"teamData\")\r\n            teamGameThreeScore.textContent = \"-\"\r\n            teamGameOne.append(teamGameThreeScore)\r\n        \r\n            seriesFrag.append(teamGameOne)\r\n            return {seriesFrag}\r\n    }\r\n}\r\n\r\nexport default bestOfSeries;","function bestOfSeriesGameResult(isTeamOneInGameResult, gamesArray, gameNum, resultBgColor, wins){\r\n    if(isTeamOneInGameResult){\r\n        if (gamesArray[gameNum].TeamOneScore > gamesArray[gameNum].TeamTwoScore) {\r\n            if(gamesArray[gameNum].ExtraTime === \"Yes\"){\r\n                resultBgColor = \"#2196F3\"\r\n            } else {\r\n                resultBgColor = \"limegreen\";\r\n            }\r\n            wins++;\r\n        } else {\r\n            if(gamesArray[gameNum].ExtraTime === \"Yes\"){\r\n                resultBgColor = \"#9E9E9E\"\r\n            } else {\r\n                resultBgColor = \"red\";\r\n            }\r\n        }\r\n    } else {\r\n        if (gamesArray[gameNum].TeamTwoScore > gamesArray[gameNum].TeamOneScore) {\r\n            if(gamesArray[gameNum].ExtraTime === \"Yes\"){\r\n                resultBgColor = \"#2196F3\"\r\n            } else {\r\n                resultBgColor = \"limegreen\";\r\n            }\r\n            wins++\r\n        } else {\r\n            if(gamesArray[gameNum].ExtraTime === \"Yes\"){\r\n                resultBgColor = \"#9E9E9E\"\r\n            } else {\r\n                resultBgColor = \"red\";\r\n            }\r\n        }\r\n    }\r\n    return { resultBgColor, wins }\r\n}\r\n\r\nexport default bestOfSeriesGameResult","import createElement from \"../../../misc/createElement\"\r\nimport teamsColorMAP from \"../../../var_lib/maps/teams/teamsColorMAP\"\r\nimport eachTeamObjectMAP from \"../../../var_lib/maps/teams/eachTeamObjectMAP\"\r\nimport { TEAM_LOGO_SIZE } from \"../../../../constants/consts/vars\"\r\n\r\nfunction seriesBye(team, seasonNumber){\r\n    // flex container for alignments\r\n    const byeContainer = createElement(\"div\", `byeContainer`)\r\n    // flex container for alignments\r\n    const byeInnerContainer = createElement(\"div\", `semi1`)\r\n    // flex containers that contain the series data\r\n    const series = createElement(\"div\", \"series\")\r\n    // teams name\r\n    const teamName = createElement(\"div\", \"teamData\")\r\n    teamName.style.backgroundColor = \"#\" + teamsColorMAP.get(team.get(\"Team\"))\r\n    teamName.style.display = \"flex\"\r\n    teamName.style.justifyContent = \"space-between\"\r\n    teamName.textContent = `(1) ` + team.get(\"Team\")\r\n    // add teams logo\r\n    const seasonNumberAsNumber = parseInt(seasonNumber)\r\n    const seasonNumberFolderName = seasonNumberAsNumber>9 ? `S${seasonNumber}` : `S0${seasonNumber}`\r\n    const teamLogo = document.createElement('img')\r\n    const teamsLogoName = eachTeamObjectMAP.get(team.get(\"Team\"))[`${seasonNumberFolderName}HomeFilePath`]\r\n    teamLogo.src = `../../../../../img/teamLogos/${seasonNumberFolderName}/${teamsLogoName}.png`\r\n    teamLogo.alt = 'img'\r\n    teamLogo.style.marginLeft = \"1rem\"\r\n    teamLogo.style.height = TEAM_LOGO_SIZE\r\n    teamLogo.style.width = TEAM_LOGO_SIZE\r\n    teamName.append(teamLogo)\r\n    // bye message\r\n    const byeMessage = createElement(\"div\", \"teamData\");\r\n    byeMessage.textContent = \"(Bye)\"\r\n    // team one flex container\r\n    const seriesTeam1Results = {\r\n        seriesWinner: team.get(\"Team\")\r\n    }\r\n\r\n    // append each teams row of results\r\n    byeInnerContainer.append(series)\r\n    series.append(byeMessage)\r\n    series.append(teamName)\r\n    byeContainer.append(byeInnerContainer)\r\n\r\n    return {\r\n        byeContainer,\r\n        seriesTeam1Results,\r\n    }\r\n\r\n}\r\n\r\nexport default seriesBye","import bestOfSeries from \"./bestOfSeries\";\r\nimport createElement from \"../../../misc/createElement\";\r\n\r\nfunction seriesContainer({teamOne, teamOneRank, teamTwo, teamTwoRank, gamesArray, seriesNum, seasonNumber}){\r\n    // flex container for alignments\r\n    const semiDivContainer = createElement(\"div\", `semi${seriesNum}Container`)\r\n    // flex container for alignments\r\n    const semiInnerContainer = createElement(\"div\", `semi${seriesNum}`)\r\n    // flex containers that contain the series data\r\n    const series = createElement(\"div\", \"series\")\r\n    // team one flex container\r\n    const seriesTeam1Results = bestOfSeries(seasonNumber, teamOne, gamesArray, \"team1\", teamOneRank)\r\n    // team two flex container\r\n    const seriesTeam2Results = bestOfSeries(seasonNumber, teamTwo, gamesArray, \"team2\", teamTwoRank)\r\n    // append state of series such as series winner or tied at 0-0\r\n    const seriesWinner = seriesTeam1Results.seriesWinner ?? seriesTeam2Results.seriesWinner;\r\n    const seriesLosersWins = Math.min(seriesTeam1Results.wins, seriesTeam2Results.wins)\r\n    const seriesStatusContainer = createElement(\"div\")\r\n    if(seriesWinner && seriesLosersWins != null){\r\n        seriesStatusContainer.textContent = `${seriesWinner} win (2 - ${seriesLosersWins})`;\r\n    } else {\r\n        seriesStatusContainer.textContent = `Series to be played`;\r\n    }\r\n\r\n    // append each teams row of results\r\n    series.append(seriesStatusContainer)\r\n    series.append(seriesTeam1Results.seriesFrag)\r\n    series.append(seriesTeam2Results.seriesFrag)\r\n    semiInnerContainer.append(series)\r\n    semiDivContainer.append(semiInnerContainer)\r\n\r\n    return {\r\n        semiDivContainer,\r\n        seriesTeam1Results,\r\n        seriesTeam2Results\r\n    }\r\n}\r\n\r\nexport default seriesContainer;","import bestOfSeriesGameResult from \"./bestOfSeriesGameResult\";\r\nimport createElement from \"../../../misc/createElement\";\r\nimport teamsNumMAP from \"../../../var_lib/maps/teams/teamsNumMAP\";\r\nimport teamsColorMAP from \"../../../var_lib/maps/teams/teamsColorMAP\";\r\nimport eachTeamObjectMAP from \"../../../var_lib/maps/teams/eachTeamObjectMAP\";\r\nimport { TEAM_LOGO_SIZE } from \"../../../../constants/consts/vars\";\r\n\r\nfunction singleGameSeriesContainer({teamOne, teamOneRank, teamTwo, teamTwoRank, gamesArray, seriesNum, seasonNumber}){\r\n    // flex container for alignments\r\n    const semiDivContainer = createElement(\"div\", `secondRoundDiv${seriesNum}Container`)\r\n    // flex container for alignments\r\n    const semiInnerContainer = createElement(\"div\", `semi${seriesNum}`)\r\n    // flex containers that contain the series data\r\n    const series = createElement(\"div\", \"series\")\r\n    // team one flex container\r\n    const seriesTeam1Results = singleGameSeries(teamOne, gamesArray, \"team1\", teamOneRank, seasonNumber)\r\n    // team two flex container\r\n    const seriesTeam2Results = singleGameSeries(teamTwo, gamesArray, \"team2\", teamTwoRank, seasonNumber)\r\n\r\n    // append each teams row of results\r\n    series.append(seriesTeam1Results.seriesFrag)\r\n    series.append(seriesTeam2Results.seriesFrag)\r\n    semiInnerContainer.append(series)\r\n    semiDivContainer.append(semiInnerContainer)\r\n\r\n    return {\r\n        semiDivContainer,\r\n        seriesTeam1Results,\r\n        seriesTeam2Results\r\n    }\r\n}\r\n\r\nfunction singleGameSeries(team, gamesArray, teamOneOrTwo, teamsStanding, seasonNumber, isFinals = false){\r\n    const filteredPlayoffGamesArray = [gamesArray]\r\n    // if the series has been played\r\n    if(filteredPlayoffGamesArray.length > 0){\r\n        const seriesFrag = document.createDocumentFragment()\r\n        \r\n        const teamGameOne = createElement(\"div\", teamOneOrTwo)\r\n        // team one name\r\n        const teamName = createElement(\"div\", \"teamData\")\r\n        teamName.style.display = 'flex'\r\n        teamName.style.justifyContent = 'space-between'\r\n        teamName.style.backgroundColor = \"#\" + teamsColorMAP.get(team.get(\"Team\"))\r\n        teamName.textContent = `(${teamsStanding}) ` + team.get(\"Team\")\r\n        // team one logo\r\n         const seasonNumberAsNumber = parseInt(seasonNumber)\r\n        const seasonNumberFolderName = seasonNumberAsNumber>9 ? `S${seasonNumber}` : `S0${seasonNumber}`\r\n        const teamLogo = document.createElement('img')\r\n        const teamsLogoName = eachTeamObjectMAP.get(team.get(\"Team\"))[`${seasonNumberFolderName}HomeFilePath`]\r\n        teamLogo.src = `../../../../../img/teamLogos/${seasonNumberFolderName}/${teamsLogoName}.png`\r\n        teamLogo.alt = 'img'\r\n        teamLogo.style.height = TEAM_LOGO_SIZE\r\n        teamLogo.style.width = TEAM_LOGO_SIZE\r\n        teamName.append(teamLogo)\r\n        \r\n        // team one game one score\r\n        const teamGameOneScore = createElement(\"div\", \"teamData\")\r\n        const teamsNum = teamsNumMAP.get(team.get(\"Team\"))\r\n        const gameOneScore = filteredPlayoffGamesArray[0].TeamOne == teamsNum ? filteredPlayoffGamesArray[0].TeamOneScore : filteredPlayoffGamesArray[0].TeamTwoScore\r\n        teamGameOneScore.textContent = gameOneScore;\r\n        let isTeamOneInGameResult = filteredPlayoffGamesArray[0].TeamOne == teamsNum ? true : false;\r\n        // wins counts to determine if this team wins the series\r\n        let wins = 0;\r\n        let resultBgColor;\r\n        const gameOneResult = bestOfSeriesGameResult(isTeamOneInGameResult, filteredPlayoffGamesArray, 0, resultBgColor, wins)\r\n        wins = gameOneResult.wins;\r\n        resultBgColor = gameOneResult.resultBgColor\r\n        if(filteredPlayoffGamesArray[0].ExtraTime === \"Yes\"){\r\n            if(resultBgColor === \"limegreen\"){\r\n                resultBgColor = \"#2196F3\"\r\n            }\r\n            if(resultBgColor === \"red\"){\r\n                resultBgColor = \"#9E9E9E\"\r\n            }\r\n        }\r\n        teamGameOneScore.style.backgroundColor = resultBgColor;\r\n        \r\n        teamGameOne.append(teamName)\r\n        teamGameOne.append(teamGameOneScore)\r\n    \r\n\r\n        seriesFrag.append(teamGameOne)\r\n\r\n    return {\r\n        seriesFrag,\r\n    }\r\n    // else return team names with score symbols for yet to be played games\r\n    } else {\r\n            const seriesFrag = document.createDocumentFragment()\r\n        \r\n            const teamGameOne = createElement(\"div\", teamOneOrTwo)\r\n                // team one name\r\n            const teamName = createElement(\"div\", \"teamData\")\r\n            teamName.style.backgroundColor = \"#\" + teamsColorMAP.get(team.get(\"Team\"))\r\n            teamName.textContent = `(${teamsStanding}) ` + team.get(\"Team\")\r\n            // team one game one score\r\n            const teamGameOneScore = createElement(\"div\", \"teamData\")\r\n            teamGameOneScore.textContent = \"-\";\r\n            // team one game two score\r\n            const teamGameTwoScore = createElement(\"div\", \"teamData\")\r\n            teamGameTwoScore.textContent = \"-\"\r\n            \r\n            teamGameOne.append(teamName)\r\n            teamGameOne.append(teamGameOneScore)\r\n        \r\n            seriesFrag.append(teamGameOne)\r\n            return {seriesFrag}\r\n    }\r\n}\r\n\r\nexport default singleGameSeriesContainer;","import clearScoreboardDiv from \"../../scoreboard/clearScoreboardDiv\"\r\nimport clearTablesDiv from \"../../tables/clearTablesDiv\"\r\nimport getTablesDiv from \"../../tables/getTablesDiv\";\r\nimport { GameResults } from \"../../../constants/masterHaxData\";\r\nimport TeamStats from \"../../setTables/createTeam\";\r\nimport sortGroupedStats from \"../../misc/sorting/sort\";\r\nimport bestOfSeries from \"./componenets/bestOfSeries\";\r\nimport setMainNavbar from \"../navbar/setMainNavbar\";\r\nimport setHeaderBanner from \"../setHeaderBanner\";\r\nimport { CHAMPIONS_LIST, IN_BETWEEN_SEASONS, CURRENT_SEASON_PLAYOFF_TEAMS_COUNT } from \"../../../constants/consts/vars\";\r\nimport createElement from \"../../misc/createElement\";\r\nimport seriesContainer from \"./componenets/seriesContainer\";\r\nimport COLORS from \"../../../constants/consts/colors\";\r\nimport seriesBye from \"./componenets/seriesBye\";\r\nimport currentSeason from \"../../var_lib/season/currentSeason\";\r\nimport singleGameSeriesContainer from \"./componenets/singleGameSeriesContainer\";\r\n\r\nfunction playoffTree(seasonNumber){\r\n    clearTablesDiv()\r\n    clearScoreboardDiv()\r\n    document.body.style.backgroundColor = COLORS[\"w3-blue\"]\r\n    // get season number from data attribute on playoff menu link\r\n    let championsListElement;\r\n    if(seasonNumber == currentSeason){\r\n        championsListElement = seasonNumber-2\r\n        if(IN_BETWEEN_SEASONS){\r\n            championsListElement = seasonNumber-1\r\n        }\r\n    } else {\r\n        championsListElement = seasonNumber - 1 \r\n    }\r\n    setHeaderBanner(CHAMPIONS_LIST[championsListElement], seasonNumber == currentSeason ? (IN_BETWEEN_SEASONS ? seasonNumber : seasonNumber-1) : seasonNumber)\r\n    setMainNavbar(seasonNumber)\r\n    // get playoff games for matching season\r\n    const firstRoundGames = GameResults.filter(game => game.SeasonNumber === seasonNumber && game.Round === 1)\r\n    const secondRoundGames = GameResults.filter(game => game.SeasonNumber === seasonNumber && game.Round === 2)\r\n    const firstAndSecondRoundGames = [...firstRoundGames, ...secondRoundGames]\r\n    // use to determine which round numbers are which series. example semi's or final's\r\n    const countOfTeamsInPlayoffs = new Set(firstAndSecondRoundGames.flatMap(game => [game.TeamOne, game.TeamTwo])).size\r\n    let finalsRoundNumber;\r\n    let semisRoundNumber;\r\n    let playoffTreeClass\r\n    switch(countOfTeamsInPlayoffs){\r\n        case 3:\r\n            semisRoundNumber = 1;\r\n            finalsRoundNumber = 2;\r\n            playoffTreeClass = \"playoffTreeThreeTeams\"\r\n        break;\r\n        case 4:\r\n            semisRoundNumber = 1;\r\n            finalsRoundNumber = 2;\r\n            playoffTreeClass = \"playoffTreeFourTeams\"\r\n        break;\r\n        case 5:\r\n            semisRoundNumber = 2;\r\n            finalsRoundNumber = 3;\r\n            playoffTreeClass = \"playoffTreeFiveTeams\"\r\n        break;\r\n    }\r\n    const key = `groupTeamsSeason${seasonNumber}SeasonStats`\r\n    const seasonsFinalStandings = TeamStats[key]\r\n    const sortedFinalStandings = sortGroupedStats(seasonsFinalStandings, \"Points\")\r\n    // begin constructing the display\r\n    const tablesDiv = getTablesDiv();\r\n    // playoff tree grid container\r\n    const containerElem = createElement(\"div\", \"w3-container\", playoffTreeClass)\r\n    const playoffsAnnouncementContainer = createElement(\"div\", \"playoffAnnouncement\")\r\n    playoffsAnnouncementContainer.innerHTML = `<h3>Season ${seasonNumber} playoffs</h3>`\r\n    containerElem.append(playoffsAnnouncementContainer)\r\n\r\n    // first round title\r\n    const firstRoundTitleContainer = createElement(\"div\", \"firstRound\")\r\n    const firstRoundTitleHeadElement = createElement(\"h4\");\r\n    firstRoundTitleHeadElement.textContent = \"Round One\"\r\n    firstRoundTitleContainer.append(firstRoundTitleHeadElement)\r\n    containerElem.append(firstRoundTitleContainer)\r\n\r\n    // if three rounds\r\n    if(countOfTeamsInPlayoffs === 5){\r\n        const secondRoundTitleContainer = createElement(\"div\", \"secondRound\")\r\n        const secondRoundTitleHeadElement = createElement(\"h4\");\r\n        secondRoundTitleHeadElement.textContent = \"Round Robin\"\r\n        secondRoundTitleContainer.append(secondRoundTitleHeadElement)\r\n        containerElem.append(secondRoundTitleContainer)\r\n    }\r\n\r\n    // final round title\r\n    const finalRoundTitleContainer = createElement(\"div\", \"finalRound\")\r\n    const finalRoundTitleHeadElement = createElement(\"h4\")\r\n    finalRoundTitleHeadElement.textContent = \"Championship\"\r\n    finalRoundTitleContainer.append(finalRoundTitleHeadElement)\r\n    containerElem.append(finalRoundTitleContainer)\r\n    // build the series tree dependant on how many teams are in the playoffs for that particular season\r\n    // first round in playoff format that contains 3 teams\r\n    if(countOfTeamsInPlayoffs == 3){\r\n        // team with bye\r\n        const {\r\n            byeContainer,\r\n            seriesTeam1Results: firstSeriesTeam1Results\r\n        } = seriesBye(sortedFinalStandings[0], seasonNumber)\r\n\r\n                        //// semi final 2v3 ////\r\n        const seriesTwoContainerArgs = {\r\n            teamOne: sortedFinalStandings[1],\r\n            teamOneRank: 2,\r\n            teamTwo: sortedFinalStandings[2],\r\n            teamTwoRank: 3,\r\n            gamesArray: firstRoundGames,\r\n            seriesNum: 2,\r\n            seasonNumber\r\n        }\r\n        // returns dom container for a single series\r\n        const {\r\n            semiDivContainer: semiDiv2Container,\r\n            seriesTeam1Results: secondSeriesTeam1Results, \r\n            seriesTeam2Results: secondSeriesTeam2Results\r\n        } = seriesContainer(seriesTwoContainerArgs);\r\n\r\n                  // get finals playoff games for matching season\r\n        const finalPlayoffGames = GameResults.filter(game => game.SeasonNumber === seasonNumber && game.Round === finalsRoundNumber)\r\n        // finals container\r\n        const finalsContainer = createElement(\"div\", \"finalsContainer\")\r\n        const finalsDivInnerContainer = createElement(\"div\", \"semi2\")\r\n        const finalSeries = createElement(\"div\", \"series\")\r\n        \r\n        // get the finalists index in sorted standings in order to be passed into the finalists bestOfSeries call\r\n        const seriesOneWinner = firstSeriesTeam1Results.seriesWinner\r\n        const seriesTwoWinner = secondSeriesTeam1Results.seriesWinner ?? secondSeriesTeam2Results.seriesWinner;\r\n        const seriesOneWinnerInFinalStandings = sortedFinalStandings.findIndex(team => team.get(\"Team\") === seriesOneWinner)\r\n        const seriesTwoWinnerInFinalStandings = sortedFinalStandings.findIndex(team => team.get(\"Team\") === seriesTwoWinner)\r\n        // team one flex container\r\n        const finalSeriesTeam1Results = bestOfSeries(seasonNumber, sortedFinalStandings[seriesOneWinnerInFinalStandings], finalPlayoffGames, \"team1\", seriesOneWinnerInFinalStandings, true);\r\n        // team two flex container\r\n        const finalSeriesTeam2Results = bestOfSeries(seasonNumber, sortedFinalStandings[seriesTwoWinnerInFinalStandings], finalPlayoffGames, \"team2\", seriesTwoWinnerInFinalStandings, true);\r\n        // append state of series such as series winner or tied at 0-0\r\n        const seriesWinner = finalSeriesTeam1Results.seriesWinner ?? finalSeriesTeam2Results.seriesWinner;\r\n        const seriesLosersWins = Math.min(finalSeriesTeam1Results.wins, finalSeriesTeam2Results.wins)\r\n        const finaSeriesStatusContainer = createElement(\"div\")\r\n        if(seriesWinner && seriesLosersWins != null){\r\n            finaSeriesStatusContainer.textContent = `${seriesWinner} win (2 - ${seriesLosersWins})`;\r\n        } else {\r\n            finaSeriesStatusContainer.textContent = `Series (0 - 0)`;\r\n        }\r\n        // only append the series status if both teams are determined\r\n        if(seriesOneWinner && seriesTwoWinner){\r\n            finalSeries.append(finaSeriesStatusContainer)\r\n        }\r\n        finalSeries.append(finalSeriesTeam1Results.seriesFrag)\r\n        finalSeries.append(finalSeriesTeam2Results.seriesFrag)\r\n        finalsDivInnerContainer.append(finalSeries)\r\n        finalsContainer.append(finalsDivInnerContainer)\r\n        // append each series to playoffs grid layout\r\n        containerElem.append(byeContainer, semiDiv2Container, finalsContainer)\r\n        \r\n        // if both finalists are set but no games have been played then append dashes in place of scores\r\n        if(seriesOneWinner && seriesTwoWinner){\r\n            if(finalPlayoffGames.length == 0){\r\n                    setTimeout(() => {\r\n                        for(let i = 1; i<=2; i++){\r\n                            let getFinalsContainer = document.querySelector(`.finalsContainer .team${i}`)\r\n                                for(let j = 0; j<=2; j++){\r\n                                    const teamOneFinalsScoreHolder = createElement(\"div\", \"teamData\")\r\n                                    teamOneFinalsScoreHolder.textContent = \"-\";\r\n                                    getFinalsContainer.append(teamOneFinalsScoreHolder)\r\n                                }\r\n                        }\r\n                    }, 0)\r\n                }\r\n            }\r\n    }\r\n    // first round in playoff format that contains 4 teams\r\n    if(countOfTeamsInPlayoffs == 4){\r\n        //// semi final 1v4 ////\r\n        const seriesOneContainerArgs = {\r\n            teamOne: sortedFinalStandings[0],\r\n            teamOneRank: 1,\r\n            teamTwo: sortedFinalStandings[3],\r\n            teamTwoRank: 4,\r\n            gamesArray: firstRoundGames,\r\n            seriesNum: 1,\r\n            seasonNumber\r\n        }\r\n        // returns dom container for a single series\r\n        const {\r\n            semiDivContainer: semiDiv1Container,\r\n            seriesTeam1Results: firstSeriesTeam1Results, \r\n            seriesTeam2Results: firstSeriesTeam2Results\r\n        } = seriesContainer(seriesOneContainerArgs);\r\n\r\n        //// semi final 2v3 ////\r\n        const seriesTwoContainerArgs = {\r\n            teamOne: sortedFinalStandings[1],\r\n            teamOneRank: 2,\r\n            teamTwo: sortedFinalStandings[2],\r\n            teamTwoRank: 3,\r\n            gamesArray: firstRoundGames,\r\n            seriesNum: 2,\r\n            seasonNumber\r\n        }\r\n        // returns dom container for a single series\r\n        const {\r\n            semiDivContainer: semiDiv2Container,\r\n            seriesTeam1Results: secondSeriesTeam1Results, \r\n            seriesTeam2Results: secondSeriesTeam2Results\r\n        } = seriesContainer(seriesTwoContainerArgs);\r\n\r\n        // get finals playoff games for matching season\r\n        const finalPlayoffGames = GameResults.filter(game => game.SeasonNumber === seasonNumber && game.Round === finalsRoundNumber)\r\n        // finals container\r\n        const finalsContainer = createElement(\"div\", \"finalsContainer\")\r\n        const finalsDivInnerContainer = createElement(\"div\", \"semi2\")\r\n        const finalSeries = createElement(\"div\", \"series\")\r\n        \r\n        // get the finalists index in sorted standings in order to be passed into the finalists bestOfSeries call\r\n        const seriesOneWinner = firstSeriesTeam1Results.seriesWinner ?? firstSeriesTeam2Results.seriesWinner;\r\n        const seriesTwoWinner = secondSeriesTeam1Results.seriesWinner ?? secondSeriesTeam2Results.seriesWinner;\r\n        const seriesOneWinnerInFinalStandings = sortedFinalStandings.findIndex(team => team.get(\"Team\") === seriesOneWinner)\r\n        const seriesTwoWinnerInFinalStandings = sortedFinalStandings.findIndex(team => team.get(\"Team\") === seriesTwoWinner)\r\n        // team one flex container\r\n        const finalSeriesTeam1Results = bestOfSeries(seasonNumber, sortedFinalStandings[seriesOneWinnerInFinalStandings], finalPlayoffGames, \"team1\", seriesOneWinnerInFinalStandings, true);\r\n        // team two flex container\r\n        const finalSeriesTeam2Results = bestOfSeries(seasonNumber, sortedFinalStandings[seriesTwoWinnerInFinalStandings], finalPlayoffGames, \"team2\", seriesTwoWinnerInFinalStandings, true);\r\n        // append state of series such as series winner or tied at 0-0\r\n        const seriesWinner = finalSeriesTeam1Results.seriesWinner ?? finalSeriesTeam2Results.seriesWinner;\r\n        const seriesLosersWins = Math.min(finalSeriesTeam1Results.wins, finalSeriesTeam2Results.wins)\r\n        const finaSeriesStatusContainer = createElement(\"div\")\r\n        if(seriesWinner && seriesLosersWins != null){\r\n            finaSeriesStatusContainer.textContent = `${seriesWinner} win (2 - ${seriesLosersWins})`;\r\n        } else {\r\n            finaSeriesStatusContainer.textContent = `Series (0 - 0)`;\r\n        }\r\n        // only append the series status if both teams are determined\r\n        if(seriesOneWinner && seriesTwoWinner){\r\n            finalSeries.append(finaSeriesStatusContainer)\r\n        }\r\n        // correctly order higher standing team in final series in playoff tree\r\n        if(seriesOneWinnerInFinalStandings < seriesTwoWinnerInFinalStandings){\r\n            finalSeries.append(finalSeriesTeam1Results.seriesFrag)\r\n            finalSeries.append(finalSeriesTeam2Results.seriesFrag)\r\n        } else {\r\n            finalSeries.append(finalSeriesTeam2Results.seriesFrag)\r\n            finalSeries.append(finalSeriesTeam1Results.seriesFrag)\r\n        }\r\n        finalsDivInnerContainer.append(finalSeries)\r\n        finalsContainer.append(finalsDivInnerContainer)\r\n        // append each series to playoffs grid layout\r\n        containerElem.append(semiDiv1Container, semiDiv2Container, finalsContainer)\r\n        \r\n        // if both finalists are set but no games have been played then append dashes in place of scores\r\n        if(seriesOneWinner && seriesTwoWinner){\r\n            if(finalPlayoffGames.length == 0){\r\n                    setTimeout(() => {\r\n                        for(let i = 1; i<=2; i++){\r\n                            let getFinalsContainer = document.querySelector(`.finalsContainer .team${i}`)\r\n                                for(let j = 0; j<=2; j++){\r\n                                    const teamOneFinalsScoreHolder = createElement(\"div\", \"teamData\")\r\n                                    teamOneFinalsScoreHolder.textContent = \"-\";\r\n                                    getFinalsContainer.append(teamOneFinalsScoreHolder)\r\n                                }\r\n                        }\r\n                    }, 0)\r\n                }\r\n            }\r\n    }\r\n    // first round in playoff format that contains 5 teams\r\n    if(countOfTeamsInPlayoffs == 5){\r\n        // get round robin playoff games for matching season\r\n        const roundRobinPlayoffGames = GameResults.filter(game => game.SeasonNumber === seasonNumber && game.Round === 2)\r\n        // team with bye\r\n        const {\r\n            byeContainer,\r\n            seriesTeam1Results: firstSeriesTeam1Results\r\n        } = seriesBye(sortedFinalStandings[1], seasonNumber)\r\n\r\n        //// first round 2v5 ////\r\n        const seriesOneContainerArgs = {\r\n            teamOne: sortedFinalStandings[0],\r\n            teamOneRank: 2,\r\n            teamTwo: sortedFinalStandings[4],\r\n            teamTwoRank: 5,\r\n            gamesArray: firstRoundGames,\r\n            seriesNum: 1,\r\n            seasonNumber\r\n        }\r\n        // returns dom container for a single series\r\n        const {\r\n            semiDivContainer: firstRoundDiv1Container,\r\n            seriesTeam1Results: secondSeriesTeam1Results, \r\n            seriesTeam2Results: secondSeriesTeam2Results\r\n        } = seriesContainer(seriesOneContainerArgs);\r\n\r\n        //// first round 3v4 ////\r\n        const seriesTwoContainerArgs = {\r\n            teamOne: sortedFinalStandings[2],\r\n            teamOneRank: 3,\r\n            teamTwo: sortedFinalStandings[3],\r\n            teamTwoRank: 4,\r\n            gamesArray: firstRoundGames,\r\n            seriesNum: 2,\r\n            seasonNumber\r\n        }\r\n        // returns dom container for a single series\r\n        const {\r\n            semiDivContainer: firstRoundDiv2Container,\r\n            seriesTeam1Results: thirdSeriesTeam1Results, \r\n            seriesTeam2Results: thirdSeriesTeam2Results\r\n        } = seriesContainer(seriesTwoContainerArgs);\r\n\r\n        // round robin container\r\n        //// second round game one ////\r\n        const secondRoundGameOneContainerArgs = {\r\n            teamOne: sortedFinalStandings[0],\r\n            teamOneRank: 2,\r\n            teamTwo: sortedFinalStandings[2],\r\n            teamTwoRank: 3,\r\n            gamesArray: roundRobinPlayoffGames[0],\r\n            seriesNum: 1,\r\n            seasonNumber: seasonNumber\r\n        }\r\n        // returns dom container for a single series\r\n        const {\r\n            semiDivContainer: secondRoundDiv1Container,\r\n        } = singleGameSeriesContainer(secondRoundGameOneContainerArgs);\r\n\r\n        //// second round game two ////\r\n        const secondRoundGameTwoContainerArgs = {\r\n            teamOne: sortedFinalStandings[1],\r\n            teamOneRank: 1,\r\n            teamTwo: sortedFinalStandings[2],\r\n            teamTwoRank: 3,\r\n            gamesArray: roundRobinPlayoffGames[1],\r\n            seriesNum: 2,\r\n            seasonNumber: seasonNumber\r\n        }\r\n        // returns dom container for a single series\r\n        const {\r\n            semiDivContainer: secondRoundDiv2Container,\r\n        } = singleGameSeriesContainer(secondRoundGameTwoContainerArgs);\r\n\r\n        //// second round game three ////\r\n        const secondRoundGameThreeContainerArgs = {\r\n            teamOne: sortedFinalStandings[1],\r\n            teamOneRank: 1,\r\n            teamTwo: sortedFinalStandings[0],\r\n            teamTwoRank: 2,\r\n            gamesArray: roundRobinPlayoffGames[2],\r\n            seriesNum: 3,\r\n            seasonNumber, seasonNumber\r\n        }\r\n        // returns dom container for a single series\r\n        const {\r\n            semiDivContainer: secondRoundDiv3Container,\r\n        } = singleGameSeriesContainer(secondRoundGameThreeContainerArgs);\r\n\r\n        // get finals playoff games for matching season\r\n        const finalPlayoffGames = GameResults.filter(game => game.SeasonNumber === seasonNumber && game.Round === finalsRoundNumber)\r\n        // finals container\r\n        const finalsContainer = createElement(\"div\", \"finalsContainer\")\r\n        const finalsDivInnerContainer = createElement(\"div\", \"semi2\")\r\n        const finalSeries = createElement(\"div\", \"series\")\r\n        \r\n        // get the finalists index in sorted standings in order to be passed into the finalists bestOfSeries call\r\n        const seriesOneWinner = \"Orange Ricky\"\r\n        const seriesTwoWinner = \"Haxual Chocolate\"\r\n        const seriesOneWinnerInFinalStandings = sortedFinalStandings.findIndex(team => team.get(\"Team\") === seriesOneWinner)\r\n        const seriesTwoWinnerInFinalStandings = sortedFinalStandings.findIndex(team => team.get(\"Team\") === seriesTwoWinner)\r\n        // team one flex container\r\n        const finalSeriesTeam1Results = bestOfSeries(seasonNumber, sortedFinalStandings[seriesOneWinnerInFinalStandings], finalPlayoffGames, \"team1\", seriesOneWinnerInFinalStandings, true);\r\n        // team two flex container\r\n        const finalSeriesTeam2Results = bestOfSeries(seasonNumber, sortedFinalStandings[seriesTwoWinnerInFinalStandings], finalPlayoffGames, \"team2\", seriesTwoWinnerInFinalStandings, true);\r\n        // append state of series such as series winner or tied at 0-0\r\n        const seriesWinner = finalSeriesTeam1Results.seriesWinner ?? finalSeriesTeam2Results.seriesWinner;\r\n        const seriesLosersWins = Math.min(finalSeriesTeam1Results.wins, finalSeriesTeam2Results.wins)\r\n        const finaSeriesStatusContainer = createElement(\"div\")\r\n        if(seriesWinner && seriesLosersWins != null){\r\n            finaSeriesStatusContainer.textContent = `${seriesWinner} win (2 - ${seriesLosersWins})`;\r\n        } else {\r\n            finaSeriesStatusContainer.textContent = `Series (0 - 0)`;\r\n        }\r\n        // only append the series status if both teams are determined\r\n        if(seriesOneWinner && seriesTwoWinner){\r\n            finalSeries.append(finaSeriesStatusContainer)\r\n        }\r\n        finalSeries.append(finalSeriesTeam1Results.seriesFrag)\r\n        finalSeries.append(finalSeriesTeam2Results.seriesFrag)\r\n        finalsDivInnerContainer.append(finalSeries)\r\n        finalsContainer.append(finalsDivInnerContainer)\r\n        \r\n        // if both finalists are set but no games have been played then append dashes in place of scores\r\n        if(seriesOneWinner && seriesTwoWinner){\r\n            if(finalPlayoffGames.length == 0){\r\n                    setTimeout(() => {\r\n                        for(let i = 1; i<=2; i++){\r\n                            let getFinalsContainer = document.querySelector(`.finalsContainer .team${i}`)\r\n                                for(let j = 0; j<=2; j++){\r\n                                    const teamOneFinalsScoreHolder = createElement(\"div\", \"teamData\")\r\n                                    teamOneFinalsScoreHolder.textContent = \"-\";\r\n                                    getFinalsContainer.append(teamOneFinalsScoreHolder)\r\n                                }\r\n                        }\r\n                    }, 0)\r\n                }\r\n            }\r\n\r\n        // append each series to playoffs grid layout\r\n        containerElem.append(byeContainer, firstRoundDiv1Container, firstRoundDiv2Container, secondRoundDiv1Container, secondRoundDiv2Container, secondRoundDiv3Container, finalsContainer)\r\n    }\r\n    tablesDiv.append(containerElem)\r\n}\r\n\r\nexport default playoffTree","import { GameResults } from \"../../../../constants/masterHaxData\";\r\n\r\nexport default function filterGameResults(seasonMode) {\r\n  let filteredGameResults;\r\n\r\n  switch (seasonMode) {\r\n    case \"Season\":\r\n      filteredGameResults = GameResults.filter((games) => {\r\n        return games.GameTypeID == \"1\";\r\n      });\r\n      break;\r\n    case \"Playoff\":\r\n      filteredGameResults = GameResults.filter((games) => {\r\n        return games.GameTypeID == \"2\";\r\n      });\r\n      break;\r\n    default:\r\n      filteredGameResults = GameResults;\r\n  }\r\n\r\n  return filteredGameResults;\r\n}\r\n","function getSelectValues() {\r\n    const getRecordsFormSelects = document.querySelectorAll('select')\r\n    const formSelectValues = {}\r\n    getRecordsFormSelects.forEach(select => {\r\n        formSelectValues[select.id] = select.value\r\n    })\r\n    return formSelectValues\r\n}\r\n\r\nexport default getSelectValues","import teamsMAP from \"../../../var_lib/maps/teams/teamsMAP.js\"\r\nimport eachTeamObjectMAP from \"../../../var_lib/maps/teams/eachTeamObjectMAP.js\"\r\n\r\nexport default function getTeamLogo(team, seasonNumber) {\r\n  let teamLogoFilePath;\r\n  const thisTeam = teamsMAP.get(team);\r\n  teamLogoFilePath =\r\n    eachTeamObjectMAP.get(thisTeam)[`S0${seasonNumber}HomeFilePath`];\r\n  return teamLogoFilePath;\r\n}\r\n","import teamsMAP from \"../../../var_lib/maps/teams/teamsMAP.js\"\r\nimport eachTeamObjectMAP from \"../../../var_lib/maps/teams/eachTeamObjectMAP.js\"\r\n\r\nexport default function getTeamsBackgroundColor(team) {\r\n  const teamName = teamsMAP.get(team);\r\n  const teamColor = eachTeamObjectMAP.get(teamName).MainColor;\r\n  return teamColor;\r\n}\r\n","import { TeamPlayers } from \"../../../../constants/masterHaxData\";\r\n\r\nexport default function getTeamsPlayers(teamNumber, seasonNumber) {\r\n  // filter out to the correct season\r\n  const getSeasonNumbersGames = TeamPlayers.filter((games) => {\r\n    return games.SeasonNumber == seasonNumber;\r\n  });\r\n  // filter out the team from the correct season\r\n  const getPlayers = getSeasonNumbersGames.filter((players) => {\r\n    return players.TeamID == teamNumber.toString();\r\n  });\r\n  return getPlayers;\r\n}\r\n","import getSelectValues from \"./getSelectValues\";\r\nimport clearScoreboardDiv from \"../../../scoreboard/clearScoreboardDiv\";\r\nimport getScoreboardDiv from \"../../../scoreboard/getScoreboardDiv\"\r\nimport { TeamPlayers, GameResults, GamePlayerStats } from \"../../../../constants/masterHaxData\";\r\nimport playersMAP from \"../../../var_lib/maps/players/playersMAP\";\r\n\r\nfunction showSelectedRecords(){\r\n    clearScoreboardDiv()\r\n    const scoreboardDiv = getScoreboardDiv()\r\n    const {type, mode, seasonNumber, category, per} = getSelectValues()\r\n\r\n    const recordStat = getStat({type, mode, seasonNumber, category, per})\r\n\r\n    let template\r\n    if(recordStat){\r\n        let recordHTML = `\r\n            <table id=\"recordsTable\">\r\n                <thead>\r\n                    <th>Player</th>\r\n                    <th>${category}</th>\r\n                </thead>\r\n                <tbody>\r\n        `\r\n        recordStat.forEach(record => {  \r\n            recordHTML += `\r\n                            <tr>\r\n                                <td>${playersMAP.get(record.PlayerID)}</td>\r\n                                <td>${category === \"Goals\" ? record.Goals : category === \"Assists\" ?  record.Assists: \"\"}</td>\r\n                            </tr>`\r\n        })\r\n        recordHTML += `\r\n                </tbody>\r\n                </thead>\r\n            </table>\r\n        `\r\n        template = document.createElement('template')\r\n        template.innerHTML = recordHTML\r\n    } else {\r\n        template = document.createElement('template')\r\n        template.innerHTML = `\r\n            <p>Stat currently unavailable</p>\r\n        `\r\n    }\r\n\r\n    const clonedNode = template.content.cloneNode(true)\r\n    scoreboardDiv.append(clonedNode)\r\n\r\n}\r\n\r\n// function that returns the stat and based on either team or player type record\r\nfunction getStat({type, mode, seasonNumber, category, per}){\r\n    if(type === \"player\"){\r\n        return getPlayerRecord({mode, seasonNumber, category, per})\r\n    } else {\r\n        return getTeamRecord({mode, seasonNumber, category, per})\r\n    }\r\n}\r\n\r\n// player type records\r\nfunction getPlayerRecord({mode, seasonNumber, category, per}){\r\n    let filteredStats\r\n    const gamesList = getGameIdsBySeason(mode, +seasonNumber)\r\n    const extractedGameIds = extractGameIds(gamesList)\r\n    filteredStats = getPlayersGameObjects({category, per}, extractedGameIds)\r\n\r\n    return filteredStats\r\n}\r\n\r\n// team type records\r\nfunction getTeamRecord({mode, seasonNumber, category, per}){\r\n\r\n}\r\n\r\n// filter games list based on season number\r\nfunction getGameIdsBySeason(mode, seasonNumber = \"all\"){\r\n    let seasonFiltered\r\n    if(!isNaN(seasonNumber)){\r\n        seasonFiltered = GameResults.filter(game => game.SeasonNumber === seasonNumber)\r\n    } else {\r\n        seasonFiltered = GameResults\r\n    }\r\n\r\n    // filter out games by mode\r\n    let filteredByMode\r\n    switch(mode){\r\n        case \"all\":\r\n            filteredByMode = seasonFiltered\r\n        break;\r\n        case \"season\":\r\n            filteredByMode = seasonFiltered.filter(game => game.Round === 0)\r\n        break;\r\n        case \"playoff\":\r\n            filteredByMode = seasonFiltered.filter(game => game.Round !== 0)\r\n        break;\r\n        default:\r\n            filteredByMode = seasonFiltered\r\n    }\r\n\r\n    return filteredByMode\r\n}\r\n\r\n\r\n// collect game id's into an array\r\nfunction extractGameIds(gamesList){\r\n    return gamesList.map(game => game.GameID)\r\n}\r\n\r\n// get player requested stat by category\r\nfunction getPlayersGameObjects({category, per}, gameIdsArray){\r\n    const getPlayersGameDataByGamesId = GamePlayerStats.filter(playersGame => {\r\n        if(gameIdsArray.includes(playersGame.GameID)){\r\n            return playersGame\r\n        }\r\n    })\r\n\r\n    let recordStat\r\n    if(per === \"game\"){\r\n       recordStat =  getRequestedGameStat({category}, getPlayersGameDataByGamesId, true).slice(0, 5)\r\n    }\r\n\r\n    if(per === \"season\"){\r\n        recordStat =  null\r\n    }\r\n\r\n    return recordStat\r\n}\r\n\r\n// extract requested game stat\r\nfunction getRequestedGameStat({category},dataArray, isSingleGame){\r\n    let recordStat\r\n    if(isSingleGame){\r\n        recordStat = dataArray.sort((a,b) => b[category] - a[category])\r\n    } else {\r\n        recordStat = null\r\n    }\r\n\r\n    return recordStat\r\n}\r\n\r\nexport default showSelectedRecords","import getTeamsPlayers from \"../genericRecordFunctions/getTeamsPlayers.js\";\r\nimport playersMAP from \"../../../var_lib/maps/players/playersMAP.js\";\r\nimport getTeamsBackgroundColor from \"../genericRecordFunctions/getTeamsBackgroundColor.js\";\r\n\r\nexport default function createIndividualRecord(\r\n  teamLogo,\r\n  recordName,\r\n  recordStat,\r\n  seasonNumber,\r\n  team\r\n) {\r\n  // create containing div for this record. will contain 2 rows. first row is the title and second will be the data\r\n  let recordDivContainer = document.createElement(\"div\");\r\n  const teamsColor = getTeamsBackgroundColor(team);\r\n  recordDivContainer.style.backgroundColor = `#${teamsColor}`;\r\n  recordDivContainer.classList = \"singleRecordContainer w3-panel w3-round\";\r\n\r\n  // create teamLogo div\r\n  let logoDiv = document.createElement(\"div\");\r\n  logoDiv.classList = \"teamsLogo w3-panel w3-round w3-card\";\r\n  // create img element to display team logo\r\n  let imageElement = document.createElement(\"img\");\r\n  imageElement.src = teamLogo;\r\n  logoDiv.append(imageElement);\r\n  recordDivContainer.append(logoDiv);\r\n\r\n  //create div that will hold the records data (number)\r\n  let teamRecordStat = document.createElement(\"div\");\r\n  teamRecordStat.classList = \"teamRecordStat w3-panel w3-round w3-card\";\r\n  teamRecordStat.innerHTML = `${recordName}: ${recordStat}`;\r\n  recordDivContainer.append(teamRecordStat);\r\n\r\n  // create div that displays the season the record occured in\r\n  let seasonNum = document.createElement(\"div\");\r\n  seasonNum.classList = \"recordSeasonNumber w3-panel w3-round w3-card\";\r\n  seasonNum.innerHTML = `Season: ${seasonNumber}`;\r\n  recordDivContainer.append(seasonNum);\r\n\r\n  // get players from the record setting team\r\n  const thisTeamsPlayers = getTeamsPlayers(team, seasonNumber);\r\n  // create div which will display the players from that record setting team\r\n  let recordPlayers = document.createElement(\"div\");\r\n  recordPlayers.classList = \"recordPlayers w3-panel w3-round w3-card\";\r\n  thisTeamsPlayers.forEach((player) => {\r\n    // get players name\r\n    const playerName = playersMAP.get(+player.PlayerID);\r\n    // create p element that will hold the players name\r\n    const p = document.createElement(\"p\");\r\n    p.innerHTML = playerName;\r\n    recordPlayers.append(p);\r\n  });\r\n  recordDivContainer.append(recordPlayers);\r\n  return recordDivContainer;\r\n}\r\n","import teamGoalsScored from \"../teamRecords/teamGoalsScored/teamGoalsScored.js\";\r\nimport createRecordsForm from \"./recordViewHtmlTemplates/recordsForm.js\";\r\nimport getSelectValues from \"../genericRecordFunctions/getSelectValues.js\";\r\n\r\nexport default function createRecordsLayout() {\r\n  // create records nav that will contain allTime/season/playoffs buttons\r\n  let recordsNav = document.createElement(\"div\");\r\n  recordsNav.classList = \"recordsNav w3-panel w3-round\";\r\n  const recordsForm = createRecordsForm()\r\n  recordsNav.append(recordsForm); \r\n\r\n  // // create season button\r\n  // let recordsSeasonButton = document.createElement(\"div\");\r\n  // recordsSeasonButton.classList = \"w3-round w3-card\";\r\n  // recordsSeasonButton.setAttribute(\"data-seasonMode\", \"Season\");\r\n  // recordsSeasonButton.innerHTML = \"Season\";\r\n  // recordsNav.append(recordsSeasonButton);\r\n  // // create playoffs button\r\n  // let recordsPlayoffsButton = document.createElement(\"div\");\r\n  // recordsPlayoffsButton.classList = \"w3-round w3-card\";\r\n  // recordsPlayoffsButton.setAttribute(\"data-seasonMode\", \"Playoff\");\r\n  // recordsPlayoffsButton.innerHTML = \"Playoff\";\r\n  // recordsNav.append(recordsPlayoffsButton);\r\n  // // create all time button\r\n  // let recordsAllTimeButton = document.createElement(\"div\");\r\n  // recordsAllTimeButton.classList = \"w3-round w3-card\";\r\n  // recordsAllTimeButton.setAttribute(\"data-seasonMode\", \"AllTime\");\r\n  // recordsAllTimeButton.innerHTML = \"All Time\";\r\n  // recordsNav.append(recordsAllTimeButton); \r\n\r\n  return recordsNav;\r\n}\r\n","const modeSelectTemplate = document.createElement('template');\r\nmodeSelectTemplate.innerHTML = `\r\n  <p style=\"color:black;background-color: yellow;\">Work in progress</p>\r\n  <p style=\"background-color: green;\">Currently only player goals and assists </p>\r\n  <p style=\"background-color: green;\">Select Type: Player </p>\r\n  <form id=\"leagueRecordsForm\">\r\n    <div>\r\n      <label for=\"type\">Type</label>\r\n      <select name=\"type\" id=\"type\">\r\n      <option value=\"team\">Team</option>\r\n      <option value=\"player\">Player</option>\r\n      </select>\r\n    </div>\r\n\r\n    <div>\r\n      <label for=\"mode\">Mode</label>\r\n      <select name=\"mode\" id=\"mode\">\r\n        <option value=\"all\">All</option>\r\n        <option value=\"season\">Season</option>\r\n        <option value=\"playoff\">Playoffs</option>\r\n      </select>\r\n    </div>\r\n\r\n    <div>\r\n      <label for=\"seasonNumber\">Season Number</label>\r\n      <select name=\"seasonNumberSelect\" id=\"seasonNumber\">\r\n        <option value=\"all\">All</option>\r\n        <option value=\"1\">1</option>\r\n        <option value=\"2\">2</option>\r\n        <option value=\"3\">3</option>\r\n        <option value=\"4\">4</option>\r\n        <option value=\"5\">5</option>\r\n      </select>\r\n    </div>\r\n\r\n    <div>\r\n      <label for=\"category\">Category</label>\r\n      <select name=\"categorySelect\" id=\"category\">\r\n        <option value=\"Goals\">G</option>\r\n        <option value=\"Assists\">A</option>\r\n      </select>\r\n    </div>\r\n\r\n    <div>\r\n      <label for=\"per\">Per</label>\r\n      <select name=\"per\" id=\"per\">\r\n        <option value=\"game\">Game</option>\r\n      </select>\r\n    </div>\r\n  </form>\r\n\r\n`;\r\n\r\nexport default function createRecordsForm() {\r\n  return modeSelectTemplate.content.cloneNode(true);\r\n}","import getTablesDiv from \"../../../tables/getTablesDiv.js\"\r\nimport clearTablesDiv from \"../../../tables/clearTablesDiv.js\"\r\nimport clearScoreboardDiv from \"../../../scoreboard/clearScoreboardDiv.js\";\r\nimport createRecordsLayout from \"./createRecordsLayout.js\";\r\n\r\nexport default function setRecordsPage() {\r\n  clearTablesDiv();\r\n  clearScoreboardDiv();\r\n  const tablesDiv = getTablesDiv();\r\n\r\n  // create records containing div\r\n  let recordsContainer = document.createElement(\"div\");\r\n  recordsContainer.classList =\r\n    \"recordsContainer w3-panel w3-round w3-card w3-blue\";\r\n\r\n  // fetch the records nav buttons and append to the records container div\r\n  const recordsNav = createRecordsLayout();\r\n  recordsContainer.append(recordsNav);\r\n\r\n  // append all the records and navbar to the webpage\r\n  tablesDiv.append(recordsContainer);\r\n}\r\n","import clearScoreboardDiv from \"../../../../scoreboard/clearScoreboardDiv.js\";\r\nimport filterGameResults from \"../../genericRecordFunctions/filterGameResults.js\";\r\nimport getTeamLogo from \"../../genericRecordFunctions/getTeamLogo.js\";\r\nimport createIndividualRecord from \"../../recordViews/createIndividualRecord.js\";\r\n\r\nexport default function teamGoalsScored(e) {\r\n  clearScoreboardDiv();\r\n  // get the previously displayed records in order to remove them when another record is requested from the user\r\n  const getSingleRecordContainers =\r\n    document.querySelectorAll(\".recordTitleDiv\");\r\n  // remove records and display user requested different records\r\n  getSingleRecordContainers.forEach((record) => {\r\n    record.remove();\r\n  });\r\n  const seasonMode = e.target.dataset.seasonmode;\r\n  const gameResults = filterGameResults(seasonMode);\r\n  let title;\r\n  switch (seasonMode) {\r\n    case \"Season\":\r\n      title = \"Most goals scored by a team in a season game\";\r\n      break;\r\n    case \"Playoff\":\r\n      title = \"Most goals scored by a team in a playoff game\";\r\n      break;\r\n    default:\r\n      title = \"Most goals scored in a game all time\";\r\n  }\r\n\r\n  const goalsContainingArr = [];\r\n  gameResults.forEach((game) => {\r\n    const gameID = +game.GameID;\r\n    const homeGoals = +game.TeamOneScore;\r\n    const awayGoals = +game.TeamTwoScore;\r\n    const thisGamesData = {};\r\n    thisGamesData.gameID = gameID;\r\n\r\n    if (homeGoals > awayGoals) {\r\n      thisGamesData.whichSide = \"TeamOneScore\";\r\n      thisGamesData.goals = homeGoals;\r\n      goalsContainingArr.push(thisGamesData);\r\n    } else if (homeGoals < awayGoals) {\r\n      thisGamesData.whichSide = \"TeamTwoScore\";\r\n      thisGamesData.goals = awayGoals;\r\n      goalsContainingArr.push(thisGamesData);\r\n    } else {\r\n      thisGamesData.whichSide = \"TeamOneScore\";\r\n      thisGamesData.goals = homeGoals;\r\n      goalsContainingArr.push(thisGamesData);\r\n    }\r\n  });\r\n\r\n  const getEachUniqueGoalCount = new Set();\r\n  goalsContainingArr.forEach((getGoals) => {\r\n    getEachUniqueGoalCount.add(getGoals.goals);\r\n  });\r\n  const sortEachUniqueGoalCount = [...getEachUniqueGoalCount].sort((a, b) => {\r\n    return b - a;\r\n  });\r\n\r\n  const getTopThreeGoalsGameID = goalsContainingArr.filter((game) => {\r\n    return game.goals >= sortEachUniqueGoalCount[2];\r\n  });\r\n\r\n  const getTopThreeGoalsScoredGameResults = [];\r\n  getTopThreeGoalsGameID.forEach((getGame) => {\r\n    gameResults.forEach((findGameID) => {\r\n      if (findGameID.GameID == getGame.gameID) {\r\n        getTopThreeGoalsScoredGameResults.push(findGameID);\r\n      }\r\n    });\r\n  });\r\n\r\n  const most = getTopThreeGoalsScoredGameResults.filter((game) => {\r\n    if (+game.TeamTwoScore == sortEachUniqueGoalCount[0]) return game;\r\n    if (+game.TeamOneScore == sortEachUniqueGoalCount[0]) return game;\r\n  });\r\n\r\n  const secondMost = getTopThreeGoalsScoredGameResults.filter((game) => {\r\n    if (+game.TeamTwoScore == sortEachUniqueGoalCount[1]) return game;\r\n    if (+game.TeamOneScore == sortEachUniqueGoalCount[1]) return game;\r\n  });\r\n\r\n  const thirdMost = getTopThreeGoalsScoredGameResults.filter((game) => {\r\n    if (+game.TeamTwoScore == sortEachUniqueGoalCount[2]) return game;\r\n    if (+game.TeamOneScore == sortEachUniqueGoalCount[2]) return game;\r\n  });\r\n\r\n  // top 3 highest goal output in sorted order!\r\n\r\n  const sortedResult = [...most, ...secondMost, ...thirdMost];\r\n\r\n  // begin to display the records\r\n\r\n  // grab the element to append each new record to\r\n  const allRecordsContainingDiv = document.querySelector(\".recordsContainer\");\r\n  // create sub containing div that will hold all the individual records encased under one title\r\n  const titleContainingDiv = document.createElement(\"div\");\r\n  titleContainingDiv.classList = \"recordTitleDiv w3-panel w3-round\";\r\n  titleContainingDiv.innerHTML = `<h1>${title}</h1>`;\r\n\r\n  // for each record set the layout with the correct data for each record\r\n  sortedResult.forEach((game) => {\r\n    // title is set above\r\n    let teamLogo;\r\n    let recordGoals;\r\n    let seasonNumber = game.SeasonNumber;\r\n    let homeTeam = +game.TeamOne;\r\n    let awayTeam = +game.TeamTwo;\r\n    let team;\r\n    let homeTeamGoals = +game.TeamOneScore;\r\n    let awayTeamGoals = +game.TeamTwoScore;\r\n    if (homeTeamGoals > awayTeamGoals) {\r\n      teamLogo = getTeamLogo(homeTeam, game.SeasonNumber);\r\n      recordGoals = homeTeamGoals;\r\n      team = +game.TeamOne;\r\n    } else {\r\n      teamLogo = getTeamLogo(awayTeam, game.SeasonNumber);\r\n      recordGoals = awayTeamGoals;\r\n      team = +game.TeamTwo;\r\n    }\r\n    const thisRecordData = createIndividualRecord(\r\n      teamLogo,\r\n      \"Goals\",\r\n      recordGoals,\r\n      seasonNumber,\r\n      team\r\n    );\r\n    titleContainingDiv.append(thisRecordData);\r\n    allRecordsContainingDiv.append(titleContainingDiv);\r\n  });\r\n}\r\n","import teamGoalsScored from \"./teamGoalsScored/teamGoalsScored.js\";\r\nimport setRecordsPage from \"../recordViews/setRecordsPage.js\";\r\nimport showSelectedRecords from \"../genericRecordFunctions/showSelectedRecords.js\";\r\n\r\nconst leagueTeamRecords = {\r\n  // set records page nav\r\n  setRecordsPageNav: setRecordsPage,\r\n  // teamGoalsScord.js\r\n  teamGoals: teamGoalsScored,\r\n  setListenersOnFormSelects: function(){\r\n    const getRecordsFormSelects = document.querySelectorAll('select')\r\n    getRecordsFormSelects.forEach(select => {\r\n        select.addEventListener('change', showSelectedRecords)\r\n    })\r\n  }\r\n};\r\n\r\nexport default leagueTeamRecords;\r\n","import { DEFENDING_CHAMPS } from \"../../constants/consts/vars\";\r\nimport setTeamLogoCss from \"./navbar/helpers/setTeamLogoCss\";\r\nimport eachTeamObjectMAP from \"../var_lib/maps/teams/eachTeamObjectMAP\";\r\nimport { HC_FONT, SEASON_WITH_TEAM_LOGOS_START } from \"../../constants/consts/vars\";\r\n\r\nexport default function setHeaderBanner(teamName, seasonNumber) {\r\n  const previousBannerIcon = document.getElementById(\"headerIcon\");\r\n  if(previousBannerIcon){\r\n    previousBannerIcon.remove()\r\n  }\r\n\r\n  // set banners background color to alpah black except for teams who's primary color is black\r\n  const getTeamsColor = eachTeamObjectMAP.get(teamName).MainColor\r\n  let teamsColor\r\n  if(getTeamsColor !== \"000000\"){\r\n    teamsColor = \"0,0,0,.6\"\r\n  } else {\r\n    teamsColor = \"255,255,255,.2\"\r\n  }\r\n  // note this is not the champions banner\r\n  let header = document.getElementById(\"headerTeamName\");\r\n  header.style.backgroundColor = `rgba(${teamsColor})`\r\n  const insertionDiv = document.createElement(\"div\");\r\n  insertionDiv.style.display = \"flex\";\r\n  insertionDiv.style.justifyContent = \"center\"\r\n  insertionDiv.style.alignItems = \"center\"\r\n  insertionDiv.id = \"headerIcon\"\r\n\r\n  const seasonNumberAsNumber = parseInt(seasonNumber)\r\n  // checks for seasons when teams did not have custom team logos and only css logos\r\n    if(seasonNumberAsNumber < SEASON_WITH_TEAM_LOGOS_START){\r\n      // get teams css logo\r\n      const teamsCssLogo = setTeamLogoCss(insertionDiv, seasonNumber, undefined, teamName);\r\n      const grabLogo = teamsCssLogo.firstElementChild.firstElementChild\r\n      grabLogo.style.height = \"6rem\";\r\n      grabLogo.style.width = \"6rem\";\r\n      insertionDiv.append(teamsCssLogo)\r\n      const cssLogoNode = teamsCssLogo.firstElementChild;\r\n      cssLogoNode.style.height = \"6rem\";\r\n      cssLogoNode.style.width = \"8rem\";\r\n      const cssLogoTextNode = cssLogoNode.firstElementChild.firstElementChild\r\n      cssLogoTextNode.style.fontSize = `clamp(${HC_FONT.setHeaderBanner})`;\r\n      header.prepend(insertionDiv)\r\n    } else {\r\n      // seasons where teams now have ai generated team logos\r\n      const seasonNumberFolderName = seasonNumberAsNumber>9 ? `S${seasonNumber}` : `S0${seasonNumber}`\r\n      const teamsLogoName = eachTeamObjectMAP.get(teamName)[`${seasonNumberFolderName}HomeFilePath`]\r\n      const teamLogo = `../../img/teamLogos/${seasonNumberFolderName}/${teamsLogoName}.png`\r\n\r\n      const imgElement = document.createElement('img')\r\n      imgElement.src = teamLogo\r\n      imgElement.alt = teamName\r\n      imgElement.style.height = \"9rem\"\r\n      imgElement.style.objectFit = \"contain\"\r\n      imgElement.style.display = \"block\"\r\n\r\n      insertionDiv.append(imgElement)\r\n      \r\n      // get teams css logo\r\n      header.prepend(insertionDiv)\r\n    }\r\n    // append the teams name below logo\r\n    const headerChildren = header.childNodes;\r\n    headerChildren[headerChildren.length-1].textContent = teamName;\r\n    // add champions name here to display trophy icon when champion team selected\r\n    let trophyDiv = document.getElementById(\"trophyDiv\");\r\n    if (teamName == DEFENDING_CHAMPS) {\r\n      const iElement = document.querySelector(\"i\")\r\n      if(!iElement){\r\n        const addIElement=  document.createElement(\"i\")\r\n        addIElement.classList.add(\"fa\", \"fa-trophy\", \"trophy\")\r\n        trophyDiv.append(addIElement)\r\n      } else {\r\n        iElement.classList.add(\"fa\", \"fa-trophy\", \"trophy\")\r\n      }\r\n    } else {\r\n      const isIElement = document.querySelector(\"i\")\r\n      if(isIElement){\r\n        isIElement.remove()\r\n      }\r\n    }\r\n}","import { GameResults, GamePlayerStats, TeamPlayers } from \"../../../constants/masterHaxData.js\";\r\nimport teamsMAP from \"../../var_lib/maps/teams/teamsMAP.js\";\r\nimport playersMAP from \"../../var_lib/maps/players/playersMAP.js\";\r\nimport teamsNumMAP from \"../../var_lib/maps/teams/teamsNumMAP.js\";\r\nimport eachTeamObjectMAP from \"../../var_lib/maps/teams/eachTeamObjectMAP.js\";\r\nimport clearScoreboardDiv from \"../../scoreboard/clearScoreboardDiv.js\";\r\nimport clearTablesDiv from \"../../tables/clearTablesDiv.js\";\r\nimport getScoreboardDiv from \"../../scoreboard/getScoreboardDiv.js\";\r\nimport getTablesDiv from \"../../tables/getTablesDiv.js\";\r\nimport getTeamsGameResults from \"../getTeamsGamesResults/getTeamsGamesResults.js\";\r\nimport setPlayersBoxscoreTable from \"./singleGameStatsComponents/setPlayersBoxscoreTable.js\"\r\nimport singleGameStatsHeader from \"./singleGameStatsComponents/singleGameStatsHeader.js\";\r\nimport SingleGameBoxscore from \"./singleGameStatsComponents/SingleGameBoxscore.js\";\r\n  export default function setGamesData(e) {\r\n    clearScoreboardDiv();\r\n    clearTablesDiv();\r\n    const scoreboardDiv = getScoreboardDiv();\r\n    const tablesDiv = getTablesDiv();\r\n    const gameNumber = e.target.dataset.gameId;\r\n    const teamName = e.target.dataset.teamName;\r\n    const gameType = e.target.dataset.gameType;\r\n    const thisSeasonNumber = GameResults.filter(\r\n      (item) => item.GameID == gameNumber\r\n    )[0].SeasonNumber;\r\n    const thisGamesResult = GameResults.filter((item) => item.GameID == gameNumber);\r\n    // begin home team\r\n    const thisGamesHomeTeam = teamsMAP.get(+thisGamesResult[0].TeamOne);\r\n    const thisGamesHomeTeamColor = `#${\r\n      eachTeamObjectMAP.get(thisGamesHomeTeam).MainColor\r\n    }`;\r\n    //***************************** */\r\n  \r\n    const thisGamesHomeTeamsPlayerRecords = TeamPlayers.filter(\r\n      (item) =>\r\n        item.SeasonNumber == thisSeasonNumber &&\r\n        item.TeamID == String(teamsNumMAP.get(thisGamesHomeTeam))\r\n    );\r\n    const thisGamesHomeTeamPlayerNames = [];\r\n    thisGamesHomeTeamsPlayerRecords.forEach((item) =>\r\n      thisGamesHomeTeamPlayerNames.push(playersMAP.get(+item.PlayerID))\r\n    );\r\n  \r\n    //**************************************** */\r\n    const thisGamesHomeTeamScore = thisGamesResult[0].TeamOneScore;\r\n    const thisGamesHomeTeamPossession = thisGamesResult[0].TeamOnePossession;\r\n    const thisGamesHomeTeamShotsOnGoal = thisGamesResult[0].TeamOneShotsOnGoal;\r\n    const thisGamesHomeTeamPasses = thisGamesResult[0].TeamOnePasses;\r\n    const thisGamesHomeTeamKicks = thisGamesResult[0].TeamOneKicks;\r\n    // end home team\r\n    // begin away team\r\n    const thisGamesAwayTeam = teamsMAP.get(+thisGamesResult[0].TeamTwo);\r\n    const thisGamesAwayTeamColor = `#${\r\n      eachTeamObjectMAP.get(thisGamesAwayTeam).MainColor\r\n    }`;\r\n    //***************************** */\r\n    const thisGamesAwayTeamsPlayerRecords = TeamPlayers.filter(\r\n      (item) =>\r\n        item.SeasonNumber == thisSeasonNumber &&\r\n        item.TeamID == String(teamsNumMAP.get(thisGamesAwayTeam))\r\n    );\r\n    const thisGamesAwayTeamPlayerNames = [];\r\n    thisGamesAwayTeamsPlayerRecords.forEach((item) =>\r\n      thisGamesAwayTeamPlayerNames.push(playersMAP.get(+item.PlayerID))\r\n    );\r\n    //***************************************** */\r\n    const thisGamesAwayTeamScore = thisGamesResult[0].TeamTwoScore;\r\n    const thisGamesAwayTeamPossession = thisGamesResult[0].TeamTwoPossession;\r\n    const thisGamesAwayTeamShotsOnGoal = thisGamesResult[0].TeamTwoShotsOnGoal;\r\n    const thisGamesAwayTeamPasses = thisGamesResult[0].TeamTwoPasses;\r\n    const thisGamesAwayTeamKicks = thisGamesResult[0].TeamTwoKicks;\r\n    // end away team\r\n    const thisGamesHomeTeamStats = [\r\n      thisGamesHomeTeam,\r\n      thisGamesHomeTeamScore,\r\n      thisGamesHomeTeamPossession,\r\n      thisGamesHomeTeamShotsOnGoal,\r\n      thisGamesHomeTeamPasses,\r\n      thisGamesHomeTeamKicks,\r\n    ];\r\n    const thisGamesAwayTeamStats = [\r\n      thisGamesAwayTeam,\r\n      thisGamesAwayTeamScore,\r\n      thisGamesAwayTeamPossession,\r\n      thisGamesAwayTeamShotsOnGoal,\r\n      thisGamesAwayTeamPasses,\r\n      thisGamesAwayTeamKicks,\r\n    ];\r\n    // boxscore div container\r\n    const singleGameStatsHeaderArguments = {\r\n      teamName, thisSeasonNumber, gameType, thisGamesHomeTeam, thisGamesAwayTeam\r\n    }\r\n    // // this is the header containing back button and team css logos\r\n    tablesDiv.append(singleGameStatsHeader(singleGameStatsHeaderArguments))\r\n    // end team logos\r\n  \r\n    // this section is the green team boxscore stats\r\n    // create arguments object\r\n    const singleScoreBoxscoreArguments = {\r\n      thisGamesHomeTeamColor,\r\n      thisGamesAwayTeamColor,\r\n      thisGamesHomeTeamStats,\r\n      thisGamesAwayTeamStats\r\n    }\r\n    scoreboardDiv.append(SingleGameBoxscore(singleScoreBoxscoreArguments))\r\n\r\n    // listener for the back button back to teams layout Page\r\n    document\r\n      .getElementById(\"gamesBoxscoreBackButton\")\r\n      .addEventListener(\"click\", getTeamsGameResults);\r\n    // end back button\r\n\r\n    // begin player stats data\r\n    const thisGamesPlayerStats = GamePlayerStats.filter(\r\n      (item) => item.GameID == gameNumber\r\n    );\r\n    const thisGamesPlayerStatMAPS = [];\r\n    for (let i = 0; i < thisGamesPlayerStats.length; i++) {\r\n      thisGamesPlayerStatMAPS.push(\r\n        new Map(Object.entries(thisGamesPlayerStats[i]))\r\n      );\r\n      thisGamesPlayerStatMAPS[i].set(\r\n        \"Points\",\r\n        +thisGamesPlayerStatMAPS[i].get(\"Goals\") +\r\n          +thisGamesPlayerStatMAPS[i].get(\"Assists\")\r\n      );\r\n      // check for zero / zero\r\n      if(thisGamesPlayerStatMAPS[i].get(\"Goals\") && thisGamesPlayerStatMAPS[i].get(\"ShotsOnGoal\") != 0){\r\n        thisGamesPlayerStatMAPS[i].set(\r\n          \"Shooting%\",\r\n          Math.round(\r\n            (\r\n              +thisGamesPlayerStatMAPS[i].get(\"Goals\") /\r\n              +thisGamesPlayerStatMAPS[i].get(\"ShotsOnGoal\")\r\n            )*100\r\n          )+ \"%\"\r\n        ) \r\n      } else {\r\n        thisGamesPlayerStatMAPS[i].set(\r\n          \"Shooting%\",\r\n          \"0%\"\r\n        )\r\n      }\r\n    }\r\n    // players boxscore stats begin here\r\n    const setPlayersBoxscoreTableArguments = {\r\n      thisGamesPlayerStatMAPS,\r\n      thisGamesHomeTeamPlayerNames,\r\n      thisGamesHomeTeamColor,\r\n      thisGamesAwayTeamColor\r\n    }\r\n    setPlayersBoxscoreTable(null, setPlayersBoxscoreTableArguments);\r\n    // end players game stats table\r\n\r\n    // scroll to top of boxscore page from when clicking on gameStats further down the list\r\n    setTimeout(() => {\r\n      tablesDiv.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"start\"\r\n      })\r\n    }, 50)\r\n  }\r\n  \r\n  //end data containers","function SingleGameBoxscore({\r\n    thisGamesHomeTeamColor,\r\n    thisGamesAwayTeamColor,\r\n    thisGamesHomeTeamStats,\r\n    thisGamesAwayTeamStats\r\n}){\r\n    const gameCategories = [\r\n        \"Team\",\r\n        \"Score\",\r\n        \"Possession\",\r\n        \"SOG\",\r\n        \"Passes\",\r\n        \"Kicks\",\r\n      ];\r\n\r\n      // create container to hold boxscore stats\r\n      const fragment = document.createDocumentFragment()\r\n\r\n    for (let i = 0; i < gameCategories.length; i++) {\r\n        const boxscoreRowContainerElem = document.createElement('div');\r\n        boxscoreRowContainerElem.classList.add(\"boxscoreContainer\", \"w3-center\")\r\n\r\n        // create first column of three\r\n        const boxscoreHomeCell = document.createElement('div');\r\n        boxscoreHomeCell.classList.add(\"boxscoreHomeStats\")\r\n      // set first rows home teams cell to teams main color\r\n      boxscoreHomeCell.textContent = thisGamesHomeTeamStats[i];\r\n\r\n      // create the 2nd column of stat categories\r\n      const seperatorDiv = document.createElement('div');\r\n      seperatorDiv.classList.add(\"boxscoreSeperator\")\r\n      seperatorDiv.textContent = gameCategories[i];\r\n\r\n      const boxscoreAwayCell = document.createElement('div');\r\n      boxscoreAwayCell.classList.add(\"boxscoreAwayStats\")\r\n      boxscoreAwayCell.textContent = thisGamesAwayTeamStats[i]\r\n\r\n      // add teams background color to name field of team only\r\n      if (i == 0) {\r\n        boxscoreHomeCell.style.backgroundColor = `${thisGamesHomeTeamColor}`\r\n        boxscoreAwayCell.style.backgroundColor = `${thisGamesAwayTeamColor}`\r\n      } \r\n\r\n      boxscoreRowContainerElem.append(boxscoreHomeCell)\r\n      boxscoreRowContainerElem.append(seperatorDiv)\r\n      boxscoreRowContainerElem.append(boxscoreAwayCell)\r\n      fragment.append(boxscoreRowContainerElem);\r\n    }\r\n\r\n    //create some space between players table\r\n    const breakDiv = document.createElement(\"br\")\r\n    fragment.append(breakDiv)\r\n    fragment.append(breakDiv)\r\n\r\n    // create div for players stat for this game\r\n    const playersDiv = document.createElement('div')\r\n    playersDiv.id = \"boxscorePlayerStats\";\r\n\r\n    fragment.append(playersDiv)\r\n\r\n    return fragment\r\n}\r\n\r\nexport default SingleGameBoxscore;","import playersMAP from \"../../../../var_lib/maps/players/playersMAP\";\r\n\r\nfunction boxscorePlayersTableDataElements(thisGamesPlayerStatMAPS, tableHeaders, thisGamesHomeTeamPlayerNames, thisGamesHomeTeamColor, thisGamesAwayTeamColor, sortBy){\r\n    const fragment = document.createDocumentFragment()\r\n    const fieldsLength = tableHeaders.length;\r\n    // this runs for each player in the game\r\n    thisGamesPlayerStatMAPS.forEach((item) => {\r\n        const playersRowOfData = document.createElement('tr');\r\n\r\n    // loop only over the fields defined by tableHeaders var passed in\r\n        for(let i = 0; i < fieldsLength; i++){\r\n            const td = document.createElement('td');\r\n            td.setAttribute(\"data-field-name\", tableHeaders[i]);\r\n\r\n            // add yellow background to cells that fall under the current field that is sorted\r\n            if(tableHeaders[i] == sortBy){\r\n                td.classList.add(\"w3-yellow\");\r\n                td.textContent = item.get(tableHeaders[i])\r\n                // for dealing with the players name within the table\r\n            } else if(tableHeaders[i] == \"Name\"){\r\n                const playerName = playersMAP.get(+item.get(\"PlayerID\"));\r\n                const isHomeTeamPlayer = thisGamesHomeTeamPlayerNames.includes(playerName);\r\n                td.style.backgroundColor = isHomeTeamPlayer ? `${thisGamesHomeTeamColor}` : `${thisGamesAwayTeamColor}`;\r\n                td.style.color = \"#fff\";\r\n                td.textContent = playerName;\r\n            } else {\r\n                td.textContent = item.get(tableHeaders[i])\r\n            }\r\n            // add the single cell of data for the current field which is tableHeaders[i]\r\n            playersRowOfData.append(td)\r\n        }\r\n        // add the single cell to the players row in the html table then loop again over the next players stat\r\n        fragment.append(playersRowOfData)\r\n    })\r\n    return fragment;\r\n}\r\n\r\nexport default boxscorePlayersTableDataElements;","function boxscorePlayersTableHeadersElements(tableHeaders, sortBy){\r\n    const thead = document.createElement('thead')\r\n    const tr = document.createElement('tr')\r\n\r\n    for(let i = 0; i < tableHeaders.length; i++){\r\n        const th = document.createElement('th');\r\n        th.setAttribute('data-field-name', tableHeaders[i]);\r\n        \r\n        if(tableHeaders[i] == sortBy){\r\n            th.classList.add(\"w3-orange\")\r\n        }\r\n        \r\n        th.textContent = tableHeaders[i]\r\n        tr.append(th)\r\n    }\r\n    \r\n    thead.append(tr)\r\n    return thead\r\n}\r\n\r\nexport default boxscorePlayersTableHeadersElements;","import sortGroupedStats from \"../../../misc/sorting/sort\";\r\nimport playerBoxscoreTableListeners from \"../../../listeners/pageListeners/boxscorePage/boxscorePlayerTables/playerBoxscoreTableListeners\"\r\nimport updatePlayersBoxscoreTableResizeListener from \"../../../listeners/pageListeners/boxscorePage/boxscorePlayerTables/updatePlayersBoxscoreTableResizeListener\";\r\nimport { SINGLE_GAME_PLAYERS_TABLE } from \"../../../../constants/consts/supportVars\"\r\nimport boxscorePlayersTableHeadersElements from \"./helpers/boxscorePlayersTableHeadersElements\";\r\nimport boxscorePlayersTableDataElements from \"./helpers/boxscorePlayersTableDataElements\";\r\n\r\nfunction setPlayersBoxscoreTable(e, {thisGamesPlayerStatMAPS, thisGamesHomeTeamPlayerNames, thisGamesHomeTeamColor, thisGamesAwayTeamColor}) {\r\n  let sortBy;\r\n  if (e) {\r\n    sortBy = e.target.dataset.fieldName;\r\n  } else {\r\n    sortBy = \"Points\";\r\n  }\r\n\r\n    sortGroupedStats(thisGamesPlayerStatMAPS, sortBy);\r\n    const playerStatsContainer = document.querySelector(\"#boxscorePlayerStats\");\r\n    playerStatsContainer.innerHTML = \"\";\r\n\r\n    const table = document.createElement('table');\r\n    const caption = document.createElement('caption');\r\n    caption.style.marginBottom = \"1.5rem\";\r\n    caption.style.fontWeight = \"bold\";\r\n    caption.textContent = \"Player stats\"\r\n    table.append(caption)\r\n    const thead = boxscorePlayersTableHeadersElements(SINGLE_GAME_PLAYERS_TABLE, sortBy)\r\n    table.append(thead)\r\n    const tableBody = document.createElement('tbody');\r\n    const td = boxscorePlayersTableDataElements(thisGamesPlayerStatMAPS, SINGLE_GAME_PLAYERS_TABLE, thisGamesHomeTeamPlayerNames, thisGamesHomeTeamColor, thisGamesAwayTeamColor, sortBy)\r\n    tableBody.append(td)\r\n    table.append(tableBody)\r\n    playerStatsContainer.append(table)\r\n\r\n// add listeners to the table headers\r\nplayerBoxscoreTableListeners({ thisGamesPlayerStatMAPS, thisGamesHomeTeamPlayerNames, thisGamesHomeTeamColor, thisGamesAwayTeamColor });\r\n\r\n// update listeners on resize event. this is debounced\r\nupdatePlayersBoxscoreTableResizeListener({thisGamesPlayerStatMAPS, thisGamesHomeTeamPlayerNames, thisGamesHomeTeamColor, thisGamesAwayTeamColor});\r\n}\r\n\r\nexport default setPlayersBoxscoreTable;","import backButton from \"../../../misc/backButton\";\r\nimport createTeamCssLogo from \"../../../misc/createTeamCssLogo\";\r\nimport { SEASON_WITH_TEAM_LOGOS_START } from \"../../../../constants/consts/vars\";\r\nimport eachTeamObjectMAP from \"../../../var_lib/maps/teams/eachTeamObjectMAP\";\r\n\r\nfunction singleGameStatsHeader({teamName, thisSeasonNumber, gameType, thisGamesHomeTeam, thisGamesAwayTeam}){\r\n    const containerElem = document.createElement('div')\r\n    containerElem.classList.add(\"w3-section\", \"boxscoreTeamLogosContainer\");\r\n\r\n    // for parsing the button and css logos\r\n    const parser = new DOMParser()\r\n    // create the back button\r\n    const backButtonHTML = backButton(\"gamesBoxscoreBackButton\", teamName, thisSeasonNumber, gameType, \"boxscoreBackButton\").outerHTML;\r\n    const button = parser.parseFromString(backButtonHTML, 'text/html');\r\n    const backButtonElem = button.body.firstChild\r\n    // append the back button\r\n    containerElem.append(backButtonElem)\r\n\r\n    // get teams logos depending on season number and if team logos existed or are css generated\r\n    let homeTeamLogo\r\n    let awayTeamLogo\r\n    if(thisSeasonNumber < SEASON_WITH_TEAM_LOGOS_START){\r\n        // create the css logos for earlier seasons when there were no logos created\r\n        const homeLogoHTML = createTeamCssLogo.singleGameStats(thisGamesHomeTeam, thisSeasonNumber, \"Home\") \r\n        const awayLogoHTML = createTeamCssLogo.singleGameStats(thisGamesAwayTeam, thisSeasonNumber, \"Away\")\r\n    \r\n        homeTeamLogo = parser.parseFromString(homeLogoHTML, 'text/html').body.firstChild;\r\n        awayTeamLogo = parser.parseFromString(awayLogoHTML, 'text/html').body.firstChild;\r\n    } else {\r\n        // later seasons when team logos have been created\r\n        // get home teams logo\r\n        const seasonNumberAsNumber = parseInt(thisSeasonNumber)\r\n        const seasonNumberFolderName = seasonNumberAsNumber>9 ? `S${thisSeasonNumber}` : `S0${thisSeasonNumber}`\r\n        homeTeamLogo = document.createElement('img')\r\n        homeTeamLogo.alt = 'img'\r\n        homeTeamLogo.style.height = '6.25rem'\r\n        homeTeamLogo.style.width = '8.25rem'\r\n        const thisGamesHomeTeamLogo = eachTeamObjectMAP.get(thisGamesHomeTeam)[`${seasonNumberFolderName}HomeFilePath`]\r\n        homeTeamLogo.src = `../../../img/teamLogos/${seasonNumberFolderName}/${thisGamesHomeTeamLogo}.png`\r\n        \r\n        // get away teams logo\r\n        awayTeamLogo = document.createElement('img')\r\n        awayTeamLogo.alt = 'img'\r\n        awayTeamLogo.style.height = '6.25rem'\r\n        awayTeamLogo.style.width = '8.25rem'\r\n        const thisGamesAwayTeamLogo = eachTeamObjectMAP.get(thisGamesAwayTeam)[`${seasonNumberFolderName}HomeFilePath`]\r\n        awayTeamLogo.src = `../../../img/teamLogos/${seasonNumberFolderName}/${thisGamesAwayTeamLogo}.png`\r\n    }\r\n\r\n    // create div to hold both logos\r\n    // home team\r\n    const homeLogoContainerElem = document.createElement('div');\r\n    homeLogoContainerElem.classList.add(\"w3-blue\", \"w3-round-large\", \"w3-card-4\", \"w3-padding-small\", \"boxscoreHomeTeamLogo\")\r\n    homeLogoContainerElem.append(homeTeamLogo)\r\n    // away team\r\n    const awayLogoContainerElem = document.createElement('div');\r\n    awayLogoContainerElem.classList.add(\"w3-blue\", \"w3-round-large\", \"w3-card-4\", \"w3-padding-small\", \"boxscoreAwayTeamLogo\")\r\n    awayLogoContainerElem.append(awayTeamLogo)\r\n    // append the home logo\r\n    containerElem.append(homeLogoContainerElem)\r\n    // append the away logo\r\n    containerElem.append(awayLogoContainerElem)\r\n\r\n    return containerElem;\r\n}\r\n\r\nexport default singleGameStatsHeader;","    function createPlayerStatsTable(tableId, tableHeading, tableMode = 'season', {PLAYERS_TABLE, seasonSelectedField, playerSeasonObjects, playerPlayoffObjects, playerCombinedObjects, fieldsLength, playoffSelectedField, combinedSelectedField}){\r\n        let seasonModeField;\r\n        let playerModeObjects;\r\n        if(tableMode == 'season'){\r\n            seasonModeField = seasonSelectedField;\r\n            playerModeObjects = playerSeasonObjects;\r\n        } else if(tableMode == 'playoffs'){\r\n            seasonModeField = playoffSelectedField;\r\n            playerModeObjects = playerPlayoffObjects\r\n        } else if(tableMode == 'combined'){\r\n            seasonModeField = combinedSelectedField;\r\n            playerModeObjects = playerCombinedObjects;\r\n        } else {\r\n            seasonModeField = seasonSelectedField\r\n        }\r\n        const tableFrag = document.createDocumentFragment();\r\n        const tableContainer = document.createElement('table')\r\n        tableContainer.id = tableId;\r\n        const tableCaption = document.createElement('caption');\r\n        const tableHeader = document.createElement('h3');\r\n        tableHeader.textContent = tableHeading;\r\n\r\n        tableCaption.append(tableHeader)\r\n        tableContainer.append(tableCaption)\r\n\r\n        const thead = document.createElement('thead')\r\n        const tr = document.createElement('tr')\r\n\r\n        for (let i = 0; i < fieldsLength; i++) {\r\n            const th = document.createElement('th');\r\n            th.setAttribute('data-field-name', PLAYERS_TABLE[i]);\r\n            if (PLAYERS_TABLE[i] == seasonModeField) {\r\n                th.classList.add('w3-orange')\r\n            }\r\n            th.textContent = PLAYERS_TABLE[i]\r\n            tr.append(th)\r\n        }\r\n        thead.append(tr)\r\n        tableContainer.append(thead)\r\n\r\n        const tbody = document.createElement('tbody')\r\n        playerModeObjects.forEach((item) => {\r\n        const tr = document.createElement('tr')\r\n        \r\n        for (let i = 0; i < fieldsLength; i++) {\r\n            const td = document.createElement('td')\r\n            td.setAttribute('data-field-name', PLAYERS_TABLE[i])\r\n            td.textContent = item.get(PLAYERS_TABLE[i])\r\n            if (PLAYERS_TABLE[i] == seasonModeField) {\r\n              td.classList.add('w3-yellow')\r\n          }\r\n          tr.append(td)\r\n        }\r\n        tbody.append(tr)\r\n        tableContainer.append(tbody)\r\n        });\r\n        tableFrag.append(tableContainer)\r\n        return tableFrag\r\n    }\r\n    export default createPlayerStatsTable;","function playersList(playersArray, teamColor){\r\n    const playersListContainer = document.createElement('div');\r\n    // the following div ID \"teamPlayerList\" is used for where to position the regular season players table after a sort function\r\n    playersListContainer.id = \"teamPlayerList\";\r\n    playersListContainer.classList.add(\"w3-padding\", \"w3-padding\", \"w3-card\", \"w3-round-large\")\r\n    playersListContainer.style.color = \"#fff\";\r\n    playersListContainer.style.backgroundColor = teamColor;\r\n    playersArray.forEach(item => {\r\n    const div = document.createElement('div');\r\n    div.style.fontSize = \"1.2rem\";\r\n    div.textContent = item;\r\n    playersListContainer.append(div)\r\n    })\r\n    return playersListContainer\r\n}\r\n\r\nexport default playersList;","function playersListHeader(seasonNum){\r\n    const h1 = document.createElement('h1');\r\n    h1.textContent = `Season ${seasonNum}`\r\n    return h1;\r\n}\r\n\r\nexport default playersListHeader","import { TABLE_BREAK_POINT } from \"../../../../constants/consts/vars\"\r\n\r\nfunction setTeamPlayerTableListeners(tableId, tableToSort){\r\n    let browserWidth = window.innerWidth;\r\n    let getTable = document.querySelectorAll(`#${tableId}`);\r\n    // test if team made playoffs\r\n    if (getTable.length > 0) {\r\n      // for mobile screens\r\n      if (browserWidth < TABLE_BREAK_POINT) {\r\n        getTable[0].onclick = function (e) {\r\n          let td = e.target.closest(\"td\");\r\n          if (!td) return;\r\n          tableToSort(e);\r\n        };\r\n      }\r\n      // for larger screens\r\n      else {\r\n        getTable[0].onclick = function (e) {\r\n          let th = e.target.closest(\"th\");\r\n          if (!th) return;\r\n          tableToSort(e);\r\n        };\r\n      }\r\n    } else {\r\n      return;\r\n    }\r\n}\r\n\r\nexport default setTeamPlayerTableListeners","import sortGroupedStats from \"../../../misc/sorting/sort\";\r\n\r\nfunction sortTeamPlayersTables(e, tableId, tableHeader, playersTableMode, {PLAYERS_TABLE, fieldsLength, teamColor}){\r\n    const playersTableFragment = document.createDocumentFragment();\r\n\r\n    const sortBy = e.target.dataset.fieldName;\r\n    sortGroupedStats(playersTableMode, sortBy);\r\n\r\n    const tableContainer = document.createElement('table');\r\n    tableContainer.id = tableId;\r\n\r\n    const caption = document.createElement('caption');\r\n    const h3 = document.createElement('h3');\r\n    h3.textContent = tableHeader;\r\n\r\n    caption.append(h3);\r\n    tableContainer.append(caption)\r\n\r\n    const thead = document.createElement('thead');\r\n    const tr = document.createElement('tr');\r\n\r\n    for (let i = 0; i < fieldsLength; i++) {\r\n        const th = document.createElement('th');\r\n        th.setAttribute('data-field-name', PLAYERS_TABLE[i])\r\n      if (PLAYERS_TABLE[i] == sortBy) {\r\n        th.classList.add('w3-orange')\r\n    }\r\n    th.textContent = PLAYERS_TABLE[i]\r\n    tr.append(th)\r\n    }\r\n\r\n    thead.append(tr)\r\n\r\n    tableContainer.append(thead)\r\n\r\n    const tbody = document.createElement('tbody');\r\n\r\n    playersTableMode.forEach(item => {\r\n        const tr = document.createElement('tr');\r\n        for (let i = 0; i < fieldsLength; i++) {\r\n            const td = document.createElement('td');\r\n            td.setAttribute('data-field-name', PLAYERS_TABLE[i])\r\n          if (PLAYERS_TABLE[i] == sortBy) {\r\n            td.classList.add('w3-yellow')\r\n          }\r\n          if (PLAYERS_TABLE[i] == \"Name\") {\r\n            td.style.color = \"#fff\";\r\n            td.style.backgroundColor = teamColor;\r\n          }\r\n          td.textContent = item.get(PLAYERS_TABLE[i])\r\n          tr.append(td)\r\n        }\r\n        tbody.append(tr)\r\n    })\r\n    tableContainer.append(tbody)\r\n    playersTableFragment.append(tableContainer);\r\n    return playersTableFragment;\r\n}\r\n\r\nexport default sortTeamPlayersTables;","import { TeamPlayers } from \"../../../constants/masterHaxData.js\";\r\nimport playersMAP from \"../../var_lib/maps/players/playersMAP.js\";\r\nimport teamsMAP from \"../../var_lib/maps/teams/teamsMAP.js\";\r\nimport teamsNumMAP from \"../../var_lib/maps/teams/teamsNumMAP.js\";\r\nimport eachTeamObjectMAP from \"../../var_lib/maps/teams/eachTeamObjectMAP.js\";\r\nimport IndividualPlayerStats from \"../../classFiles/players/individualPlayerStats.js\";\r\nimport clearScoreboardDiv from \"../../scoreboard/clearScoreboardDiv.js\";\r\nimport clearTablesDiv from \"../../tables/clearTablesDiv.js\";\r\nimport sortGroupedStats from \"../../misc/sorting/sort.js\";\r\nimport setTeamsPageLayout from \"../teamsPageLayout/setTeamsPageLayout.js\";\r\nimport backButton from \"../../misc/backButton.js\";\r\nimport createPlayerStatsTable from \"./components/createPlayerStatsTable.js\"\r\nimport { PLAYERS_TABLE } from \"../../../constants/consts/supportVars.js\";\r\nimport sortTeamPlayersTables from \"./helpers/sortTeamPlayersTables.js\";\r\nimport setTeamPlayerTableListeners from \"./helpers/setTeamPlayerTableListeners.js\";\r\nimport playersList from \"./components/playersList.js\";\r\nimport playersListHeader from \"./components/playersListHeader.js\";\r\n  \r\n  const fieldsLength = PLAYERS_TABLE.length;\r\n\r\n  export default function getTeamsPlayersPerSeason(\r\n    e,\r\n    thisTeam,\r\n    thisSeasonNumber,\r\n    seasonSelectedField = \"Points\",\r\n    playoffSelectedField = \"Points\",\r\n    combinedSelectedField = \"Points\"\r\n  ) {\r\n    clearTablesDiv();\r\n    clearScoreboardDiv();\r\n    let team, teamName, teamColor, seasonNum;\r\n    if (e !== false) {\r\n      team = teamsNumMAP.get(e.target.dataset.teamName);\r\n      teamName = teamsMAP.get(+team);\r\n      teamColor = `#${eachTeamObjectMAP.get(teamsMAP.get(team)).MainColor}`;\r\n      seasonNum = e.target.dataset.seasonNum;\r\n    } else {\r\n      team = teamsNumMAP.get(thisTeam);\r\n      teamName = teamsMAP.get(+team);\r\n      teamColor = `#${eachTeamObjectMAP.get(teamsMAP.get(team)).MainColor}`;\r\n      seasonNum = thisSeasonNumber;\r\n    }\r\n    // grab players who played on this team\r\n    const playersFiltered = TeamPlayers.filter(\r\n      (item) => item.TeamID == team && item.SeasonNumber == seasonNum\r\n    );\r\n    // enter players on this team into an array\r\n    const playersArray = [];\r\n    playersFiltered.forEach((item) =>\r\n      playersArray.push(playersMAP.get(+item.PlayerID))\r\n    );\r\n\r\n    const playerSeasonObjects = [];\r\n    const playerPlayoffObjects = [];\r\n    const playerCombinedObjects = [];\r\n\r\n    const mapsArray = [\"SeasonStatsMAP\", \"PlayoffStatsMAP\", \"CombinedStatsMAP\"]\r\n    const playerObjectsArray = [playerSeasonObjects, playerPlayoffObjects, playerCombinedObjects]\r\n\r\n    for(let i=0; i<mapsArray.length; i++){\r\n      playersArray.forEach((item) =>\r\n        playerObjectsArray[i].push(\r\n          IndividualPlayerStats.allPlayersStats[item][\r\n            `playersSeason${seasonNum}${mapsArray[i]}`\r\n          ]\r\n        )\r\n      );\r\n    }\r\n    sortGroupedStats(playerSeasonObjects, seasonSelectedField);\r\n    sortGroupedStats(playerPlayoffObjects, playoffSelectedField);\r\n    sortGroupedStats(playerCombinedObjects, combinedSelectedField);\r\n  \r\n    // element that will contain the player tables\r\n    const playerStatsTable = document.getElementById(\"scoreboardDiv\");\r\n    playerStatsTable.style.display = \"flex\";\r\n    playerStatsTable.style.flexDirection = \"column\";\r\n    playerStatsTable.style.alignItems = \"center\";\r\n\r\n    // add the back button\r\n    const backButtonElement = backButton(\"playerStatsBackButton\", teamName, seasonNum, \"Season\")\r\n    playerStatsTable.append(backButtonElement)\r\n    // add season header\r\n    const h1 = playersListHeader(seasonNum)\r\n    playerStatsTable.append(h1);\r\n    // add list of teams players\r\n    const playersListContainer = playersList(playersArray, teamColor)\r\n    playerStatsTable.append(playersListContainer)\r\n    // begin adding player tables\r\n    // tables arguments object\r\n    const createPlayerStatsTableArgs = {\r\n      PLAYERS_TABLE, \r\n      seasonSelectedField, \r\n      playerSeasonObjects, \r\n      playerPlayoffObjects,\r\n      playerCombinedObjects,\r\n      fieldsLength,\r\n      playoffSelectedField,\r\n      combinedSelectedField\r\n    }\r\n    const playersSeasonTable = createPlayerStatsTable('teamPlayerSeasonTable', 'Regular Season', 'season',createPlayerStatsTableArgs)\r\n    playerStatsTable.append(playersSeasonTable)\r\n    // if playoffs have occured add both playoffs and combined tables\r\n    if (playerPlayoffObjects[0].get(\"GP\") > 0) {\r\n      const playersPlayoffTable = createPlayerStatsTable('teamPlayerPlayoffTable', 'Playoffs', 'playoffs',createPlayerStatsTableArgs)\r\n      playerStatsTable.append(playersPlayoffTable)\r\n      const playersCombinedTable = createPlayerStatsTable('teamPlayerCombinedTable', 'Combined Stats', 'combined',createPlayerStatsTableArgs)\r\n      playerStatsTable.append(playersCombinedTable)\r\n    } else {\r\n      // else if season is still on going within the current season\r\n      const h3 = document.createElement('h3');\r\n      h3.textContent = 'No playoff games played'\r\n      playerStatsTable.append(h3)\r\n    }\r\n  \r\n    let playerNameCells = document.querySelectorAll(\"td[data-field-name='Name']\");\r\n    playerNameCells.forEach((item) => {\r\n      item.style.color = \"#fff\";\r\n      item.style.backgroundColor = teamColor;\r\n    });\r\n  \r\n    // listener for the back button back to teams layout Page\r\n    document\r\n      .getElementById(\"playerStatsBackButton\")\r\n      .addEventListener(\"click\", () => {setTeamsPageLayout(document.getElementById('playerStatsBackButton'))});\r\n    // end back button\r\n  \r\n////////////////////BEGIN OF SORTINGFUNCTIONS FOR THE ABOVE 3 TABLES//////////////////////////////\r\n\r\nconst sortTeamPlayerTableArgs = {\r\n  PLAYERS_TABLE,\r\n  fieldsLength,\r\n  teamColor\r\n};\r\n\r\n// Configuration array for each table (Season, Playoff, Combined)\r\nconst tableConfigs = [\r\n  {\r\n    id: \"teamPlayerSeasonTable\",\r\n    label: \"Regular Season\",\r\n    data: playerSeasonObjects,\r\n    afterElement: \"#teamPlayerList\",\r\n    insertMethod: 'after',\r\n  },\r\n  {\r\n    id: \"teamPlayerPlayoffTable\",\r\n    label: \"Playoffs\",\r\n    data: playerPlayoffObjects,\r\n    afterElement: \"#teamPlayerCombinedTable\",\r\n    insertMethod: 'before',\r\n  },\r\n  {\r\n    id: \"teamPlayerCombinedTable\",\r\n    label: \"Combined Stats\",\r\n    data: playerCombinedObjects,\r\n    afterElement: \"#teamPlayerPlayoffTable\",\r\n    insertMethod: 'after',\r\n  }\r\n];\r\n\r\n// Helper function to handle sorting and listeners setup\r\nfunction sortTeamPlayersTable(e, config) {\r\n  const { id, label, data, afterElement, insertMethod } = config;\r\n  const teamPlayerTable = sortTeamPlayersTables(e, id, label, data, sortTeamPlayerTableArgs);\r\n  const oldTable = document.getElementById(id);\r\n  const position = document.querySelector(afterElement);\r\n  oldTable.remove();\r\n  position[insertMethod](teamPlayerTable);\r\n  \r\n  // Resets the listeners on the table after being redisplayed\r\n  setTeamPlayerTableListeners(id, (event) => sortTeamPlayersTable(event, config));\r\n}\r\n\r\n// Setup sorting and listeners for all tables\r\ntableConfigs.forEach((config) => {\r\n  setTeamPlayerTableListeners(config.id, (e) => {\r\n    sortTeamPlayersTable(e, config);\r\n  });\r\n});\r\n}","import backButton from \"../../misc/backButton\";\r\nimport colorPageHeader from \"./colorPageHeader/colorPageHeader\";\r\nimport TeamsLogoElement from \"./TeamsLogoElement/TeamsLogoElement\";\r\n\r\nfunction ColorsPageLayout(teamName, seasonNumber, homeColorScheme, awayColorScheme){\r\n    const containerElem = document.createElement(\"div\");\r\n    containerElem.classList.add(\"w3-container\", \"w3-margin\", \"teamColorsLayout\")\r\n\r\n    containerElem.append(backButton('teamColorsBackButton', teamName, seasonNumber, \"Season\", \"colorsBackButton\"))\r\n    containerElem.append(colorPageHeader())\r\n    containerElem.append(TeamsLogoElement(teamName, seasonNumber, \"Home\", \"Home\", homeColorScheme))\r\n    containerElem.append(TeamsLogoElement(teamName, seasonNumber, \"Away\", \"Alternate\", awayColorScheme))\r\n\r\n    return containerElem;\r\n}\r\n\r\nexport default ColorsPageLayout;","import createTeamCssLogo from \"../../../misc/createTeamCssLogo\";\r\n\r\nfunction TeamsLogoElement(teamName, seasonNumber, homeOrAway, homeOrAlternate, colorScheme){\r\n    const containerElem = document.createElement('div');\r\n    const innerContainerElem = document.createElement('div');\r\n    const titleContainerElem = document.createElement('div');\r\n    const redBlueElem = document.createElement('div');\r\n    const redContainer = document.createElement(\"div\")\r\n    const blueContainer = document.createElement(\"div\")\r\n\r\n    containerElem.classList.add(`teamColors${homeOrAway}Content`, \"w3-container\", \"w3-padding\", \"w3-blue\", \"w3-round-large\")\r\n    containerElem.style.setProperty('height', '16rem', 'important');\r\n\r\n    innerContainerElem.classList.add(\"w3-card-4\", \"w3-padding\", \"w3-yellow\", \"w3-round-large\")\r\n \r\n    const titleElem = document.createElement(\"h5\");\r\n    titleElem.textContent = homeOrAlternate;\r\n    titleContainerElem.append(titleElem);\r\n\r\n    redContainer.setAttribute(\"data-color-scheme\", `/colors red ${colorScheme}`)\r\n    redContainer.classList.add(\"w3-padding\", \"w3-round\", \"w3-center\", \"w3-red\", \"red\")\r\n    redContainer.textContent = \"left\"\r\n\r\n    blueContainer.setAttribute(\"data-color-scheme\", `/colors blue ${colorScheme}`)\r\n    blueContainer.classList.add(\"w3-padding\", \"w3-round\", \"w3-center\", \"w3-blue\", \"blue\")\r\n    blueContainer.textContent = \"right\"\r\n\r\n    redBlueElem.classList.add(\"w3-container\", \"w3-padding\", \"redBlue\")\r\n    redBlueElem.append(redContainer)\r\n    redBlueElem.append(blueContainer)\r\n\r\n\r\n    innerContainerElem.append(titleContainerElem);\r\n    const teamLogo = createTeamCssLogo.teamsColorsPage(teamName, seasonNumber, homeOrAway);\r\n    const parser = new DOMParser()\r\n    const doc = parser.parseFromString(teamLogo, 'text/html');\r\n    const teamsLogoCssElem = doc.body.firstChild\r\n    innerContainerElem.append(teamsLogoCssElem)\r\n    innerContainerElem.append(redBlueElem);\r\n\r\n    containerElem.append(innerContainerElem);\r\n    return containerElem;\r\n}\r\nexport default TeamsLogoElement","function colorPageHeader(){\r\n    const containerElem = document.createElement('div');\r\n    const headerElem = document.createElement('h4')\r\n\r\n    containerElem.classList.add(\"teamColorsHeader\", \"w3-blue\", \"w3-round-large\")\r\n    headerElem.classList.add(\"w3-text-black\");\r\n    headerElem.textContent = \"Copy teams color to clipboard\"\r\n\r\n    containerElem.append(headerElem);\r\n    return containerElem;\r\n}\r\n\r\nexport default colorPageHeader;","import clearTablesDiv from \"../../tables/clearTablesDiv\";\r\nimport clearScoreboardDiv from \"../../scoreboard/clearScoreboardDiv\";\r\nimport getTablesDiv from \"../../tables/getTablesDiv\";\r\nimport eachTeamObjectMAP from \"../../var_lib/maps/teams/eachTeamObjectMAP\";\r\nimport setTeamsPageLayout from \"../teamsPageLayout/setTeamsPageLayout\";\r\nimport ColorsPageLayout from \"./ColorsPageLayout\";\r\n\r\nexport default function teamColorsPage(e) {\r\n    clearTablesDiv();\r\n    clearScoreboardDiv();\r\n    getTablesDiv();\r\n    let team = e.target.dataset.teamName;\r\n    let seasonNum = e.target.dataset.seasonNum;\r\n    let homeColorScheme = eachTeamObjectMAP.get(team)[`S0${seasonNum}Home`];\r\n    let awayColorScheme = eachTeamObjectMAP.get(team)[`S0${seasonNum}Away`];\r\n\r\n    tablesDiv.append(ColorsPageLayout(team, seasonNum, homeColorScheme, awayColorScheme))\r\n    // create function to copy color red/blue scheme\r\n  \r\n    document\r\n      .getElementById(\"teamColorsBackButton\")\r\n      .addEventListener(\"click\", () => {setTeamsPageLayout(document.getElementById('teamColorsBackButton'))});\r\n    // end back button\r\n  \r\n    function getColorScheme(e) {\r\n      let scheme = e.target.dataset.colorScheme;\r\n      navigator.clipboard.writeText(scheme);\r\n    }\r\n    // set listeners on newly created red/blue button elements\r\n    let redBlueButtons = document.querySelectorAll(\"div[data-color-scheme]\");\r\n    redBlueButtons.forEach((item) =>\r\n      item.addEventListener(\"click\", getColorScheme)\r\n    );\r\n  }","function TeamName(teamName){\r\nconst containerElem = document.createElement(\"div\");\r\nconst headingTeamNameElem = document.createElement(\"h1\");\r\n\r\ncontainerElem.className=  \"teamName\";\r\nheadingTeamNameElem.textContent = teamName\r\ncontainerElem.append(headingTeamNameElem)\r\nreturn containerElem;\r\n}\r\n\r\nexport default TeamName;","function SeasonNumber(seasonNumber) {\r\n    const containerElem = document.createElement(\"div\");\r\n    const headerElem = document.createElement(\"h3\")\r\n\r\n    containerElem.className = \"gameType\";\r\n    headerElem.textContent = `Season ${seasonNumber}`\r\n\r\n    containerElem.append(headerElem);\r\n    return containerElem;\r\n}\r\n\r\nexport default SeasonNumber\r\n","function TeamRecord(wins, losses, draws) {\r\n    const containerElem = document.createElement(\"div\");\r\n    const headerElem = document.createElement(\"h3\");\r\n\r\n    containerElem.classList = \"teamRecord\";\r\n    headerElem.textContent = `(${wins} - ${losses} - ${draws})`\r\n\r\n    containerElem.append(headerElem);\r\n    return containerElem;\r\n}\r\n\r\nexport default TeamRecord\r\n","function PlayersButton(teamName, seasonNumber){\r\n    const containerElem = document.createElement(\"div\");\r\n    containerElem.classList.add(\"w3-round\", \"w3-green\", \"players\");\r\n    containerElem.setAttribute(\"data-team-name\", teamName)\r\n    containerElem.setAttribute(\"data-season-num\", seasonNumber)\r\n    containerElem.setAttribute(\"data-game-type\", \"Season\")\r\n\r\n    containerElem.textContent = \"Players\";\r\n    \r\n    return containerElem;\r\n}\r\n\r\nexport default PlayersButton;","function SeasonResultButton(teamName, seasonNumber){\r\n    const containerElem = document.createElement(\"div\");\r\n    containerElem.classList.add(\"w3-round\", \"seasonScoreboard\");\r\n    containerElem.setAttribute(\"data-team-name\", teamName)\r\n    containerElem.setAttribute(\"data-season-num\", seasonNumber)\r\n    containerElem.setAttribute(\"data-game-type\", \"Season\")\r\n\r\n    containerElem.textContent = \"Season Results\";\r\n    \r\n    return containerElem;\r\n}\r\n\r\nexport default SeasonResultButton;","function PlayoffResultButton(teamName, seasonNumber){\r\n    const containerElem = document.createElement(\"div\");\r\n    containerElem.classList.add(\"w3-round\", \"playoffScoreboard\");\r\n    containerElem.setAttribute(\"data-team-name\", teamName)\r\n    containerElem.setAttribute(\"data-season-num\", seasonNumber)\r\n    containerElem.setAttribute(\"data-game-type\", \"Playoff\")\r\n\r\n    containerElem.textContent = \"Playoff Results\";\r\n    \r\n    return containerElem;\r\n}\r\n\r\nexport default PlayoffResultButton;","function TeamColorsButton(teamName, seasonNumber, buttonColor){\r\n    const containerElem = document.createElement(\"div\");\r\n    containerElem.classList.add(\"w3-round\", \"teamColors\");\r\n    containerElem.style.backgroundColor = `#${buttonColor}`;\r\n    containerElem.setAttribute(\"data-team-name\", teamName)\r\n    containerElem.setAttribute(\"data-season-num\", seasonNumber)\r\n    containerElem.textContent = \"Team Colors\"\r\n\r\n    return containerElem;\r\n}\r\n\r\nexport default TeamColorsButton;","import TeamName from \"./teamsPageHeader/TeamName\"\r\nimport SeasonNumber from \"./teamsPageHeader/SeasonNumber\";\r\nimport TeamRecord from \"./teamsPageHeader/TeamRecord\"\r\nimport PlayersButton from \"./playersButton/PlayersButton\";\r\nimport SeasonResultButton from \"./seasonResultsButton/SeasonResultsButton\";\r\nimport PlayoffResultButton from \"./playoffResultsButton/PlayoffResultsButton\";\r\nimport TeamColorsButton from \"./teamColorsButton/TeamColorsButton\";\r\n\r\nfunction TeamsPageLayout(teamName, seasonNumber, wins, losses, draws, color){\r\n    const containerElem = document.createElement(\"div\");\r\n    containerElem.classList.add(\"w3-container\", \"w3-margin\", \"teamsLayout\")\r\n\r\n    containerElem.append(TeamName(teamName))\r\n    containerElem.append(SeasonNumber(seasonNumber))\r\n    containerElem.append(TeamRecord(wins, losses, draws))\r\n    containerElem.append(PlayersButton(teamName, seasonNumber))\r\n    containerElem.append(SeasonResultButton(teamName, seasonNumber))\r\n    containerElem.append(PlayoffResultButton(teamName, seasonNumber))\r\n    containerElem.append(TeamColorsButton(teamName, seasonNumber, color))\r\n\r\n\r\n// console.log(containerElem)\r\n    return containerElem;\r\n}\r\n\r\nexport default TeamsPageLayout;","import clearTablesDiv from \"../../tables/clearTablesDiv\";\r\nimport getTablesDiv from \"../../tables/getTablesDiv\";\r\nimport closeSidebar from \"../../sidebar/closeSidebar\";\r\nimport clearScoreboardDiv from \"../../scoreboard/clearScoreboardDiv\";\r\nimport TeamStats from \"../../classFiles/teams/teamStats\";\r\nimport setHeaderBanner from \"../setHeaderBanner\";\r\nimport teamsColorMAP from \"../../var_lib/maps/teams/teamsColorMAP\"\r\nimport getTeamsPlayersPerSeason from \"../teamPlayerList/teamPlayerList\";\r\nimport getTeamsGameResults from \"../getTeamsGamesResults/getTeamsGamesResults\";\r\nimport teamColorsPage from \"../teamsColorLayout/teamsColorsPage\";\r\nimport { SEASONS_WITH_TIE_GAMES } from \"../../../constants/consts/vars\";\r\nimport TeamsPageLayout from \"./TeamsPageLayout\";\r\n\r\nasync function setTeamsPageLayout(eventElement) {\r\n  clearTablesDiv();\r\n  clearScoreboardDiv();\r\n  closeSidebar();\r\n  const tablesDiv = getTablesDiv();\r\n  let team = eventElement.dataset.teamName;\r\n  let seasonNum = eventElement.dataset.seasonNum;\r\n  let teamsSeasonObject =\r\n  TeamStats.allTeamStats[team][`teamsSeason${seasonNum}SeasonStatsMAP`];\r\n  const teamColor = teamsColorMAP.get(team)\r\n  let wins = teamsSeasonObject.get(\"Wins\");\r\n  let losses = teamsSeasonObject.get(\"Losses\");\r\n  let draws = \"\";\r\n  if (SEASONS_WITH_TIE_GAMES.includes(+seasonNum)) {\r\n    draws = teamsSeasonObject.get(\"Draws\");\r\n  } else {\r\n    draws = teamsSeasonObject.get(\"OTL\");\r\n  }\r\n  // class teamsLayout is grid container\r\n  tablesDiv.append(TeamsPageLayout(team, seasonNum, wins, losses, draws, teamColor))\r\n    // change header banner when team is selected from navbar\r\n    setHeaderBanner(team, seasonNum);\r\n      // change bodies background color to that of team selected\r\n      document.body.style.backgroundColor = `#${teamsColorMAP.get(team)}`;\r\n      // sets tables for that teams players stats for that season\r\n      let playersArea = document.querySelector(\".players\");\r\n      playersArea.addEventListener(\"click\", getTeamsPlayersPerSeason);\r\n      let teamColorsArea = document.querySelector(\".teamColors\");\r\n      teamColorsArea.style.backgroundColor = `#${teamsColorMAP.get(team)}`;\r\n      // set listeners on newly created elements (buttons) once entering teams layout page\r\n      let seasonGamesResultsArea = document.querySelector(\".seasonScoreboard\");\r\n      seasonGamesResultsArea.addEventListener(\"click\", getTeamsGameResults);\r\n      let playoffGamesResultsArea = document.querySelector(\".playoffScoreboard\");\r\n      playoffGamesResultsArea.addEventListener(\"click\", getTeamsGameResults);\r\n      teamColorsArea.addEventListener(\"click\", teamColorsPage);\r\n  }\r\n\r\n  export default  setTeamsPageLayout;","import setTeamsPageLayout from \"../../layouts/teamsPageLayout/setTeamsPageLayout\";\r\n\r\nexport default function setListenersMainNavbar() {\r\n    let getTeamsFromNavBar = document.querySelectorAll(\".three-d-Logo\");\r\n    getTeamsFromNavBar.forEach((item) =>{\r\n      item.addEventListener(\"click\", (e) => {\r\n        const targetElement = e.target.closest(\".three-d-Logo\")\r\n        if(targetElement){\r\n          setTeamsPageLayout(targetElement)\r\n        }\r\n      })\r\n    }\r\n    );\r\n  }","import sortTable from \"../../misc/sortTable\";\r\nimport { TABLE_BREAK_POINT } from \"../../../constants/consts/vars\";\r\n\r\nexport default function setTableListeners() {\r\n    let browserWidth = window.innerWidth;\r\n    if (browserWidth < TABLE_BREAK_POINT) {\r\n      let mobileTableCells = document.querySelectorAll(\"#tablesDiv\");\r\n      mobileTableCells[0].onclick = function (e) {\r\n        let td = e.target.closest(\"td\");\r\n        if (!td) return;\r\n        sortTable(e);\r\n      };\r\n    } else {\r\n      let getFieldNames = document.querySelectorAll(\"#tablesDiv\");\r\n      getFieldNames[0].onclick = function (e) {\r\n        let th = e.target.closest(\"th\");\r\n        if (!th) return;\r\n        sortTable(e);\r\n      };\r\n    }\r\n  }","import setHomeTable from \"../tables/setHomeTable\";\r\nimport resizeEventMethod from \"../misc/documentResize\";\r\nimport debounce from \"../misc/debounce\";\r\n\r\n// menu bar listeners\r\nimport \"./menubarListeners/menubarListeners\"\r\n// set listeners on season standings in menu\r\nimport \"../listeners/seasonTableListeners/seasonTableListeners\"\r\n// set listeners on player tables in menu\r\nimport \"../listeners/playerTableListeners/playerTableListeners\"\r\n// announcements page listener\r\nimport \"./pageListeners/announcementsListener\"\r\n// records page listener\r\nimport \"./pageListeners/leagueRecordsListener\"\r\nimport playoffTree from \"../layouts/playoffTree/playoffTree\";\r\nimport currentSeason from \"../var_lib/season/currentSeason\";\r\nimport { IN_BETWEEN_SEASONS, IS_PLAYOFFS } from \"../../constants/consts/vars\";\r\n\r\n  // add link to haxball logo \r\n  const headerLogo = document.querySelector(\"img[alt*='Haxball']\");\r\n  // setHomeTable or playoffs depending on if playoffs are currently ongoing\r\n  if(IN_BETWEEN_SEASONS || IS_PLAYOFFS){\r\n    headerLogo.addEventListener(\"click\", () => {playoffTree(currentSeason)});\r\n  } else {\r\n    headerLogo.addEventListener(\"click\", () => {setHomeTable()});\r\n  }\r\n\r\n// keeps tables fields correctly highlighted on windows resize\r\n\r\nconst debouncedResizeEventMethod = debounce(resizeEventMethod, 50);\r\nwindow.addEventListener('resize', debouncedResizeEventMethod)","import openSidebar from \"../../sidebar/openSidebar\";\r\nimport closeSidebar from \"../../sidebar/closeSidebar\";\r\nimport hideAllSubMenus from \"../../sidebar/hideAllSubMenus\"\r\nimport hideTeamSubMenu from \"../../sidebar/teams/hideTeamSubMenu\";\r\nimport displayTeamSubMenu from \"../../sidebar/teams/displayTeamSubMenu\"\r\nimport hidePlayerSubMenu from \"../../sidebar/players/hidePlayerSubMenu\";\r\nimport displayPlayerSubMenu from \"../../sidebar/players/displayPlayerSubMenu\"\r\nimport setHomeTable from \"../../tables/setHomeTable\";\r\nimport playoffTree from \"../../layouts/playoffTree/playoffTree\";\r\nimport currentSeason from \"../../var_lib/season/currentSeason\";\r\nimport { IN_BETWEEN_SEASONS } from \"../../../constants/consts/vars\";\r\n  \r\n  // sidebar menu\r\n  document.getElementById(\"openSidebar\").addEventListener(\"click\", openSidebar);\r\n  document.getElementById(\"sidebar\").addEventListener(\"mouseleave\", closeSidebar);\r\n\r\n  // home option \r\n  const homeSidebar = document.querySelector(\"#home\");\r\n  homeSidebar.addEventListener(\"click\", () => {\r\n    if(IN_BETWEEN_SEASONS){\r\n      playoffTree(currentSeason)\r\n    } else {\r\n      setHomeTable(currentSeason);\r\n    }\r\n    setTimeout(() => {\r\n      closeSidebar()\r\n    }, 50)\r\n  });\r\n  \r\n  // teams sub menus\r\n  document\r\n    .getElementById(\"teamSidebar\")\r\n    .addEventListener(\"click\", () => {\r\n      displayTeamSubMenu();\r\n      hidePlayerSubMenu();\r\n    });\r\n  // players sub menus\r\n  document\r\n    .getElementById(\"playerSidebar\")\r\n    .addEventListener(\"click\", () => {\r\n      displayPlayerSubMenu();\r\n      hideTeamSubMenu();\r\n    });\r\n  // mobile open/close sidebar navbar\r\n  document.getElementById(\"openSidebar\").addEventListener(\"click\", openSidebar);\r\n  document\r\n    .getElementById(\"sidebar\")\r\n    .addEventListener(\"mouseleave\", () => {\r\n      hideAllSubMenus();\r\n      closeSidebar();\r\n    });","import setAnnouncements from \"../../layouts/announcements/setAnnouncements\";\r\nimport closeSidebar from \"../../sidebar/closeSidebar\";\r\n\r\n  // announcements page\r\n  document\r\n  .getElementById(\"announcements\")\r\n  .addEventListener(\"click\", () => {\r\n    setAnnouncements()\r\n    setTimeout(() => closeSidebar(), 50)\r\n  });","import setPlayersBoxscoreTable from \"../../../../layouts/singleGameStats/singleGameStatsComponents/setPlayersBoxscoreTable\";\r\n\r\nfunction playerBoxscoreTableListeners({thisGamesPlayerStatMAPS, thisGamesHomeTeamPlayerNames, thisGamesHomeTeamColor, thisGamesAwayTeamColor}) {\r\n    let browserWidth = window.innerWidth;\r\n    if (browserWidth < 982) {\r\n      let mobileTableCells = document.querySelectorAll(\"#boxscorePlayerStats td\");\r\n      let eachCell = Array.from(mobileTableCells);\r\n      eachCell.forEach((field) =>\r\n        field.addEventListener(\"click\", (e) =>\r\n          setPlayersBoxscoreTable(e, { thisGamesPlayerStatMAPS, thisGamesHomeTeamPlayerNames, thisGamesHomeTeamColor, thisGamesAwayTeamColor })\r\n        )\r\n      );\r\n    } else {\r\n      let getFieldNames = document.querySelectorAll(\"#boxscorePlayerStats th\");\r\n      let headers = Array.from(getFieldNames);\r\n      headers.forEach((field) =>\r\n        field.addEventListener(\"click\", (e) =>\r\n          setPlayersBoxscoreTable(e, { thisGamesPlayerStatMAPS, thisGamesHomeTeamPlayerNames, thisGamesHomeTeamColor, thisGamesAwayTeamColor })\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\nexport default playerBoxscoreTableListeners;","import debounce from \"../../../../misc/debounce\"\r\nimport playerBoxscoreTableListeners from \"./playerBoxscoreTableListeners\";\r\n\r\nfunction updatePlayersBoxscoreTableResizeListener({thisGamesPlayerStatMAPS, thisGamesHomeTeamPlayerNames, thisGamesHomeTeamColor, thisGamesAwayTeamColor}){\r\n    // resize event method\r\nfunction handleResize() {\r\n    let playerStatsContainer = document.querySelector(\"#boxscorePlayerStats\");\r\n    if (playerStatsContainer) {\r\n        playerBoxscoreTableListeners({ thisGamesPlayerStatMAPS, thisGamesHomeTeamPlayerNames, thisGamesHomeTeamColor, thisGamesAwayTeamColor })\r\n    }\r\n  }\r\n  \r\n  // Throttled version of the resize listener\r\n  const debouncedResize = debounce(handleResize, 500); // Adjust the limit (in milliseconds) as needed\r\n\r\n  let playerStatsContainer = document.querySelector(\"#boxscorePlayerStats\");\r\n  if (playerStatsContainer) {\r\n    window.addEventListener('resize', debouncedResize);\r\n  } else {\r\n    window.removeEventListener('resize', debouncedResize);\r\n  }\r\n}\r\n\r\nexport default updatePlayersBoxscoreTableResizeListener;","import leagueTeamRecords from \"../../layouts/records/teamRecords/teamRecordsExports\"\r\nimport closeSidebar from \"../../sidebar/closeSidebar\";\r\n\r\n// league records\r\ndocument\r\n  .getElementById(\"leagueRecords\")\r\n  .addEventListener(\"click\", () => {\r\n    leagueTeamRecords.setRecordsPageNav();\r\n    setTimeout(() => {\r\n      closeSidebar()\r\n    }, 50)\r\n    leagueTeamRecords.setListenersOnFormSelects()\r\n  });","import setPlayersFullTable from \"../../tables/setPlayersFullTable\";\r\nimport setPlayersAllTimeTable from \"../../tables/setPlayersAllTimeTable\";\r\nimport closeSidebar from \"../../sidebar/closeSidebar\";\r\nimport seasonCount from \"../../var_lib/season/seasonCount\";\r\nimport { IN_BETWEEN_SEASONS, IS_PLAYOFFS } from \"../../../constants/consts/vars\";\r\n\r\nconst latestSeason = seasonCount.at(-1)\r\n\r\n// Players tables\r\n// all time player stats\r\ndocument\r\n  .getElementById(\"allTimePlayerPointsTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setPlayersAllTimeTable(0, \"\", \"Stats\");\r\n    setTimeout(() => {\r\n      closeSidebar();\r\n    }, 50);\r\n});\r\ndocument\r\n  .getElementById(\"allTimePlayerSeasonTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setPlayersAllTimeTable(0, \"Season\", \"Season Stats\");\r\n        setTimeout(() => {\r\n      closeSidebar();\r\n    }, 50);\r\n});\r\ndocument\r\n  .getElementById(\"allTimePlayerPlayoffTable\")\r\n  .addEventListener(\"click\", () => {\r\n    setPlayersAllTimeTable(0, \"Playoff\", \"Playoff Stats\");\r\n        setTimeout(() => {\r\n      closeSidebar();\r\n    }, 50);\r\n});\r\n\r\n// season 05 players tables\r\nfor(let i = seasonCount.length; i>0; i--){\r\n  document\r\n  .getElementById(`s0${i}PlayerSeasonTable`)\r\n  .addEventListener(\"click\", () => {\r\n    setPlayersFullTable(i)\r\n    setTimeout(() => {\r\n      closeSidebar();\r\n    }, 50);\r\n});\r\nif(!latestSeason){\r\n  document\r\n    .getElementById(`s0${i}PlayerPlayoffTable`)\r\n    .addEventListener(\"click\", () => {\r\n      setPlayersFullTable(i, \"Playoff\", \"Playoffs\")\r\n      setTimeout(() => {\r\n        closeSidebar();\r\n      }, 50);\r\n  });\r\n  document\r\n    .getElementById(`s0${i}PlayerCombinedTable`)\r\n    .addEventListener(\"click\", () => {\r\n      setPlayersFullTable(i, \"Combined\", \"Combined\")\r\n      setTimeout(() => {\r\n        closeSidebar();\r\n      }, 50);\r\n  });\r\n}\r\nif(latestSeason && IN_BETWEEN_SEASONS && IS_PLAYOFFS){\r\n    document\r\n    .getElementById(`s0${i}PlayerPlayoffTable`)\r\n    .addEventListener(\"click\", () => {\r\n      setPlayersFullTable(i, \"Playoff\", \"Playoffs\")\r\n      setTimeout(() => {\r\n        closeSidebar();\r\n      }, 50);\r\n  });\r\n  document\r\n    .getElementById(`s0${i}PlayerCombinedTable`)\r\n    .addEventListener(\"click\", () => {\r\n      setPlayersFullTable(i, \"Combined\", \"Combined\")\r\n      setTimeout(() => {\r\n        closeSidebar();\r\n      }, 50);\r\n  });\r\n}\r\n}","import playoffTree from \"../../layouts/playoffTree/playoffTree\";\r\nimport closeSidebar from \"../../sidebar/closeSidebar\";\r\nimport setSeasonsFullTable from \"../../tables/setSeasonsFullTable\";\r\nimport seasonCount from \"../../var_lib/season/seasonCount\";\r\nimport { IN_BETWEEN_SEASONS, IS_PLAYOFFS } from \"../../../constants/consts/vars\";\r\n\r\nconst latestSeason = seasonCount.at(-1)\r\n\r\nfor(let i = seasonCount.length; i>0; i--){\r\n  document\r\n  .getElementById(`s0${i}RegularSeason`)\r\n  .addEventListener(\"click\", () => {\r\n    setSeasonsFullTable(i)\r\n    setTimeout(() => {\r\n      closeSidebar();\r\n    }, 50);\r\n});\r\nif(!latestSeason){\r\n  document\r\n    .getElementById(`s0${i}PlayoffTree`)\r\n    .addEventListener(\"click\", () => {\r\n      playoffTree(i)\r\n      setTimeout(() => {\r\n        closeSidebar();\r\n      }, 50);\r\n  });\r\n  document\r\n    .getElementById(`s0${i}CombinedTable`)\r\n    .addEventListener(\"click\", () => {\r\n      setSeasonsFullTable(i, \"Combined\", \"Combined\")\r\n      setTimeout(() => {\r\n        closeSidebar();\r\n      }, 50);\r\n  });\r\n}\r\nif(latestSeason && IN_BETWEEN_SEASONS && IS_PLAYOFFS){\r\n  document\r\n    .getElementById(`s0${i}PlayoffTree`)\r\n    .addEventListener(\"click\", () => {\r\n      playoffTree(i)\r\n      setTimeout(() => {\r\n        closeSidebar();\r\n      }, 50);\r\n  });\r\n  document\r\n    .getElementById(`s0${i}CombinedTable`)\r\n    .addEventListener(\"click\", () => {\r\n      setSeasonsFullTable(i, \"Combined\", \"Combined\")\r\n      setTimeout(() => {\r\n        closeSidebar();\r\n      }, 50);\r\n  });\r\n}\r\n}\r\n","import getTablesDiv from \"../tables/getTablesDiv\"\r\n\r\nconst tablesDiv = getTablesDiv()\r\n\r\nconst observer = new MutationObserver((mutations) => {\r\n    const isTableDisplayed = tablesDiv.firstElementChild?.tagName === 'TABLE' ? true : false\r\n    if(isTableDisplayed){\r\n        tablesDiv.style.justifyContent = 'start'\r\n        const getTeamsTable = document.querySelector('#tablesDiv > table')\r\n        getTeamsTable.style.margin = 'auto'\r\n    } else {\r\n        tablesDiv.style.justifyContent = 'center'\r\n    }\r\n})\r\n\r\n\r\nobserver.observe(tablesDiv, {\r\n    childList: true\r\n})","function importAll(r) {\r\n    let images = {};\r\n    r.keys().forEach((item) => {\r\n      images[item.replace('./', '')] = r(item);\r\n    });\r\n    return images;\r\n  }\r\n  \r\n  const images = importAll(require.context('/img', true, /\\.(png|jpe?g|svg)$/));\r\n  \r\n  export default images;\r\n  ","import teamsColorMAP from \"../var_lib/maps/teams/teamsColorMAP\";\r\n\r\nfunction backButton(id, teamName, seasonNum, gameType = \"Season\", ...styleClasses){\r\n    const buttonDiv = document.createElement(\"div\");\r\n    buttonDiv.id = id;\r\n    buttonDiv.classList.add('w3-btn', 'w3-round-large')\r\n    buttonDiv.style.backgroundColor = `#${teamsColorMAP.get(teamName)}`\r\n    buttonDiv.style.color = \"#ffffff\"\r\n    buttonDiv.setAttribute(\"data-team-name\", teamName);\r\n    buttonDiv.setAttribute(\"data-season-num\", seasonNum);\r\n    buttonDiv.setAttribute(\"data-game-type\", gameType);\r\n    if(styleClasses.length > 0){\r\n        styleClasses.forEach(className => {\r\n            buttonDiv.classList.add(className)\r\n        })\r\n    }\r\n    buttonDiv.textContent = \"back\"\r\n    return buttonDiv\r\n}\r\n\r\nexport default backButton;\r\n","// this method is used in createTeamCssLogo.js\r\n// html all above methods contain but adds custom width/height styles\r\n\r\nimport eachTeamObjectMAP from \"../var_lib/maps/teams/eachTeamObjectMAP\"\r\nimport getTeams3dColorScheme from \"./getTeams3DColorScheme\"\r\n\r\nfunction createCssLogoSkeleton({width, height, fontSize, teamName, seasonNumber, homeOrAway}){\r\n    if(seasonNumber === 0){\r\n        seasonNumber = 1\r\n    }\r\n    let colorString = `S0${seasonNumber}${homeOrAway}`\r\n    let teamsColorScheme = eachTeamObjectMAP.get(teamName)[colorString]\r\n    let colorParts = teamsColorScheme.split(\" \")\r\n    let mainColor = colorParts[2];\r\n    return `<div\r\n        data-team-name=\"${teamName}\" \r\n        data-season-num=\"${seasonNumber}\"\r\n        class=\"navLogo three-d-Logo\"\r\n        style=\"width:${width};height:${height}; margin:auto; display: grid; place-items: center;background-color: #${mainColor};\r\n        background: radial-gradient(circle at 50% 00%, \r\n    rgba(255, 255, 255, 0.8) 0%, \r\n    rgba(0, 0, 0, 0.2) 40%, \r\n    rgba(0, 0, 0, 0.2) 100%),\r\n    ${getTeams3dColorScheme(mainColor, colorParts)};\r\n    transform: rotate(${colorParts[0]}deg);\"\r\n    >\r\n    <div style=\"color: #${colorParts[1]};font-weight: 200;font-size: clamp(${fontSize}); transform: rotate(-${colorParts[0]}deg);\">HC</div>\r\n    </div>`\r\n}\r\n\r\nexport default createCssLogoSkeleton;","function createElement(elementType, ...classes) {\r\n    const element = document.createElement(elementType);\r\n    if(classes){\r\n        element.classList.add(...classes)\r\n    }\r\n    return element;\r\n}\r\n\r\nexport default createElement","import createCssLogoSkeleton from \"./createCssLogoSkeleton\";\r\nimport { HC_FONT, CSS_LOGO_DIMENSIONS } from \"../../constants/consts/vars\";\r\n\r\nconst createTeamCssLogo = {\r\n    // setTeamLogoCss page\r\n    \"setTeamLogoCss\": function(teamName, seasonNumber, homeOrAway){\r\n        const attributes = {\r\n            \"width\": CSS_LOGO_DIMENSIONS.setTeamLogoCss.width,\r\n            \"height\": CSS_LOGO_DIMENSIONS.setTeamLogoCss.height,\r\n            \"fontSize\": HC_FONT.setTeamLogoCss,\r\n            teamName,\r\n            seasonNumber,\r\n            homeOrAway\r\n        }\r\n        return createCssLogoSkeleton(attributes)\r\n    },\r\n    // games results page\r\n    \"getTeamsGamesResults\": function(teamName, seasonNumber, homeOrAway){\r\n        const attributes = {\r\n            \"width\": CSS_LOGO_DIMENSIONS.getTeamsGamesResults.width,\r\n            \"height\": CSS_LOGO_DIMENSIONS.getTeamsGamesResults.height,\r\n            \"fontSize\": HC_FONT.getTeamsGamesResults,\r\n            teamName,\r\n            seasonNumber,\r\n            homeOrAway\r\n        }\r\n        return createCssLogoSkeleton(attributes)\r\n    },\r\n    // gifs page\r\n    \"setGifs\": function(teamName, seasonNumber, homeOrAway){\r\n        const attributes = {\r\n            \"width\": CSS_LOGO_DIMENSIONS.setGifs.width,\r\n            \"height\": CSS_LOGO_DIMENSIONS.setGifs.height,\r\n            \"fontSize\": HC_FONT.setGifs,\r\n            teamName,\r\n            seasonNumber,\r\n            homeOrAway\r\n        }\r\n        return createCssLogoSkeleton(attributes)\r\n    },\r\n    // boxscore for a single game page\r\n    \"singleGameStats\": function(teamName, seasonNumber, homeOrAway){\r\n        const attributes = {\r\n            \"width\": CSS_LOGO_DIMENSIONS.singleGameStats.width,\r\n            \"height\": CSS_LOGO_DIMENSIONS.singleGameStats.height,\r\n            \"fontSize\": HC_FONT.singleGameStats,\r\n            teamName,\r\n            seasonNumber,\r\n            homeOrAway\r\n        }\r\n        return createCssLogoSkeleton(attributes)\r\n    },\r\n    // teams color page\r\n    \"teamsColorsPage\": function(teamName, seasonNumber, homeOrAway){\r\n        const attributes = {\r\n            \"width\": CSS_LOGO_DIMENSIONS.teamColors.width,\r\n            \"height\": CSS_LOGO_DIMENSIONS.teamColors.height,\r\n            \"fontSize\": HC_FONT.teamColors,\r\n            teamName,\r\n            seasonNumber,\r\n            homeOrAway\r\n        }\r\n        return createCssLogoSkeleton(attributes)\r\n    },\r\n}\r\n\r\nexport default createTeamCssLogo;","function debounce(func, delay) {\r\n    let timer;\r\n    return function(...args) {\r\n        clearTimeout(timer);\r\n        timer = setTimeout(() => func.apply(this, args), delay);\r\n    };\r\n}\r\n\r\nexport default debounce;\r\n","import setMainNavbar from \"../layouts/navbar/setMainNavbar\";\r\nimport screenResize from \"./screenResize\";\r\nimport getTeamsPlayersPerSeason from \"../layouts/teamPlayerList/teamPlayerList\";\r\n\r\nfunction resizeEventMethod() {\r\n  // screen size for navbar layout adapting to a screen resize event\r\n  const screenWidth = window.innerWidth;\r\n  const tableCaption = document.querySelector(\r\n    `#tablesDiv > table > caption > h1`\r\n  );\r\n  // 7 is season number position on home page table which is the current season\r\n  let getSeasonNumber;\r\n  if(tableCaption){\r\n      getSeasonNumber = +tableCaption.textContent[7]\r\n      if (isNaN(getSeasonNumber)) {\r\n        // 2 is season number position for tables not on the home page\r\n        getSeasonNumber = +tableCaption.textContent[2];\r\n      }\r\n    } \r\n    // season number can become lost resulting in undefined so grab season number from navbar element with season-num data attribute\r\n    if(tableCaption == null){\r\n      const getSeasonNumberFromNavbarDataAttribute = +document.querySelectorAll(\"div[data-season-num]\")[0]?.dataset.seasonNum;\r\n      getSeasonNumber = getSeasonNumberFromNavbarDataAttribute\r\n      // there is a bug when showing playoff tree that reduces season number by one so add one back when playoff tree\r\n      let isPlayoffTree\r\n      if(document.querySelector(\".playoffTreeThreeTeams h3\")) {\r\n        isPlayoffTree = document.querySelector(\".playoffTreeThreeTeams h3\");\r\n      }\r\n      if(document.querySelector(\".playoffTreeFourTeams h3\")) {\r\n        isPlayoffTree = document.querySelector(\".playoffTreeFourTeams h3\");\r\n      }\r\n      if(document.querySelector(\".playoffTreeFiveTeams h3\")) {\r\n        isPlayoffTree = document.querySelector(\".playoffTreeFiveTeams h3\");\r\n      }\r\n      if(isPlayoffTree){\r\n        getSeasonNumber = +isPlayoffTree.textContent[7]\r\n      } \r\n    }\r\n    if (screenWidth < 500) {\r\n      // this if checks for players all time stats as these table headers do not contain a number\r\n      if (isNaN(getSeasonNumber)) {\r\n        setMainNavbar();\r\n      } else {\r\n        // if mobile screen and more teams than 5 then add another row to navbar teams layout\r\n        setMainNavbar(getSeasonNumber);\r\n      }\r\n    } else if (screenWidth > 500) {\r\n      // this if checks for players all time stats as these table headers do not contain a number\r\n      if (isNaN(getSeasonNumber)) {\r\n        setMainNavbar();\r\n      } else {\r\n        // if large screen and more teams than 5 then add another row to navbar teams layout\r\n        setMainNavbar(getSeasonNumber);\r\n      }\r\n    }\r\n    // end navbar layout\r\n    // this is for on teams page players list and there respective stats tables\r\n    const getTeamPlayerSeasonTable = document.querySelectorAll(\r\n      \"#teamPlayerSeasonTable\"\r\n    );\r\n    const getTeamPlayerPlayoffTable = document.querySelectorAll(\r\n      \"#teamPlayerPlayoffTable\"\r\n    );\r\n    const getTeamPlayerCombinedTable = document.querySelectorAll(\r\n      \"#teamPlayerCombinedTable\"\r\n    );\r\n      if (getTeamPlayerSeasonTable.length == 0) {\r\n        screenResize();\r\n      } else {\r\n        const teamPlayerBackButton = document.getElementById(\"playerStatsBackButton\");\r\n        // e is undefined so given value of false\r\n        // 2nd, 3rd and 4th arguments\r\n        const team = teamPlayerBackButton.dataset.teamName;\r\n        const seasonNumber = teamPlayerBackButton.dataset.seasonNum;\r\n        const teamLogo = teamPlayerBackButton.dataset.teamLogo;\r\n        // 5th argument season table\r\n        const getSeasonTableData = document.querySelectorAll(\r\n          \"#teamPlayerSeasonTable td[class='w3-yellow']\"\r\n        );\r\n        const getSeasonSelectedField = getSeasonTableData[0].dataset.fieldName;\r\n        // 6th argument playoff table\r\n        let getPlayoffSelectedField;\r\n        if (getTeamPlayerPlayoffTable.length > 0) {\r\n          const getPlayoffTableData = document.querySelectorAll(\r\n            \"#teamPlayerPlayoffTable td[class='w3-yellow']\"\r\n          );\r\n          getPlayoffSelectedField = getPlayoffTableData[0].dataset.fieldName;\r\n        } else {\r\n          getPlayoffSelectedField = \"Points\";\r\n        }\r\n        // 7th argument\r\n        let getCombinedSelectedField;\r\n        if (getTeamPlayerCombinedTable.length > 0) {\r\n          const getCombinedTableData = document.querySelectorAll(\r\n            \"#teamPlayerCombinedTable td[class='w3-yellow']\"\r\n          );\r\n          getCombinedSelectedField = getCombinedTableData[0].dataset.fieldName;\r\n        } else {\r\n          getCombinedSelectedField = \"Points\";\r\n        }\r\n        getTeamsPlayersPerSeason(\r\n          false,\r\n          team,\r\n          seasonNumber,\r\n          getSeasonSelectedField,\r\n          getPlayoffSelectedField,\r\n          getCombinedSelectedField\r\n        );\r\n      }\r\n}\r\n\r\n  export default resizeEventMethod;","function getTeams3dColorScheme(mainColor, colorParts){\r\n    let teams3dColorScheme;\r\n    const colorPartsLength = colorParts.length;\r\n    switch(colorPartsLength){\r\n        case 3:\r\n            teams3dColorScheme = `#${colorParts[2]}`\r\n            return teams3dColorScheme\r\n        case 4:\r\n            teams3dColorScheme = `linear-gradient(to right, #${colorParts[2]} 50%, #${colorParts[3]} 51%)`\r\n            return teams3dColorScheme\r\n        case 5:\r\n            teams3dColorScheme = `linear-gradient(to right, #${colorParts[2]} 35%, #${colorParts[3]} 36% 64%, #${colorParts[4]} 65%)`\r\n            return teams3dColorScheme\r\n            default:\r\n            return `#${mainColor}`\r\n    }\r\n}\r\n\r\nexport default getTeams3dColorScheme;","function parseStringToDOM(htmlString){\r\n    const parser = new DOMParser();\r\n    const parsedCssLogo = parser.parseFromString(htmlString, 'text/html');\r\n    const parsedHTML = parsedCssLogo.body.firstChild;\r\n\r\n    return parsedHTML;\r\n}\r\n\r\nexport default parseStringToDOM;","import { TeamPlayers } from \"../../constants/masterHaxData\";\r\nimport teamsMAP from \"../var_lib/maps/teams/teamsMAP\";\r\nimport currentSeason from \"../var_lib/season/currentSeason\";\r\nimport playersNumMAP from \"../var_lib/maps/players/playersNumMAP\";\r\nimport eachTeamObjectMAP from \"../var_lib/maps/teams/eachTeamObjectMAP\";\r\n\r\n  \r\n  export default function setPlayersTableBgColor(seasonNumber = currentSeason) {\r\n    let playerRow = document.querySelectorAll(\"td[data-field-name='Name']\");\r\n    if (seasonNumber > 0) {\r\n      let thisSeasonNumbersRecords = TeamPlayers.filter(\r\n        (item) => item.SeasonNumber == seasonNumber\r\n      );\r\n      playerRow.forEach((item) => {\r\n        let playersName = item.textContent;\r\n        let playersID = playersNumMAP.get(playersName);\r\n        let playersTeamRecord = thisSeasonNumbersRecords.filter(\r\n          (item) => item.PlayerID == playersID\r\n        );\r\n        let playersTeam = +playersTeamRecord[0].TeamID;\r\n        let playersTeamName = teamsMAP.get(playersTeam);\r\n        item.style.backgroundColor = `#${\r\n          eachTeamObjectMAP.get(playersTeamName).MainColor\r\n        }`;\r\n        item.style.color = \"white\";\r\n      });\r\n    } else {\r\n      playerRow.forEach((item) => {\r\n        let playersName = item.textContent;\r\n        let playersID = playersNumMAP.get(playersName);\r\n        let playersTeams = TeamPlayers.filter(\r\n          (item) => item.PlayerID == playersID\r\n        );\r\n        playersTeams.sort((a, b) => a.SeasonNumber - b.SeasonNumber);\r\n        let getPlayersMostRecentSeasonsRecord =\r\n          playersTeams[playersTeams.length - 1];\r\n        if (+getPlayersMostRecentSeasonsRecord.SeasonNumber == currentSeason) {\r\n          let playersMostRecentTeam = getPlayersMostRecentSeasonsRecord.TeamID;\r\n          let playersTeamName = teamsMAP.get(+playersMostRecentTeam);\r\n          item.style.backgroundColor = `#${\r\n            eachTeamObjectMAP.get(playersTeamName).MainColor\r\n          }`;\r\n          item.style.color = \"white\";\r\n        }\r\n      });\r\n    }\r\n  }","import sortTable from \"./sortTable\";\r\nimport setTeamsTableBgColor from \"./setTeamsTableBgColor\";\r\nimport { TABLE_BREAK_POINT } from \"../../constants/consts/vars\";\r\n\r\nexport default function screenResize() {\r\n// if on boxscore page that has players table just return and exit \r\nconst boxscorePlayerStats = document.getElementById(\"boxscorePlayerStats\");\r\nif (boxscorePlayerStats) {\r\n  return;\r\n}\r\n\r\n  // insert fetch data function onto <TD> elements in mobile view\r\n  const screenSize = window.innerWidth;\r\n  const teamPlayersDataSource = document.getElementById(\"playerStatsBackButton\");\r\n  if (!teamPlayersDataSource) {\r\n    const regularScreen = document.querySelectorAll(\"#tablesDiv table th\");\r\n    const mobileTableData = document.querySelectorAll(\"#tablesDiv table td\");\r\n    if (screenSize < TABLE_BREAK_POINT) {\r\n      mobileTableData.forEach((item) =>\r\n        item.addEventListener(\"click\", sortTable)\r\n      );\r\n      setTeamsTableBgColor();\r\n    } else {\r\n      regularScreen.forEach((item) =>\r\n        item.addEventListener(\"click\", sortTable)\r\n      );\r\n    }\r\n  }\r\n}\r\n","import eachTeamObjectMAP from \"../var_lib/maps/teams/eachTeamObjectMAP\";\r\n\r\nexport default function setTeamsTableBgColor() {\r\n  const teamColumn = document.querySelectorAll(\"td[data-field-name='Team']\");\r\n  teamColumn.forEach((item) => {\r\n    item.style.backgroundColor = `#${\r\n      eachTeamObjectMAP.get(item.textContent).MainColor\r\n    }`;\r\n    item.style.color = \"white\";\r\n  });\r\n}","import setTableListeners from \"../listeners/listenerHelpers/setTableListeners\";\r\nimport tableDataSource from \"../var_lib/maps/tableDataSourceMAP\";\r\nimport tableFields from \"../var_lib/maps/tableFieldsMAP\";\r\nimport createTable from \"../tables/createTable\";\r\n\r\nexport default function sortTable(event) {\r\n    let seasonNumber = event.target.dataset.seasonNumber;\r\n    let caption = document.querySelector(\"table caption > h1\");\r\n    let tableName = caption.textContent;\r\n    let dataName = event.target.dataset.dataSource;\r\n    let data = tableDataSource.get(dataName);\r\n    let color = \"w3-yellow\";\r\n    let sortBy = event.target.dataset.fieldName;\r\n    let arrayName = event.target.dataset.arraySource;\r\n    let arraySource = tableFields.get(arrayName);\r\n    createTable(\r\n      seasonNumber,\r\n      tableName,\r\n      dataName,\r\n      data,\r\n      color,\r\n      sortBy,\r\n      arrayName,\r\n      arraySource\r\n    );\r\n    setTableListeners();\r\n  }","function teamSorting(inputArray, category){\r\n    if(category == \"Points\"){\r\n      \r\n        inputArray.sort((a, b) =>{\r\n          const pointStandings = b.get(category) - a.get(category)\r\n          \r\n        // if points are not tied then return\r\n        if(pointStandings !== 0){\r\n          return pointStandings;\r\n        }\r\n  \r\n        // if points are tied then add sort by less games played\r\n  \r\n        const gamesPlayedStandings = a.get('GP') - b.get('GP');\r\n  \r\n        if(gamesPlayedStandings !== 0){\r\n          return gamesPlayedStandings\r\n        }\r\n  \r\n        // if points and games played tied sort by goal differential\r\n  \r\n        const goalDifference = b.get('GD') - a.get('GD');\r\n  \r\n        if(goalDifference !== 0){\r\n          return goalDifference\r\n        }\r\n  \r\n      });\r\n      return inputArray\r\n    }\r\n   return inputArray.sort((a, b) => b.get(category) - a.get(category));\r\n}\r\n\r\nexport default teamSorting;","function playerSorting(inputArray, category){\r\n    if(category == \"Points\"){\r\n        inputArray.sort((a, b) =>{\r\n          const pointStandings = b.get(category) - a.get(category)\r\n\r\n                // if points are not tied then return\r\n      if(pointStandings !== 0){\r\n        return pointStandings;\r\n      }\r\n\r\n            // if points are tied then add sort by less games played\r\n\r\n            const gamesPlayedStandings = a.get('GP') - b.get('GP');\r\n\r\n            if(gamesPlayedStandings !== 0){\r\n              return gamesPlayedStandings\r\n            }\r\n\r\n            // if points and games played tied sort by goals scored\r\n\r\n            const goalsScored = b.get('Goals') - a.get('Goals');\r\n\r\n            if(goalsScored !== 0){\r\n              return goalsScored\r\n            }\r\n\r\n            // final sort by shots on goal\r\n\r\n            const shotsOnGoal = b.get('ShotsOnGoal') - a.get('ShotsOnGoal');\r\n\r\n            if(shotsOnGoal !== 0){\r\n              return shotsOnGoal\r\n            }\r\n        })\r\n        return inputArray;\r\n      }\r\n\r\n      if(category == \"Shooting%\"){\r\n        return inputArray.sort((a,b) => parseFloat(b.get(category)) - parseFloat(a.get(category)))\r\n      }\r\n\r\n      return inputArray.sort((a, b) => b.get(category) - a.get(category));\r\n}\r\n\r\nexport default playerSorting;","// used to sort tabular data from both teams and players objects\r\nimport teamSorting from \"./helpers/teamSorting\";\r\nimport playerSorting from \"./helpers/playerSorting\";\r\n\r\nexport default function sortGroupedStats(inputArray, category) {\r\n  // this for sorting team standings. player tables don't have team key\r\n  if(inputArray[0].has('Team')){\r\n    return teamSorting(inputArray, category)\r\n  }\r\n  \r\n      // this for sorting player tables as teams don't have assists key\r\n    if(inputArray[0].has('Assists')) {\r\n      return playerSorting(inputArray, category)\r\n    }\r\n}\r\n","export default function clearScoreboardDiv() {\r\n    let scoreboardDiv = document.getElementById(\"scoreboardDiv\");\r\n    scoreboardDiv.style.display = \"\";\r\n    scoreboardDiv.style.flexDirection = \"\";\r\n    scoreboardDiv.style.alignItems = \"\";\r\n    scoreboardDiv.innerHTML = \"\";\r\n  }","export default function getScoreboardDiv() {\r\n    const scoreboardDiv = document.getElementById(\"scoreboardDiv\");\r\n    return scoreboardDiv;\r\n  }","import IndividualPlayerStats from \"../classFiles/players/individualPlayerStats\";\r\nimport { GameResults } from \"../../constants/masterHaxData\";\r\nimport seasonCount from \"../var_lib/season/seasonCount\";\r\nimport playersMAP from \"../var_lib/maps/players/playersMAP\";\r\nimport gameTypeMAP from \"../var_lib/maps/gameType/gameTypeMAP\"\r\nimport { playerStatsFields, allTimeStatsArray, allTimeStatsMAPS, groupedAllTimePlayerStats, perSeasonCats, perSeasonCatMAPS } from \"../../constants/consts/supportVars\";\r\n\r\n// IndividualPlayerStats is the class each players' object creation\r\n// allPLayersStats (object) is the container holding each players' object\r\n// IndividualPlayerStats.allPlayersStats(<playerName>) is how to get within any players' own object\r\n// --------------------\r\n//    \"groupPlayersAllTimeStats\", \"groupPlayersAllTimeSeasonStats\",\r\n// \"groupPlayersAllTimePlayoffStats\", are static arrays for the class which hold each players'\r\n// MAPS that have each players' all time stats reduced and ready for table display\r\n// --------------------\r\n//    \"groupPlayersSeason<number> followed with either <CombinedStats>,<SeasonStats> or <PlayoffStats>,\r\n// are static arrays for the class which hold each players'\r\n// MAPS that have each players' all time stats reduced and ready for table display\r\n// --------------------\r\n// Each players' own object contains various arrays and MAPS that are both \"allTime\" and \"per season\"\r\n// which the array holds each record that the player is directly in and MAPS which reduce the arrays\r\n// into single totals ready to be displayed in table form\r\n// --------------------\r\n// sortGroupedPlayerStats(<arrayName>, <fieldName>) is function to sort the static class arrays containing\r\n// each players' MAPS by category.\r\n// SORT EXAMPLE\r\n// sortGroupedPlayerStats(\r\n//   IndividualPlayerStats[groupedAllTimePlayerStats[i]],\r\n//   \"Points\" // change sort category here\r\n// );\r\n\r\nconst gameResultsLength = GameResults.length;\r\nconst seasonCountLength = seasonCount.length;\r\n\r\n// instantiating the class and all related objects\r\nIndividualPlayerStats.setPerSeasonAllTimeContainers(seasonCountLength);\r\nfor (let i = 1; i <= playersMAP.size; i++) {\r\n  IndividualPlayerStats.allPlayersStats[playersMAP.get(i)] =\r\n  new IndividualPlayerStats(playersMAP.get(i));\r\n  \r\n  IndividualPlayerStats.allPlayersStats[\r\n    playersMAP.get(i)\r\n  ].setPlayersAllTimeStats(\r\n    \"allTimeStats\",\r\n    \"allTimeSeasonStats\",\r\n    \"allTimePlayoffStats\"\r\n  );\r\n}\r\n// all time MAPS for each player\r\nfor (let i = 1; i <= playersMAP.size; i++) {\r\n  for (let j = 0; j < allTimeStatsArray.length; j++) {\r\n    for (let k = 0; k < playerStatsFields.length; k++) {\r\n      IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n        allTimeStatsMAPS[j]\r\n      ].set(\r\n        playerStatsFields[k],\r\n        IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n          allTimeStatsArray[j]\r\n        ]\r\n          .map((item) => Number(item[playerStatsFields[k]]))\r\n          .reduce((current, adjusted) => current + adjusted, 0)\r\n      );\r\n    }\r\n    IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n      allTimeStatsMAPS[j]\r\n    ].set(\r\n      \"GP\",\r\n      IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n        allTimeStatsArray[j]\r\n      ].length\r\n    );\r\n    IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n      allTimeStatsMAPS[j]\r\n    ].set(\r\n      \"Points\",\r\n      IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n        allTimeStatsMAPS[j]\r\n      ].get(\"Assists\") +\r\n        IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n          allTimeStatsMAPS[j]\r\n        ].get(\"Goals\")\r\n    );\r\n\r\n    // prevent 0/0 if goals and shots on goal are both zeros\r\n    if(\r\n      IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n        allTimeStatsMAPS[j]\r\n      ].get(\"Goals\") &&\r\n      IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n        allTimeStatsMAPS[j]\r\n      ].get(\"ShotsOnGoal\") !== 0\r\n    ){\r\n      IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n        allTimeStatsMAPS[j]\r\n      ].set(\r\n        \"Shooting%\",\r\n        Math.round(\r\n        (\r\n        IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n          allTimeStatsMAPS[j]\r\n        ].get(\"Goals\") / \r\n        IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n          allTimeStatsMAPS[j]\r\n        ].get(\"ShotsOnGoal\")\r\n      )*100\r\n    ) + \"%\"\r\n      );\r\n    }else{\r\n      IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n        allTimeStatsMAPS[j]\r\n      ].set(\r\n        \"Shooting%\",\r\n        \"0%\"\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n// update each players stats to includes those that had to step in to play for another team.\r\n\r\n// loop through player objects and find those that begin with double star (**) as this indicates \r\n// those players who have played for another team during a single season\r\nfor (let playersName in IndividualPlayerStats.allPlayersStats){\r\n  // extract players alternate name\r\n  if(playersName[0] && playersName[1] === \"*\"){\r\n    // get players main user name\r\n    const playersMainName = playersName.slice(2);\r\n    // for each alternate players games push them into players all time main stats\r\n    // this will be alltime for all, season, and playoffs \r\n    for(let i = 0; i < allTimeStatsArray.length; i++){\r\n        for(let j = 0; j < IndividualPlayerStats.allPlayersStats[playersName][allTimeStatsArray[i]].length; j++){\r\n          IndividualPlayerStats.allPlayersStats[playersMainName][allTimeStatsArray[i]].push(\r\n            IndividualPlayerStats.allPlayersStats[playersName][allTimeStatsArray[i]][j]\r\n          )\r\n        }\r\n    }\r\n\r\n    // update the players all time maps which produces that players stats such as goals, pts, games played etc...\r\n    for (let j = 0; j < allTimeStatsArray.length; j++) {\r\n      for (let k = 0; k < playerStatsFields.length; k++) {\r\n        IndividualPlayerStats.allPlayersStats[playersMainName][\r\n          allTimeStatsMAPS[j]\r\n        ].set(\r\n          playerStatsFields[k],\r\n          IndividualPlayerStats.allPlayersStats[playersMainName][\r\n            allTimeStatsArray[j]\r\n          ]\r\n            .map((item) => Number(item[playerStatsFields[k]]))\r\n            .reduce((current, adjusted) => current + adjusted, 0)\r\n        );\r\n      }\r\n      IndividualPlayerStats.allPlayersStats[playersMainName][\r\n        allTimeStatsMAPS[j]\r\n      ].set(\r\n        \"GP\",\r\n        IndividualPlayerStats.allPlayersStats[playersMainName][\r\n          allTimeStatsArray[j]\r\n        ].length\r\n      );\r\n      IndividualPlayerStats.allPlayersStats[playersMainName][\r\n        allTimeStatsMAPS[j]\r\n      ].set(\r\n        \"Points\",\r\n        IndividualPlayerStats.allPlayersStats[playersMainName][\r\n          allTimeStatsMAPS[j]\r\n        ].get(\"Assists\") +\r\n          IndividualPlayerStats.allPlayersStats[playersMainName][\r\n            allTimeStatsMAPS[j]\r\n          ].get(\"Goals\")\r\n      );\r\n      // prevent 0/0 if goals and shots on goal are both zeros\r\n      if(\r\n        IndividualPlayerStats.allPlayersStats[playersMainName][\r\n          allTimeStatsMAPS[j]\r\n        ].get(\"Goals\") &&\r\n        IndividualPlayerStats.allPlayersStats[playersMainName][\r\n          allTimeStatsMAPS[j]\r\n        ].get(\"ShotsOnGoal\") !== 0\r\n      ){\r\n        IndividualPlayerStats.allPlayersStats[playersMainName][\r\n          allTimeStatsMAPS[j]\r\n        ].set(\r\n          \"Shooting%\",\r\n          Math.round(\r\n            (\r\n              IndividualPlayerStats.allPlayersStats[playersMainName][\r\n                allTimeStatsMAPS[j]\r\n              ].get(\"Goals\") /\r\n                IndividualPlayerStats.allPlayersStats[playersMainName][\r\n                  allTimeStatsMAPS[j]\r\n                ].get(\"ShotsOnGoal\")\r\n            )*100\r\n          ) + \"%\"\r\n        );\r\n      }else{\r\n        IndividualPlayerStats.allPlayersStats[playersMainName][\r\n          allTimeStatsMAPS[j]\r\n        ].set(\r\n          \"Shooting%\",\r\n          \"0%\"\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n// finally sort the all games array by order of gameID.\r\nIndividualPlayerStats.allPlayersStats['Skills324']['allTimeStats'].sort((a, b) => {\r\n  return a.GameID - b.GameID\r\n})\r\n\r\n// loop that fills each players seasons stats per each season\r\n// array for specific season, that seasons playoff and also combined season and playoffs\r\n\r\n// if (seasonCount.length > 1) {\r\n//array for combined season and playoffs\r\n\r\nfor (let i = 1; i <= playersMAP.size; i++) {\r\n  let playersSeasonAppearances =\r\n    IndividualPlayerStats.allPlayersStats[playersMAP.get(i)].seasonsPlayed;\r\n  for (let j = 0; j < playersSeasonAppearances.length; j++) {\r\n    IndividualPlayerStats.allPlayersStats[\r\n      playersMAP.get(i)\r\n    ].allTimeStats.forEach((item) => {\r\n      for (let k = 0; k < gameResultsLength; k++) {\r\n        if (\r\n          item.GameID == GameResults[k].GameID &&\r\n          GameResults[k].SeasonNumber == playersSeasonAppearances[j]\r\n        )\r\n          IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n            \"playersSeason\" + playersSeasonAppearances[j] + \"CombinedStats\"\r\n          ].push(item);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n// array for specific for season and seperately playoff\r\n\r\nfor (let i = 1; i <= playersMAP.size; i++) {\r\n  let playersSeasonAppearances =\r\n    IndividualPlayerStats.allPlayersStats[playersMAP.get(i)].seasonsPlayed;\r\n  for (let j = 0; j < playersSeasonAppearances.length; j++) {\r\n    IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n      \"playersSeason\" + playersSeasonAppearances[j] + \"CombinedStats\"\r\n    ].forEach((item) => {\r\n      for (let k = 0; k < gameResultsLength; k++) {\r\n        if (\r\n          item.GameID == GameResults[k].GameID &&\r\n          GameResults[k].SeasonNumber == playersSeasonAppearances[j] &&\r\n          gameTypeMAP.get(Number(GameResults[k].GameTypeID)) == \"Playoff\"\r\n        )\r\n          IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n            \"playersSeason\" + playersSeasonAppearances[j] + \"PlayoffStats\"\r\n          ].push(item);\r\n        if (\r\n          item.GameID == GameResults[k].GameID &&\r\n          GameResults[k].SeasonNumber == playersSeasonAppearances[j] &&\r\n          gameTypeMAP.get(Number(GameResults[k].GameTypeID)) == \"Season\"\r\n        )\r\n          IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n            \"playersSeason\" + playersSeasonAppearances[j] + \"SeasonStats\"\r\n          ].push(item);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n//////////////////////Individual player season MAPS\r\nfor (let i = 1; i <= playersMAP.size; i++) {\r\n  let seasonsPlayedIn =\r\n    IndividualPlayerStats.allPlayersStats[playersMAP.get(i)].seasonsPlayed;\r\n  for (let j = 0; j < seasonsPlayedIn.length; j++) {\r\n    for (let l = 0; l < perSeasonCatMAPS.length; l++) {\r\n      for (let k = 0; k < playerStatsFields.length; k++) {\r\n        IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n          \"playersSeason\" + seasonsPlayedIn[j] + perSeasonCatMAPS[l]\r\n        ].set(\r\n          playerStatsFields[k],\r\n          IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n            \"playersSeason\" + seasonsPlayedIn[j] + perSeasonCats[l]\r\n          ]\r\n            .map((item) => Number(item[playerStatsFields[k]]))\r\n            .reduce((current, adjusted) => current + adjusted, 0)\r\n        );\r\n      }\r\n      IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n        \"playersSeason\" + seasonsPlayedIn[j] + perSeasonCatMAPS[l]\r\n      ].set(\r\n        \"GP\",\r\n        IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n          \"playersSeason\" + seasonsPlayedIn[j] + [perSeasonCats[l]]\r\n        ].length\r\n      );\r\n      IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n        \"playersSeason\" + seasonsPlayedIn[j] + perSeasonCatMAPS[l]\r\n      ].set(\r\n        \"Points\",\r\n        IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n          \"playersSeason\" + seasonsPlayedIn[j] + perSeasonCatMAPS[l]\r\n        ].get(\"Assists\") +\r\n          IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n            \"playersSeason\" + seasonsPlayedIn[j] + perSeasonCatMAPS[l]\r\n          ].get(\"Goals\")\r\n      );\r\n      // prevent 0/0 if goals and shots on goal are both zeros\r\n      if(\r\n        IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n          \"playersSeason\" + seasonsPlayedIn[j] + perSeasonCatMAPS[l]\r\n        ].get(\"Goals\") &&\r\n        IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n          \"playersSeason\" + seasonsPlayedIn[j] + perSeasonCatMAPS[l]\r\n        ].get(\"ShotsOnGoal\")\r\n        !== 0\r\n      ){\r\n        IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n          \"playersSeason\" + seasonsPlayedIn[j] + perSeasonCatMAPS[l]\r\n        ].set(\r\n          \"Shooting%\",\r\n          Math.round(\r\n            (\r\n              IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n                \"playersSeason\" + seasonsPlayedIn[j] + perSeasonCatMAPS[l]\r\n              ].get(\"Goals\") /\r\n                IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n                  \"playersSeason\" + seasonsPlayedIn[j] + perSeasonCatMAPS[l]\r\n                ].get(\"ShotsOnGoal\")\r\n            )*100\r\n          ) + \"%\"\r\n        );\r\n      }\r\n      else {\r\n        IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n          \"playersSeason\" + seasonsPlayedIn[j] + perSeasonCatMAPS[l]\r\n        ].set(\r\n          \"Shooting%\",\r\n          \"0%\"\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n// } // end of if season is greater than 1\r\n////////////BEGIN of populating arrays for tabular style data. All time and per season with varying modes. (alltime, season and playoffs)\r\n// copying allPlayerStats objects contents into array form in order to use array functionality\r\nfor (let i = 1; i <= playersMAP.size; i++) {\r\n  IndividualPlayerStats.playerStatsProfile.push(\r\n    IndividualPlayerStats.allPlayersStats[playersMAP.get(i)]\r\n  );\r\n}\r\n\r\n// seperating playerStatsProfile array (each player) into allTime, Season and Playoff arrays\r\nIndividualPlayerStats.playerStatsProfile.forEach((item) => {\r\n  for (let i = 0; i < groupedAllTimePlayerStats.length; i++) {\r\n    item[allTimeStatsMAPS[i]].set(\"Name\", item.name); // MAP needs name to associate who owns the stats\r\n    IndividualPlayerStats[groupedAllTimePlayerStats[i]].push(\r\n      item[allTimeStatsMAPS[i]]\r\n    );\r\n  }\r\n});\r\n\r\n// seperating playerStatsProfile array (each player) into per each Season stats ready for tabular data\r\nif (seasonCount.length > 1) {\r\n  for (let i = 1; i <= playersMAP.size; i++) {\r\n    let seasonsPlayedIn =\r\n      IndividualPlayerStats.allPlayersStats[playersMAP.get(i)].seasonsPlayed;\r\n    for (let j = 0; j < seasonsPlayedIn.length; j++) {\r\n      for (let k = 0; k < perSeasonCats.length; k++) {\r\n        IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n          \"playersSeason\" + seasonsPlayedIn[j] + [perSeasonCatMAPS[k]]\r\n        ].set(\"Name\", playersMAP.get(i));\r\n        IndividualPlayerStats[\r\n          \"groupPlayersSeason\" + seasonsPlayedIn[j] + [perSeasonCats[k]]\r\n        ].push(\r\n          IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\r\n            \"playersSeason\" + seasonsPlayedIn[j] + [perSeasonCatMAPS[k]]\r\n          ]\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// adjust shooting % for players who played in season one.\r\n// there is no shots on goal data so subtract goals from first season\r\n// shooting % is actually for seasons 2 onwards\r\nfor (let i = 1; i <= playersMAP.size; i++){\r\n  const seasonsPlayed = IndividualPlayerStats.allPlayersStats[playersMAP.get(i)][\"seasonsPlayed\"]\r\n  const player = IndividualPlayerStats.allPlayersStats[playersMAP.get(i)]\r\n  if(seasonsPlayed.includes(1) && seasonsPlayed.some(season => season != 1)){\r\n  for(let j = 0; j < allTimeStatsArray.length; j++){\r\n    const allTimeGoals = player[allTimeStatsMAPS[j]].get(\"Goals\");\r\n    const allTimeShotsOngoal = player[allTimeStatsMAPS[j]].get(\"ShotsOnGoal\");\r\n    const firstSeasonGoals = player[\"playersSeason1\" + perSeasonCatMAPS[j]].get(\"Goals\");\r\n    player[allTimeStatsMAPS[j]].set(\"Shooting%\", \r\n      Math.round(\r\n        (\r\n          (allTimeGoals - firstSeasonGoals)/allTimeShotsOngoal\r\n        )*100\r\n      ) + \"%\"\r\n    )\r\n  }\r\n  }\r\n}\r\n// EXPORTS\r\n\r\nexport default IndividualPlayerStats;","import TeamStats from \"../classFiles/teams/teamStats\";\r\nimport teamsMAP from \"../var_lib/maps/teams/teamsMAP\";\r\nimport gameTypeMAP from \"../var_lib/maps/gameType/gameTypeMAP\";\r\nimport seasonCount from \"../var_lib/season/seasonCount\";\r\nimport { allTimeStatsArray, allTimeStatsMAPS, statsType } from \"../../constants/consts/supportVars\";\r\n\r\nconst seasonCountLength = seasonCount.length;\r\n\r\n// TeamStats is the class for team object creation\r\n// allTeamStats (object) is the container holding each teams' object\r\n// TeamStats.allTeamStats[<teamName>] is how to get within any teams' own object\r\n\r\n// --------------------\r\n// place TeamStats in front of the following\r\n// \"groupTeamsAllTimeStats\", \"groupTeamsAllTimeSeasonStats\",\r\n// \"groupTeamsAllTimePlayoffStats\", are static arrays for the class which hold each teams'\r\n// MAPS that have each teams' all time stats reduced and ready for table display\r\n// --------------------\r\n// \"groupTeamsSeason<seasonNumber>\" followed either <CombinedStats>,<SeasonStats> or <PlayoffStats>\r\n// are static arrays for the class which hold each teams' MAPS\r\n// that have each teams' stats reduced per each season which is ready for table display\r\n// --------------------\r\n// sortGroupedTeamStats(<arrayName>, <fieldName>) is function to sort the static class arrays containing\r\n// each teams' MAPS by category.\r\n// SORT EXAMPLE\r\n// sortGroupedTeamStats(\r\n//   TeamStats[groupedAllTimeTeamStats[i]], // [groupedAllTimeTeamStats[i]] is a destructed array variable\r\n//   \"Losses\" // change sort category here\r\n// );\r\n\r\n// create proper arrays for holding team MAPS for when more than one season is played\r\nTeamStats.setPerSeasonAllTimeContainers();\r\n// INSTANTIATE team objects\r\n// create objects for each team\r\nfor (let i = 1; i <= teamsMAP.size; i++) {\r\n  TeamStats.allTeamStats[teamsMAP.get(i)] = new TeamStats(teamsMAP.get(i));\r\n  \r\n  // set arrays with each teams game data\r\n  TeamStats.allTeamStats[teamsMAP.get(i)].setTeamsAllTimeStats(\r\n    \"allTimeStats\",\r\n    \"allTimeSeasonStats\",\r\n    \"allTimePlayoffStats\"\r\n  );\r\n\r\n  // set grouped all time class MAPS data for each team\r\n  for (let j = 0; j < allTimeStatsArray.length; j++) {\r\n    TeamStats.allTeamStats[teamsMAP.get(i)].setTeamsAllTimeStatsMAPS(\r\n      allTimeStatsArray[j],\r\n      allTimeStatsMAPS[j]\r\n    );\r\n  }\r\n}\r\n\r\n// END of team object creation\r\n\r\nTeamStats.setGroupedAllTimeArrays(); // populates the class arrays with team MAPS grouping for display of data in tabular form\r\n\r\n// loop that fills each team's seasons combined stats array per each season number\r\n\r\n//array for combined season and playoffs\r\nfor (let i = 1; i <= teamsMAP.size; i++) {\r\n  //     for (let j = 0; j < seasonCountLength; j++) { THIS WAS OLD FOR\r\n  for (\r\n    let j = 0;\r\n    j < TeamStats.allTeamStats[teamsMAP.get(i)].seasonsPlayedLength;\r\n    j++\r\n  ) {\r\n    TeamStats.allTeamStats[teamsMAP.get(i)][\r\n      \"teamsSeason\" +\r\n        TeamStats.allTeamStats[teamsMAP.get(i)].seasonsPlayed[j] +\r\n        \"CombinedStats\"\r\n    ].push(\r\n      TeamStats.allTeamStats[teamsMAP.get(i)].allTimeStats.filter(\r\n        (item) =>\r\n          item.SeasonNumber ==\r\n          TeamStats.allTeamStats[teamsMAP.get(i)].seasonsPlayed[j]\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\n// loop that fills each team's seasons regular season and playoff stats array\r\n\r\n// arrays for regular season and playoffs per each season\r\nfor (let i = 1; i <= teamsMAP.size; i++) {\r\n  for (\r\n    let j = 0;\r\n    j < TeamStats.allTeamStats[teamsMAP.get(i)].seasonsPlayedLength;\r\n    j++\r\n  ) {\r\n    // teamsSeason # SeasonStats poulation\r\n    TeamStats.allTeamStats[teamsMAP.get(i)][\r\n      \"teamsSeason\" +\r\n        TeamStats.allTeamStats[teamsMAP.get(i)].seasonsPlayed[j] +\r\n        \"SeasonStats\"\r\n    ].push(\r\n      TeamStats.allTeamStats[teamsMAP.get(i)].allTimeStats.filter(\r\n        // filter the teams all time array\r\n        (item) =>\r\n          item.SeasonNumber ==\r\n            TeamStats.allTeamStats[teamsMAP.get(i)].seasonsPlayed[j] &&\r\n          gameTypeMAP.get(Number(item.GameTypeID)) == \"Season\"\r\n      )\r\n    );\r\n    // teamsSeason # PlayoffStats poulation\r\n    TeamStats.allTeamStats[teamsMAP.get(i)][\r\n      \"teamsSeason\" +\r\n        TeamStats.allTeamStats[teamsMAP.get(i)].seasonsPlayed[j] +\r\n        \"PlayoffStats\"\r\n    ].push(\r\n      TeamStats.allTeamStats[teamsMAP.get(i)].allTimeStats.filter(\r\n        // filter the teams all time array\r\n        (item) =>\r\n          item.SeasonNumber ==\r\n            TeamStats.allTeamStats[teamsMAP.get(i)].seasonsPlayed[j] &&\r\n          gameTypeMAP.get(Number(item.GameTypeID)) == \"Playoff\"\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\n// loop that fills each teams individual seasons MAPS\r\n\r\nfor (let i = 1; i <= teamsMAP.size; i++) {\r\n  TeamStats.allTeamStats[teamsMAP.get(i)].seasonsPlayed.forEach((item) => {\r\n    for (let k = 0; k < statsType.length; k++) {\r\n      TeamStats.allTeamStats[\r\n        teamsMAP.get(i)\r\n      ].setTeamsIndividualSeasonsStatsMAPS(\r\n        `teamsSeason${item}${statsType[k]}`, // input array\r\n        `teamsSeason${item}${statsType[k]}MAP`, // output MAP\r\n        Number(item) // season number\r\n      );\r\n    }\r\n  });\r\n}\r\n\r\n// loop that fills static arrays containing per season team stats for tabular data as per season\r\nfor (let i = 1; i <= teamsMAP.size; i++) {\r\n  for (let j = 1; j <= seasonCountLength; j++) {\r\n    if (\r\n      TeamStats.allTeamStats[teamsMAP.get(i)].seasonsPlayed.includes(j)\r\n    ) {\r\n      for (let k = 0; k < statsType.length; k++) {\r\n        TeamStats[\"groupTeamsSeason\" + j + statsType[k]].push(\r\n          TeamStats.allTeamStats[teamsMAP.get(i)][\r\n            \"teamsSeason\" + j + statsType[k] + \"MAP\"\r\n          ]\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default TeamStats ;","function closeSidebar() {\r\n    document.getElementById(\"sidebar\").style.display = \"none\";\r\n  }\r\n\r\nexport default closeSidebar;","import hidePlayerSubMenu from \"./players/hidePlayerSubMenu\";\r\nimport hideTeamSubMenu from \"./teams/hideTeamSubMenu\"\r\n\r\nexport default function hideAllSubMenus() {\r\n    hideTeamSubMenu();\r\n    hidePlayerSubMenu();\r\n  }","function openSidebar() {\r\n    document.getElementById(\"sidebar\").style.display = \"block\";\r\n  }\r\n\r\nexport default openSidebar;","const playersTables = document.querySelectorAll(\".playerTable\");\r\n\r\nexport default function displayPlayerSubMenu() {\r\n  playersTables.forEach((item) => {\r\n    item.classList.toggle(\"w3-hide\");\r\n    item.classList.toggle(\"w3-yellow\", !item.classList.contains(\"w3-hide\"));\r\n  });\r\n}","const playersTables = document.querySelectorAll(\".playerTable\");\r\n\r\nexport default function hidePlayerSubMenu() {\r\n    playersTables.forEach((item) => item.classList.add(\"w3-hide\"));\r\n  }","const teamsTables = document.querySelectorAll(\".teamTable\");\r\n\r\nexport default function displayTeamSubMenu() {\r\n  teamsTables.forEach((item) => {\r\n    item.classList.toggle(\"w3-hide\");\r\n    item.classList.toggle(\"w3-yellow\", !item.classList.contains(\"w3-hide\"));\r\n  });\r\n}","const teamsTables = document.querySelectorAll(\".teamTable\");\r\n\r\nexport default function hideTeamSubMenu() {\r\n    teamsTables.forEach((item) => item.classList.add(\"w3-hide\"));\r\n  }","export default function clearTablesDiv() {\r\n    let previousData = document.getElementById(\"tablesDiv\");\r\n    previousData.innerHTML = \"\";\r\n  }","import sortGroupedStats from \"../misc/sorting/sort\";\r\nimport closeSidebar from \"../sidebar/closeSidebar\";\r\nimport clearScoreboardDiv from \"../scoreboard/clearScoreboardDiv\";\r\nimport getTablesDiv from \"./getTablesDiv\";\r\nimport setPlayersTableBgColor from \"../misc/playerTableBgColor\";\r\nimport setTeamsTableBgColor from \"../misc/setTeamsTableBgColor\";\r\nimport eachTeamObjectMAP from \"../var_lib/maps/teams/eachTeamObjectMAP\"\r\nimport { TABLE_BREAK_POINT, SEASON_WITH_TEAM_LOGOS_START } from \"../../constants/consts/vars\";\r\nimport { Teams, TeamPlayers } from \"../../constants/masterHaxData\";\r\nimport playersNumMAP from \"../var_lib/maps/players/playersNumMAP\"\r\nimport currentSeason from \"../var_lib/season/currentSeason\";\r\n\r\nexport default function createTable(\r\n    seasonNumber,\r\n    tableName,\r\n    dataSourceName,\r\n    dataSource,\r\n    color,\r\n    sortBy = \"Points\",\r\n    fieldsArrayName,\r\n    ...fieldsArray\r\n  ) {\r\n    sortGroupedStats(dataSource, sortBy);\r\n    const tableHeaders = fieldsArray[0];\r\n    const fieldsLength = fieldsArray[0].length; // named array of fields previously made\r\n    const isOTW = tableHeaders.includes(\"OTW\"); // checks for if any given season has tie games or extra time\r\n    let screenedDataSource;\r\n    // check if dataSource is a teams table\r\n    const isTeamTable = dataSourceName.includes(\"TeamStats\");\r\n    // check if dataSource is a player table\r\n    const isPlayerTable = dataSourceName.includes(\"Individual\");\r\n    // check if dataSource is team Playoff table\r\n    const isPlayoffTable = dataSourceName.includes(\"Playoff\");\r\n    if ((isTeamTable || isPlayerTable) && isPlayoffTable) {\r\n      screenedDataSource = dataSource.filter((item) => item.get(\"GP\") > 0);\r\n    } else {\r\n      screenedDataSource = dataSource;\r\n    }\r\n    // dom created table\r\n    const tableStats = document.createElement('table');\r\n\r\n    // create table heading\r\n    const tableCaptionElem = document.createElement('caption');\r\n    const tableCaptionHeading = document.createElement('h1');\r\n    tableCaptionHeading.textContent = tableName;\r\n\r\n    // append the table caption\r\n    tableCaptionElem.append(tableCaptionHeading);\r\n    tableStats.append(tableCaptionElem);\r\n\r\n    // begin table headers\r\n    const tableHeadElem = document.createElement('thead');\r\n    const tableHeadRowElem = document.createElement('tr');\r\n    for (let i = 0; i < fieldsLength; i++) {\r\n      const tableHeaderElem = document.createElement('th');\r\n      tableHeaderElem.setAttribute('data-season-Number', seasonNumber)\r\n      tableHeaderElem.setAttribute('data-data-source', dataSourceName)\r\n      tableHeaderElem.setAttribute('data-array-source', fieldsArrayName)\r\n      tableHeaderElem.setAttribute('data-field-name', tableHeaders[i])\r\n      tableHeaderElem.textContent = tableHeaders[i];\r\n      // add orange color to table heading if header is sortBy\r\n      if(tableHeaders[i] == sortBy){\r\n        tableHeaderElem.classList.add(\"w3-orange\")\r\n      }\r\n      // append each <th> to row\r\n      tableHeadRowElem.append(tableHeaderElem);\r\n    }\r\n    // append th row to <thead>\r\n    tableHeadElem.append(tableHeadRowElem)\r\n    // append <thead> to table\r\n    tableStats.append(tableHeadElem)\r\n    // begin each row of table data\r\n    screenedDataSource.forEach((item) => {\r\n      // create a new table row element for each field\r\n      const tableRowElem = document.createElement('tr');\r\n    \r\n      for (let j = 0; j < fieldsLength; j++) {\r\n        // create table data cell element\r\n        const tableDataElem = document.createElement('td');\r\n        tableDataElem.setAttribute('data-season-number', seasonNumber);\r\n        tableDataElem.setAttribute('data-data-source', dataSourceName);\r\n        tableDataElem.setAttribute('data-array-source', fieldsArrayName);\r\n        tableDataElem.setAttribute('data-field-name', tableHeaders[j]);\r\n    \r\n        // add class for sorted column if applicable\r\n        if (tableHeaders[j] === sortBy) {\r\n          tableDataElem.classList.add(color);\r\n        }\r\n\r\n        // check if wins need to be adjusted for OTW and set the content accordingly\r\n        if (isOTW && tableHeaders[j] === \"Wins\") {\r\n          tableDataElem.textContent = item.get(tableHeaders[j]) - item.get(\"OTW\");\r\n        } else {\r\n          tableDataElem.textContent = item.get(tableHeaders[j]);\r\n        }\r\n        // this is column for team logos which table header is blank  \r\n        // 0 refers to all time player stats  \r\n        if(seasonNumber >= SEASON_WITH_TEAM_LOGOS_START){\r\n        // add team logo column for larger screens in it's own column\r\n        if(tableHeaders[j] === \"\"){\r\n          const seasonNumberAsNumber = parseInt(seasonNumber)\r\n          const seasonNumberFolderName = seasonNumberAsNumber>9 ? `S${seasonNumber}` : `S0${seasonNumber}`\r\n          const teamLogo = document.createElement('img')\r\n          teamLogo.alt = 'img'\r\n          if(isTeamTable){\r\n            // seasons where teams now have ai generated team logos\r\n            const teamsLogoName = eachTeamObjectMAP.get(item.get('Team'))[`${seasonNumberFolderName}HomeFilePath`]\r\n            teamLogo.src = `../../../img/teamLogos/${seasonNumberFolderName}/${teamsLogoName}.png`\r\n            tableDataElem.style.backgroundColor = \"#\" + eachTeamObjectMAP.get(item.get('Team')).MainColor\r\n            tableDataElem.append(teamLogo)\r\n          }\r\n          if(isPlayerTable){\r\n            // allows 0 which refers to all time player stats\r\n            const playersTeamID = TeamPlayers.filter((seasonNum) => seasonNum.SeasonNumber == seasonNumber).filter((player) => player.PlayerID === playersNumMAP.get(item.get('Name')))[0].TeamID\r\n            const playersTeamName = Teams.find((team) => team.TeamID === playersTeamID).TeamName\r\n            const teamsLogoName = eachTeamObjectMAP.get(playersTeamName)[`${seasonNumberFolderName}HomeFilePath`]\r\n              // seasons where teams now have ai generated team logos\r\n              teamLogo.src = `../../../img/teamLogos/${seasonNumberFolderName}/${teamsLogoName}.png`\r\n              tableDataElem.style.backgroundColor = \"#\" + eachTeamObjectMAP.get(playersTeamName).MainColor\r\n              tableDataElem.append(teamLogo)\r\n          }\r\n          // finally add styles image element\r\n          if(window.innerWidth >= TABLE_BREAK_POINT){\r\n            teamLogo.style.height = '2.25rem'\r\n            teamLogo.style.width = '2.25rem'\r\n            tableDataElem.style.borderLeft = \"1px solid white\"\r\n          }\r\n          }\r\n          // add team logo to right of team name on smaller screens where table is vertical in display\r\n          if(tableHeaders[j] === 'Team'){\r\n            const seasonNumberAsNumber = parseInt(seasonNumber)\r\n            const seasonNumberFolderName = seasonNumberAsNumber>9 ? `S${seasonNumber}` : `S0${seasonNumber}`\r\n            const teamName = eachTeamObjectMAP.get(item.get(\"Team\"))[`${seasonNumberFolderName}HomeFilePath`]\r\n            const teamLogo = document.createElement('img')\r\n            teamLogo.alt = 'img'\r\n            teamLogo.src = `../../../img/teamLogos/${seasonNumberFolderName}/${teamName}.png`\r\n            if((window.innerWidth < TABLE_BREAK_POINT)){\r\n              teamLogo.style.height = '1.75rem'\r\n              teamLogo.style.width = '1.75rem'\r\n              // teamLogo.style.transform = \"translateY(-.65rem)\"\r\n              tableDataElem.style.display = 'flex'\r\n              tableDataElem.style.justifyContent = \"space-between\"\r\n              teamLogo.style.transform = \"translateY(-.65rem)\"\r\n            }\r\n            tableDataElem.append(teamLogo)\r\n          }\r\n          // add team logo to right of players name on smaller screens where table is vertical in display\r\n          if(tableHeaders[j] === 'Name'){\r\n            const seasonNumberAsNumber = parseInt(seasonNumber)\r\n            const seasonNumberFolderName = seasonNumberAsNumber>9 ? `S${seasonNumber}` : `S0${seasonNumber}`\r\n            const teamLogo = document.createElement('img')\r\n            teamLogo.alt = 'img'\r\n            const playersTeamID = TeamPlayers.filter((seasonNum) => seasonNum.SeasonNumber == seasonNumber).filter((player) => player.PlayerID === playersNumMAP.get(item.get('Name')))[0].TeamID\r\n            const playersTeamName = Teams.find((team) => team.TeamID === playersTeamID).TeamName\r\n            console.log(playersTeamName)\r\n            const teamsLogoName = eachTeamObjectMAP.get(playersTeamName)[`${seasonNumberFolderName}HomeFilePath`]\r\n            teamLogo.src = `../../../img/teamLogos/${seasonNumberFolderName}/${teamsLogoName}.png`\r\n            if((window.innerWidth < TABLE_BREAK_POINT)){\r\n              teamLogo.style.height = '1.75rem'\r\n              teamLogo.style.width = '1.75rem'\r\n              tableDataElem.style.display = 'flex'\r\n              tableDataElem.style.justifyContent = \"space-between\"\r\n              teamLogo.style.transform = \"translateY(-.65rem)\"\r\n            }\r\n            tableDataElem.append(teamLogo)\r\n          }\r\n        }\r\n\r\n        // add team logo to players all time stats table on larger screens\r\n        if(tableHeaders[j] === \"\" && seasonNumber == 0){\r\n          if(isPlayerTable){\r\n            // allows 0 which refers to all time player stats\r\n            const playersTeamIDArray = TeamPlayers.filter((seasonNum) => seasonNum.SeasonNumber == currentSeason).filter((player) => player.PlayerID === playersNumMAP.get(item.get('Name')))\r\n            if(playersTeamIDArray.length > 0){   \r\n                const teamLogo = document.createElement('img')\r\n                teamLogo.alt = 'img'\r\n                const playersTeamID = playersTeamIDArray[0].TeamID            \r\n                const playersTeamName = Teams.find((team) => team.TeamID === playersTeamID).TeamName\r\n                const seasonNumberFolderName = currentSeason>9 ? `S${currentSeason}` : `S0${currentSeason}`\r\n                const teamsLogoName = eachTeamObjectMAP.get(playersTeamName)[`${seasonNumberFolderName}HomeFilePath`]\r\n                // seasons where teams now have ai generated team logos              \r\n                teamLogo.src = `../../../img/teamLogos/${seasonNumberFolderName}/${teamsLogoName}.png`\r\n                tableDataElem.style.backgroundColor = \"#\" + eachTeamObjectMAP.get(playersTeamName).MainColor\r\n                // // finally add styles image element\r\n                if(window.innerWidth >= TABLE_BREAK_POINT){\r\n                  teamLogo.style.height = '2.25rem'\r\n                  teamLogo.style.width = '2.25rem'\r\n                  tableDataElem.style.borderLeft = \"1px solid white\"\r\n                }\r\n                tableDataElem.append(teamLogo)\r\n              }\r\n            }\r\n        }\r\n\r\n        // add team logo to players all time stats table on smaller screens with vertical tables\r\n          if(tableHeaders[j] === \"Name\" && seasonNumber == 0){\r\n          if(isPlayerTable){\r\n            // allows 0 which refers to all time player stats\r\n            const playersTeamIDArray = TeamPlayers.filter((seasonNum) => seasonNum.SeasonNumber == currentSeason).filter((player) => player.PlayerID === playersNumMAP.get(item.get('Name')))\r\n            if(playersTeamIDArray.length > 0){   \r\n                const teamLogo = document.createElement('img')\r\n                teamLogo.alt = 'img'\r\n                const playersTeamID = playersTeamIDArray[0].TeamID            \r\n                const playersTeamName = Teams.find((team) => team.TeamID === playersTeamID).TeamName\r\n                const seasonNumberFolderName = currentSeason>9 ? `S${currentSeason}` : `S0${currentSeason}`\r\n                const teamsLogoName = eachTeamObjectMAP.get(playersTeamName)[`${seasonNumberFolderName}HomeFilePath`]\r\n                // seasons where teams now have ai generated team logos              \r\n                teamLogo.src = `../../../img/teamLogos/${seasonNumberFolderName}/${teamsLogoName}.png`\r\n                tableDataElem.style.backgroundColor = \"#\" + eachTeamObjectMAP.get(playersTeamName).MainColor\r\n                // // finally add styles image element\r\n                if(window.innerWidth < TABLE_BREAK_POINT){\r\n                  tableDataElem.style.borderLeft = \"1px solid white\"\r\n                  teamLogo.style.height = '1.75rem'\r\n                  teamLogo.style.width = '1.75rem'\r\n                  tableDataElem.style.display = 'flex'\r\n                  tableDataElem.style.justifyContent = \"space-between\"\r\n                  teamLogo.style.transform = \"translateY(-.65rem)\"\r\n                }\r\n                tableDataElem.append(teamLogo)\r\n              }\r\n            }\r\n        }\r\n\r\n\r\n        // append the cell to the row\r\n        tableRowElem.append(tableDataElem);\r\n      }\r\n    \r\n      // append the row to the table body\r\n      tableStats.append(tableRowElem);\r\n    });\r\n  \r\n    closeSidebar();\r\n    clearScoreboardDiv();\r\n  \r\n    // display table on web page\r\n    const tablesDiv = getTablesDiv(); // import function\r\n    // clear tablesDiv before appending new data\r\n    tablesDiv.innerHTML = tableStats.outerHTML\r\n  \r\n    // function to change background-color on team row viewed on smaller screens\r\n    if (isTeamTable) {\r\n      setTeamsTableBgColor();\r\n    } else {\r\n      setPlayersTableBgColor(seasonNumber);\r\n    }\r\n  }","export default function getTablesDiv() {\r\n    let tablesDiv = document.getElementById(\"tablesDiv\");\r\n    return tablesDiv;\r\n  }","import currentSeason from \"../var_lib/season/currentSeason\";\r\nimport TeamStats from \"../classFiles/teams/teamStats\"\r\nimport { homePageFieldsNoTies } from \"../../constants/consts/supportVars\";\r\nimport setTableListeners from \"../listeners/listenerHelpers/setTableListeners\";\r\nimport setMainNavbar from \"../layouts/navbar/setMainNavbar\";\r\nimport createTable from \"./createTable\";\r\nimport { DEFENDING_CHAMPS } from \"../../constants/consts/vars\";\r\nimport setHeaderBanner from \"../layouts/setHeaderBanner\";\r\nimport COLORS from \"../../constants/consts/colors\"\r\nexport default function setHomeTable() {\r\n  setHeaderBanner(DEFENDING_CHAMPS, currentSeason-1)\r\n  setMainNavbar(currentSeason);\r\n  const key = `groupTeamsSeason${currentSeason}SeasonStats`\r\n    createTable(\r\n      currentSeason,\r\n      `Season ${currentSeason} Standings`,\r\n      `TeamStats.groupTeamsSeason${currentSeason}SeasonStats`,\r\n      TeamStats[key],\r\n      \"w3-yellow\",\r\n      \"Points\",\r\n      \"homePageFieldsNoTies\",\r\n      homePageFieldsNoTies\r\n    );\r\n    // reset background color when navigating back home from a teams layout page\r\n    document.body.style.backgroundColor = COLORS['w3-blue'];\r\n    setTableListeners();\r\n  }","import createTable from \"./createTable\";\r\nimport IndividualPlayerStats from \"../setTables/createPlayer\";\r\nimport setTableListeners from \"../listeners/listenerHelpers/setTableListeners\";\r\nimport currentSeason from \"../var_lib/season/currentSeason\";\r\nimport { PLAYERS_TABLE } from \"../../constants/consts/supportVars\";\r\nimport setMainNavbar from \"../layouts/navbar/setMainNavbar\";\r\nimport { DEFENDING_CHAMPS, IN_BETWEEN_SEASONS } from \"../../constants/consts/vars\";\r\nimport setHeaderBanner from \"../layouts/setHeaderBanner\";\r\nimport COLORS from \"../../constants/consts/colors\";\r\n\r\n// modeDescriptor either 'Season', 'Playoff', or 'Combined' -- case sensitive!\r\n// tableDescriptor either 'Regular Season', 'Playoffs', or 'All Stats' -- these are just table titles\r\n\r\nexport default function setPlayersAllTimeTable(seasonNumber, modeDescriptor = \"\", tableDescriptor) {\r\n  setHeaderBanner(DEFENDING_CHAMPS, IN_BETWEEN_SEASONS ? currentSeason : currentSeason-1)\r\n  setMainNavbar(currentSeason)\r\n  // all time player stats contains possible 0 as season number\r\n  const key = `groupPlayersAllTime${modeDescriptor}Stats`\r\n  createTable(\r\n    seasonNumber,\r\n    `All Time ${tableDescriptor}`,\r\n    `IndividualPlayerStats.groupPlayersAllTime${modeDescriptor}Stats`,\r\n    IndividualPlayerStats[key],\r\n    \"w3-yellow\",\r\n    \"Points\",\r\n    \"PLAYERS_TABLE\",\r\n    PLAYERS_TABLE\r\n  );\r\n  document.body.style.backgroundColor = COLORS[\"w3-blue\"]; \r\n  setTableListeners();\r\n  }","import createTable from \"./createTable\";\r\nimport IndividualPlayerStats from \"../setTables/createPlayer\";\r\nimport setTableListeners from \"../listeners/listenerHelpers/setTableListeners\";\r\nimport currentSeason from \"../var_lib/season/currentSeason\";\r\nimport { PLAYERS_TABLE } from \"../../constants/consts/supportVars\";\r\nimport setMainNavbar from \"../layouts/navbar/setMainNavbar\";\r\nimport { DEFENDING_CHAMPS, IN_BETWEEN_SEASONS } from \"../../constants/consts/vars\";\r\nimport setHeaderBanner from \"../layouts/setHeaderBanner\";\r\nimport COLORS from \"../../constants/consts/colors\";\r\n\r\n// modeDescriptor either 'Season', 'Playoff', or 'Combined' -- case sensitive!\r\n// tableDescriptor either 'Regular Season', 'Playoffs', or 'All Stats' -- these are just table titles\r\n\r\nexport default function setPlayersFullTable(seasonNumber = currentSeason, modeDescriptor = \"Season\", tableDescriptor = \"Regular Season\") {\r\n  setHeaderBanner(DEFENDING_CHAMPS, IN_BETWEEN_SEASONS ? currentSeason : currentSeason-1)\r\n  setMainNavbar(seasonNumber)\r\n  const key = `groupPlayersSeason${seasonNumber}${modeDescriptor}Stats`\r\n  createTable(\r\n    seasonNumber,\r\n    `S0${seasonNumber} ${tableDescriptor}`,\r\n    `IndividualPlayerStats.groupPlayersSeason${seasonNumber}${modeDescriptor}Stats`,\r\n    IndividualPlayerStats[key],\r\n    \"w3-yellow\",\r\n    \"Points\",\r\n    \"PLAYERS_TABLE\",\r\n    PLAYERS_TABLE\r\n  );\r\n  document.body.style.backgroundColor = COLORS[\"w3-blue\"]; \r\n  setTableListeners();\r\n  }\r\n  ","import createTable from \"./createTable\";\r\nimport { fullTableNoTies, fullTable } from \"../../constants/consts/supportVars\";\r\nimport { SEASONS_WITH_TIE_GAMES, DEFENDING_CHAMPS, IN_BETWEEN_SEASONS } from \"../../constants/consts/vars\";\r\nimport TeamStats from \"../setTables/createTeam\"\r\nimport setTableListeners from \"../listeners/listenerHelpers/setTableListeners\";\r\nimport setMainNavbar from \"../layouts/navbar/setMainNavbar\";\r\nimport currentSeason from \"../var_lib/season/currentSeason\";\r\nimport setHeaderBanner from \"../layouts/setHeaderBanner\";\r\nimport COLORS from \"../../constants/consts/colors\";\r\n\r\n// modeDescriptor either 'Season', 'Playoff', or 'Combined' -- case sensitive!\r\n// tableDescriptor either 'Regular Season', 'Playoffs', or 'Combined' -- these are just table titles\r\n\r\nexport default function setSeasonsFullTable(seasonNumber = currentSeason, modeDescriptor = \"Season\", tableDescriptor = \"Regular Season\") {\r\n  setHeaderBanner(DEFENDING_CHAMPS, IN_BETWEEN_SEASONS ? currentSeason : currentSeason-1)\r\n  setMainNavbar(seasonNumber);\r\n  // set the table headers for ties for seasons that played with tie games\r\n  let tableTypeString;\r\n  let tableTypeArray;\r\n  if(SEASONS_WITH_TIE_GAMES.includes(seasonNumber)){\r\n    tableTypeString = \"fullTable\";\r\n    tableTypeArray = fullTable\r\n  } else {\r\n    tableTypeString = \"fullTableNoTies\";\r\n    tableTypeArray = fullTableNoTies;\r\n  }\r\n  \r\n  const key = `groupTeamsSeason${seasonNumber}${modeDescriptor}Stats`\r\n  createTable(\r\n    seasonNumber,\r\n    `S0${seasonNumber} ${tableDescriptor}`,\r\n    `TeamStats.groupTeamsSeason${seasonNumber}${modeDescriptor}Stats`,\r\n    TeamStats[key],\r\n    \"w3-yellow\",\r\n    \"Points\",\r\n    tableTypeString,\r\n    tableTypeArray\r\n  );\r\n  document.body.style.backgroundColor = COLORS[\"w3-blue\"]; \r\n  setTableListeners();\r\n  }","// map a list of season modes by Number to name (Season or Playoff)\r\n\r\nimport { GAME_TYPE_LENGTH } from \"../../../../constants/consts/vars\";\r\nimport { GameType } from \"../../../../constants/masterHaxData\";\r\n\r\nconst gameTypeMAP = new Map();\r\n\r\nfor (let i = 0; i < GAME_TYPE_LENGTH; i++) {\r\n    // map a list of season modes by Number to name (Season or Playoff)\r\n    gameTypeMAP.set(Number(GameType[i].GameTypeID), GameType[i].GameType);\r\n  }\r\n\r\nexport default gameTypeMAP;","// map a list what seasons each player played in\r\nimport { PLAYERS_LENGTH } from \"../../../../constants/consts/vars\";\r\nimport { TeamPlayers } from \"../../../../constants/masterHaxData\";\r\nimport playersMAP from \"./playersMAP\"\r\n\r\nconst playerSeasonsMAP = new Map();\r\n\r\nfor (let i = 0; i < PLAYERS_LENGTH; i++) {\r\n    // map a list what seasons each player played in\r\n    playerSeasonsMAP.set(\r\n      playersMAP.get(i + 1),\r\n      Array.from(\r\n        TeamPlayers\r\n          .filter((item) => item.PlayerID == i + 1)\r\n          .map((item) => item.SeasonNumber)\r\n      ).sort()\r\n    );\r\n  }\r\n\r\nexport default playerSeasonsMAP;","// maps key as playerID to textual value of players name\r\nimport { PLAYERS_LENGTH } from \"../../../../constants/consts/vars\"\r\nimport { Players } from \"../../../../constants/masterHaxData\";\r\n\r\nconst playersMAP = new Map();\r\n\r\nfor (let i = 0; i < PLAYERS_LENGTH; i++) {\r\n    // map a list of players number key to textual value\r\n    playersMAP.set(Number(Players[i].PlayerID), Players[i].Players);\r\n  }\r\n\r\nexport default playersMAP;","// maps key as textual name key to playerID value\r\nimport { PLAYERS_LENGTH } from \"../../../../constants/consts/vars\";\r\nimport { Players } from \"../../../../constants/masterHaxData\";\r\n\r\nconst playersNumMAP = new Map();\r\n\r\nfor (let i = 0; i < PLAYERS_LENGTH; i++) {\r\n    // map a list of players textual key to number value nameID\r\n    playersNumMAP.set(Players[i].Players, Number(Players[i].PlayerID));\r\n  }\r\n\r\nexport default playersNumMAP;","// import TeamStats from \"../../scripts/classFiles/teamStats\";\r\nimport TeamStats from \"../../setTables/createTeam\";\r\nimport IndividualPlayerStats from \"../../setTables/createPlayer\";\r\nimport seasonCount from \"../../var_lib/season/seasonCount\";\r\n\r\nconst seasonCountLength = seasonCount.length;\r\nconst tableDataSource = new Map();\r\ntableDataSource\r\n  // TEAMS GROUPINGS\r\n  // ALL TIME\r\n  .set(\r\n    \"TeamStats.groupTeamsAllTimeSeasonStats\",\r\n    TeamStats.groupTeamsAllTimeSeasonStats\r\n  )\r\n  .set(\r\n    \"TeamStats.groupTeamsAllTimePlayoffStats\",\r\n    TeamStats.groupTeamsAllTimePlayoffStats\r\n  )\r\n  .set(\"TeamStats.groupTeamsAllTimeStats\", TeamStats.groupTeamsAllTimeStats);\r\n  // EACH SEASONS TEAMS\r\n  let statCategory = [\"Season\", \"Playoff\", \"Combined\"];\r\n  for (let i = 0; i < statCategory.length; i++) {\r\n    for (let j = 1; j <= seasonCountLength; j++) {\r\n      const key = `groupTeamsSeason${j}${statCategory[i]}Stats`;\r\n      tableDataSource.set(\r\n        \"TeamStats.groupTeamsSeason\" + j + statCategory[i] + \"Stats\",\r\n        TeamStats[key]\r\n        // eval(\"TeamStats.groupTeamsSeason\" + j + statCategory[i] + \"Stats\")\r\n      );\r\n    }\r\n  }\r\n// PLAYERS GROUPINGS\r\n// ALL TIME PLAYERS\r\ntableDataSource\r\n  .set(\r\n    \"IndividualPlayerStats.groupPlayersAllTimeSeasonStats\",\r\n    IndividualPlayerStats.groupPlayersAllTimeSeasonStats\r\n  )\r\n  .set(\r\n    \"IndividualPlayerStats.groupPlayersAllTimePlayoffStats\",\r\n    IndividualPlayerStats.groupPlayersAllTimePlayoffStats\r\n  )\r\n  .set(\r\n    \"IndividualPlayerStats.groupPlayersAllTimeStats\",\r\n    IndividualPlayerStats.groupPlayersAllTimeStats\r\n  );\r\n// EACH SEASONS PLAYERS\r\n\r\nfor (let i = 0; i < statCategory.length; i++) {\r\n  for (let j = 1; j <= seasonCountLength; j++) {\r\n    const key = `groupPlayersSeason${j}${statCategory[i]}Stats`;\r\n    tableDataSource.set(\r\n      \"IndividualPlayerStats.groupPlayersSeason\" +\r\n        j +\r\n        statCategory[i] +\r\n        \"Stats\",\r\n        IndividualPlayerStats[key]\r\n      // eval(\r\n      //   \"IndividualPlayerStats.groupPlayersSeason\" +\r\n      //     j +\r\n      //     statCategory[i] +\r\n      //     \"Stats\"\r\n      // )\r\n    );\r\n  }\r\n}\r\n// end seasons sets\r\nexport default tableDataSource;","import { fullTable, homePageFields, PLAYERS_TABLE, fullTableNoTies, homePageFieldsNoTies } from \"../../../constants/consts/supportVars\";\r\n\r\n// PLACE ARRAYS IN A MAP IN ORDER FOR \"sortTable\" METHOD TO PROPERLY RETRIEVE DATA ATTRIBUTES\r\nconst tableFields = new Map();\r\ntableFields\r\n  .set(\"fullTable\", fullTable)\r\n  .set(\"homePageFields\", homePageFields)\r\n  .set(\"PLAYERS_TABLE\", PLAYERS_TABLE)\r\n  .set(\"fullTableNoTies\", fullTableNoTies)\r\n  .set(\"homePageFieldsNoTies\", homePageFieldsNoTies);\r\n\r\n  export default tableFields;","// maps via key as number representing season to array value of which teams competed that season\r\nimport seasonCount from \"../../season/seasonCount\"\r\nimport { TeamPlayers } from \"../../../../constants/masterHaxData\"\r\nimport teamsMAP from \"./teamsMAP\";\r\n\r\nconst eachSeasonsTeamsMAP = new Map();\r\n\r\nfor (let i = 1; i <= seasonCount.length; i++) {\r\n    eachSeasonsTeamsMAP.set(\r\n      i,\r\n      Array.from(\r\n        new Set(\r\n          TeamPlayers\r\n            .filter((item) => item.SeasonNumber == i)\r\n            .map((item) => teamsMAP.get(+item.TeamID))\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\nexport default eachSeasonsTeamsMAP;","// maps out each teams basic info. ID, Color, logo file path, etc...\r\nimport { TEAMS_LENGTH, TEAM_NAMES_ARRAY } from \"../../../../constants/consts/vars\";\r\nimport { Teams } from \"../../../../constants/masterHaxData\";\r\n\r\nconst eachTeamObjectMAP = new Map();\r\n\r\nfor (let i = 0; i < TEAMS_LENGTH; i++) {\r\n    TEAM_NAMES_ARRAY[i] = Teams[i].TeamName;\r\n    eachTeamObjectMAP.set(TEAM_NAMES_ARRAY[i], Teams[i]);\r\n  }\r\n\r\n  export default eachTeamObjectMAP;","// maps teams main color with ID number\r\nimport teamsMAP from \"./teamsMAP\";\r\nimport { Teams } from \"../../../../constants/masterHaxData\";\r\n\r\nconst teamsColorMAP = new Map();\r\n\r\nfor (let i = 0; i < teamsMAP.size; i++) {\r\n    teamsColorMAP.set(teamsMAP.get(i + 1), Teams[i].MainColor);\r\n  }\r\n\r\nexport default teamsColorMAP;","// maps teams via key is teamID number to textual name as value\r\nimport { Teams } from \"../../../../constants/masterHaxData\";\r\nimport { TEAMS_LENGTH } from \"../../../../constants/consts/vars\";\r\n\r\nconst teamsMAP = new Map()\r\n\r\nfor (let i = 0; i < TEAMS_LENGTH; i++) {\r\n    // map a list of teams with ID number to name\r\n    teamsMAP.set(Number(Teams[i].TeamID), Teams[i].TeamName);\r\n  }\r\n\r\n  export default teamsMAP;","// maps teams via key as textual name to teamID number\r\nimport { Teams } from \"../../../../constants/masterHaxData\";\r\nimport { TEAMS_LENGTH } from \"../../../../constants/consts/vars\";\r\n\r\nconst teamsNumMAP = new Map();\r\n\r\nfor (let i = 0; i < TEAMS_LENGTH; i++) {\r\n    // map a list of teams with ID number to name\r\n    teamsNumMAP.set(Teams[i].TeamName, Number(Teams[i].TeamID));\r\n  }\r\n\r\nexport default teamsNumMAP;","// maps via key as textual name to array of which seasons team competed in\r\nimport teamsMAP from \"./teamsMAP\"\r\nimport teamsNumMAP from \"./teamsNumMAP\"\r\nimport { TeamPlayers } from \"../../../../constants/masterHaxData\"\r\n\r\nconst teamsSeasonsMAP = new Map()\r\n\r\nfor (let i = 1; i <= teamsMAP.size; i++) {\r\n    teamsSeasonsMAP.set(\r\n      teamsMAP.get(i),\r\n      Array.from(\r\n        new Set(\r\n          TeamPlayers\r\n            .filter((item) => item.TeamID == teamsNumMAP.get(teamsMAP.get(i)))\r\n            .map((item) => item.SeasonNumber)\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\nexport default teamsSeasonsMAP","// gets the most recent season that has been played or is currently running\r\n\r\nimport {TeamPlayers} from \"../../../constants/masterHaxData\"\r\n\r\nconst currentSeason = Math.max(\r\n    ...Array.from(new Set(TeamPlayers.map((item) => +item.SeasonNumber)))\r\n  );\r\n\r\nexport default currentSeason","//get count of how many seasons in order to create arrays for each season\r\n\r\n  import {TeamPlayers} from \"../../../constants/masterHaxData\"\r\n\r\n  const seasonCount = Array.from(\r\n    //get count of how many seasons in order to create arrays for each season\r\n    new Set(TeamPlayers.map((item) => item.SeasonNumber))\r\n  );\r\n\r\n  export default seasonCount;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(44);\n",""],"names":[],"sourceRoot":""}